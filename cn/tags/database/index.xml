<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>database on</title><link>https://gohalo.github.io/cn/tags/database/</link><description>Recent content in database on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 21 Sep 2024 21:15:12 +0800</lastBuildDate><atom:link href="https://gohalo.github.io/cn/tags/database/index.xml" rel="self" type="application/rss+xml"/><item><title>向量搜索简介</title><link>https://gohalo.github.io/cn/blog/database-vector-search/</link><pubDate>Sat, 21 Sep 2024 21:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/database-vector-search/</guid><description/></item><item><title>数据库 WAL 简介</title><link>https://gohalo.github.io/cn/blog/database-wal-introduce/</link><pubDate>Sat, 21 Sep 2024 21:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/database-wal-introduce/</guid><description>&lt;p>包括 BTree 和 LSMTree 的实现，原地更新会导致很多随机写，常规实现是通过 Write Ahead Log, WAL 顺序写入到日志文件中，然后后台更新数据，同时还支持容灾、故障恢复。&lt;/p></description></item><item><title>数据库事务简介</title><link>https://gohalo.github.io/cn/blog/database-transaction-basic-introduce/</link><pubDate>Sat, 21 Sep 2024 21:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/database-transaction-basic-introduce/</guid><description>简介 # 当前很多数据库的 ACID 特性会基于 MVCC Snapshot Isolation 来实现，这样读写不会相互阻塞，同时能够提供原子能力。另外，关于 MySQL 的可以参考 InnoDB 隔离级别 中的介绍。
ACID # 是 Atomic 原子性、Consistency 一致性、Isolation 隔离性、Durability 持久化的简写，如下简单整理相关基本概念。
Atomic: 要么全部生效 (Commit)，要么全部撤销 (Rollback)，不会出现中间态 &amp;gt; 日志管理 Redo 相关修改操作需要在提交前落盘 Undo 用于故障恢复以及事务回退 Consistency: 并发执行过程中，确保数据的合法性，满足完整性约束 &amp;gt; 业务层面保证，转账不会出现已经扣减但是未收到情况 &amp;gt; 各种约束，例如唯一性、外键、触发器等 Isolation: 确保并发事务是可串行化的，可见性和性能的均衡 &amp;gt; 并发控制，消除可能带来的异常，脏读、不可重复读、幻读等 通常会采用两阶段锁、MVCC/Snapshot、时间戳、乐观并发控制 &amp;gt; 隔离级别 未提交读 (Read Uncommitted) 已提交读 (Read Committed) 可重复读 (Repeatable Read) 可串行化 (Serializability) Snapshot (Snapshot Isolation) Durability: 保证已经提交数据不会丢失 &amp;gt; 缓冲区脏页刷新，可以是异步，同时考虑污染 &amp;gt; Checkpoint 机制，防止日志无限膨胀 &amp;gt; Redo/Undo 用于故障恢复 &amp;gt; 复制，可以是逻辑复制、物理复制，不同场景要求不同 MVCC # 自从发明了 Multi-Version Concurrency Control, MVCC 之后，几乎所有的数据库都开始抛弃 (部分抛弃) 性能较差的两阶段锁的并发控制，所以，后续兴起分布式系统几乎都采用 MVCC 的并发控制方案。</description></item><item><title>数据库分布式事务简介</title><link>https://gohalo.github.io/cn/blog/database-distributed-transaction/</link><pubDate>Sat, 21 Sep 2024 21:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/database-distributed-transaction/</guid><description>&lt;p>分布式事务与传统的单机事务要复杂很多，由此衍生出来多种算法，这里简单介绍。&lt;/p></description></item><item><title>本地缓存详解</title><link>https://gohalo.github.io/cn/blog/local-cache-introduce/</link><pubDate>Fri, 20 Sep 2024 19:28:10 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/local-cache-introduce/</guid><description/></item><item><title>ToyDB 简介</title><link>https://gohalo.github.io/cn/blog/database-toydb-introduce/</link><pubDate>Thu, 12 Sep 2024 19:17:02 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/database-toydb-introduce/</guid><description>&lt;p>一个 Rust 编写的分布式数据库实现，麻雀虽小五脏俱全。&lt;/p></description></item><item><title>数据库优化器之即时编译</title><link>https://gohalo.github.io/cn/blog/database-jit-introduce/</link><pubDate>Sat, 30 Dec 2023 20:52:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/database-jit-introduce/</guid><description>&lt;p>代码生成或者说即时编译在数据库中使用比较多，常见的包括了用户输入的表达式、查询、存储过程等，会将其编译成二进制代码再执行，相比解释执行的方式运行效率要高很多。&lt;/p></description></item><item><title>分布式系统时间处理</title><link>https://gohalo.github.io/cn/blog/database-clock-introduce/</link><pubDate>Sat, 09 Dec 2023 20:52:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/database-clock-introduce/</guid><description>&lt;p>在分布式系统中，需要解决事务的时序问题，包括 MVCC、ACID 等，当前常用的有 Logical Clock、True Time、Hybrid Logic Clock、Timestamp Oracle 等。&lt;/p>
&lt;p>这里简单介绍其基本概念。&lt;/p></description></item><item><title>流处理简介</title><link>https://gohalo.github.io/cn/blog/database-streaming-introduce/</link><pubDate>Sat, 09 Dec 2023 20:52:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/database-streaming-introduce/</guid><description>&lt;p>当前流处理使用最广泛的还是 Flink、Spark Streaming，只是两者基于历史演进策略不同，实现的流处理细节也略有区别。&lt;/p></description></item><item><title>数据库优化之子查询</title><link>https://gohalo.github.io/cn/blog/database-optimize-subquery/</link><pubDate>Fri, 10 Nov 2023 20:52:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/database-optimize-subquery/</guid><description>&lt;p>子查询允许用户直接引用外层查询的列，有很强的语义表达能力，所以被广泛使用，例如在 TPCH 的 22 个查询中，有 13 个查询都包含子查询。&lt;/p>
&lt;p>这也是 SQL 优化器中的难点之一，通常需要进行去关联化操作，将其改写为类似 SemiJoin 这种更高效的算子。&lt;/p></description></item><item><title>LLVM 即时编译</title><link>https://gohalo.github.io/cn/blog/llvm-jit-introduce/</link><pubDate>Sun, 29 Oct 2023 20:52:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/llvm-jit-introduce/</guid><description>&lt;p>当前大部分的一些三方编译器都会依赖于 LLVM 框架，除了经常使用的 clang 编译器之外，还可以作为一个框架使用。&lt;/p></description></item><item><title>数据库优化器之 Join 顺序</title><link>https://gohalo.github.io/cn/blog/database-join-order-introduce/</link><pubDate>Sun, 29 Oct 2023 20:52:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/database-join-order-introduce/</guid><description>&lt;p>多表 Join 处理在现实业务中很常见，通常其执行效率和 Join 的顺序息息相关。&lt;/p></description></item><item><title>数据库优化器之统计信息</title><link>https://gohalo.github.io/cn/blog/database-statistics-introduce/</link><pubDate>Sun, 29 Oct 2023 20:52:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/database-statistics-introduce/</guid><description/></item><item><title>数据库执行器初探</title><link>https://gohalo.github.io/cn/blog/database-execute-engine-introduce/</link><pubDate>Sun, 29 Oct 2023 20:52:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/database-execute-engine-introduce/</guid><description/></item><item><title>数据库优化器初探</title><link>https://gohalo.github.io/cn/blog/database-optimizer-introduce/</link><pubDate>Sun, 22 Oct 2023 20:52:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/database-optimizer-introduce/</guid><description>&lt;p>查询优化器是数据库中比较难懂的部分，其它的还有事务处理，尤其是融合了隔离级别以及不同的锁、MVCC 实现之后。&lt;/p></description></item><item><title>ClickHouse 使用详解</title><link>https://gohalo.github.io/cn/blog/clickhouse-basic-introduce/</link><pubDate>Fri, 29 Sep 2023 20:52:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/clickhouse-basic-introduce/</guid><description/></item><item><title>ClickHouse 问题排查调优技巧</title><link>https://gohalo.github.io/cn/blog/clickhouse-debug-tunning/</link><pubDate>Fri, 29 Sep 2023 20:52:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/clickhouse-debug-tunning/</guid><description/></item><item><title>TPCH 标准测试集</title><link>https://gohalo.github.io/cn/blog/benchmark-tpch-introduce/</link><pubDate>Sat, 23 Sep 2023 22:23:32 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/benchmark-tpch-introduce/</guid><description>&lt;p>由事务处理委员会提供的基准测试集。&lt;/p></description></item><item><title>Snapshot Isolation 详解</title><link>https://gohalo.github.io/cn/blog/database-snapshot-isolation-introduce/</link><pubDate>Sun, 20 Nov 2022 20:52:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/database-snapshot-isolation-introduce/</guid><description>&lt;p>对于数据库领域来说，这应该是最基础的概念了，谈到事务隔离级别。&lt;/p></description></item><item><title>分布式锁详解</title><link>https://gohalo.github.io/cn/blog/database-distributed-locking/</link><pubDate>Sun, 20 Nov 2022 20:52:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/database-distributed-locking/</guid><description/></item><item><title>RocksDB 基本介绍</title><link>https://gohalo.github.io/cn/blog/rocksdb-basic-introduce/</link><pubDate>Wed, 21 Sep 2022 22:23:32 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rocksdb-basic-introduce/</guid><description>&lt;p>通过 CPP 开发的嵌入式 KV 数据库，源自 LevelDB 但是进行了极大的优化。&lt;/p></description></item><item><title>RocksDB 相关工具使用</title><link>https://gohalo.github.io/cn/blog/rocksdb-some-tools/</link><pubDate>Wed, 21 Sep 2022 22:23:32 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rocksdb-some-tools/</guid><description>&lt;p>简单整理部分常用的工具。&lt;/p></description></item><item><title>BoltDB 数据库详细介绍</title><link>https://gohalo.github.io/cn/blog/golang-boltdb-introduce/</link><pubDate>Mon, 19 Sep 2022 21:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-boltdb-introduce/</guid><description>&lt;p>ETCD 后端存储采用的是 BBolt 存储引擎，其前身是 BoltDB ，这是一款 golang 实现的嵌入式 KV 存储引擎，参考的是 LMDB，支持事务、ACID、MVCC、ZeroCopy、BTree等特性。&lt;/p></description></item><item><title>LMDB 详细介绍</title><link>https://gohalo.github.io/cn/blog/lmdb-database-introduce/</link><pubDate>Mon, 19 Sep 2022 21:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/lmdb-database-introduce/</guid><description>&lt;p>LMDB 是 OpenLDAP 项目开发的嵌入式存储引擎，通过 mmap 实现，提供了 B+Tree 索引，并提供了 Multi Version Concurrent Control, MVCC 功能。&lt;/p>
&lt;p>这里简单介绍其使用方法，以及相关的实现。&lt;/p></description></item><item><title>Gossip 协议详解</title><link>https://gohalo.github.io/cn/blog/gossip-distribute-protocol/</link><pubDate>Sat, 16 Apr 2022 21:18:40 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/gossip-distribute-protocol/</guid><description/></item><item><title>SQL 与关系代数</title><link>https://gohalo.github.io/cn/blog/database-sql-relational-algebra/</link><pubDate>Sat, 12 Jun 2021 20:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/database-sql-relational-algebra/</guid><description/></item><item><title>数据库质量体系构建</title><link>https://gohalo.github.io/cn/blog/database-testing-chaos/</link><pubDate>Sat, 12 Jun 2021 20:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/database-testing-chaos/</guid><description>&lt;p>这里介绍数据库相关的测试，包括了基准、分布式、混沌工程等。&lt;/p></description></item><item><title>MySQL 日志相关</title><link>https://gohalo.github.io/cn/blog/mysql-log/</link><pubDate>Wed, 19 May 2021 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-log/</guid><description>&lt;p>MySQL 中的日志主要包括了：错误日志、查询日志、慢查询日志、事务日志、二进制日志，在此，介绍下一些常见的配置，以及 BinLog 相关内容。&lt;/p></description></item><item><title>MySQL 基本概念介绍</title><link>https://gohalo.github.io/cn/blog/mysql-basic-introduce/</link><pubDate>Fri, 30 Apr 2021 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-basic-introduce/</guid><description>&lt;p>在此主要介绍下与数据库相关的一些操作，其中有一部分是与 MySQL 相关的功能。&lt;/p></description></item><item><title>MySQL 语法解析</title><link>https://gohalo.github.io/cn/blog/mysql-parser/</link><pubDate>Sat, 21 Nov 2020 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-parser/</guid><description>当服务器接收到一条 SQL 语句时，会经过词法分析、语法分析、语义分析、构造执行树、生成执行计划、计划的执行几个过程。其中，词法语法解析的处理过程根编译原理上的东西基本类似，MySQL 并没有使用 lex 来实现词法分析，但是语法分析用了 yacc。
与之对比的 SQLite 数据库，其词法分析器是手工写的，语法分析器由 Lemon 生成。在此介绍其在 MySQL 中的使用。
源码解析 # Linux 一般来说，词法和语法解析都是通过 Flex 与 Bison 完成的；而在 MySQL 中，词法分析使用自己的程序，而语法分析使用的是 Bison；Bison 会根据 MySQL 定义的语法规则，进行语法解析。
完成语法解析后，会将解析结果生成的数据结构保存在 struct LEX 中，该结构体在 sql/sql_lex.h 文件中定义。
struct LEX: public Query_tables_list { friend bool lex_start(THD *thd); SELECT_LEX_UNIT *unit; ///&amp;lt; Outer-most query expression /// @todo: select_lex can be replaced with unit-&amp;gt;first-select() SELECT_LEX *select_lex; ///&amp;lt; First query block SELECT_LEX *all_selects_list; ///&amp;lt; List of all query blocks private: /* current SELECT_LEX in parsing */ SELECT_LEX *m_current_select; .</description></item><item><title>DBDeployer 常用命令</title><link>https://gohalo.github.io/cn/blog/mysql-tools-dbdeployer-cheatsheet/</link><pubDate>Wed, 18 Nov 2020 20:01:39 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-tools-dbdeployer-cheatsheet/</guid><description>&lt;p>DBDeployer 是一款十分强大的数据库测试环境部署工具，可实现一键部署不同架构、不同版本的数据库环境，之前已经详细介绍过其使用方法。&lt;/p>
&lt;p>这里将一些常用的命令整理下，已方便查询。&lt;/p></description></item><item><title>详细介绍 DBDeployer 部署工具使用</title><link>https://gohalo.github.io/cn/blog/mysql-tools-dbdeployer-usage/</link><pubDate>Wed, 18 Nov 2020 20:01:39 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-tools-dbdeployer-usage/</guid><description>&lt;p>通过 DBDeployer 可以在本地快速搭建一个强大的测试环境，包括了不同版本、不同架构的数据库环境，例如 MySQL 主从复制、GTID 模式复制、MySQL 组复制等等。&lt;/p>
&lt;p>支持几乎当前所有版本的 MySQL 发行版本，除了官方的，还有 Percona MySQL、MariaDB、MySQL NDB Cluster、Percona XtraDB Cluster 等等，还有 MySQL-Shell 的安装，甚至还有 TiDB ，估计是 TiDB 团队贡献的代码吧。&lt;/p>
&lt;p>这里会详细介绍其使用方法。&lt;/p></description></item><item><title>InnoDB 简单介绍</title><link>https://gohalo.github.io/cn/blog/mysql-innodb-introduce/</link><pubDate>Thu, 08 Oct 2020 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-innodb-introduce/</guid><description>&lt;p>我们知道，在 MySQL 中，存储引擎是通过插件实现的，从而使得添加存储引擎时相对来说比较简单，而且目前支持多种类型的存储引擎。&lt;/p>
&lt;p>InnoDB 目前基本上已经是实时上的没人存储引擎了，现在可以支持外键、行锁、MVCC、支持标准的 4 种隔离级别等等。实际上，这也就意味着 InnoDB 是相当复杂的一个存储引擎。&lt;/p>
&lt;p>在此，仅简单介绍下。&lt;/p></description></item><item><title>InnoDB 崩溃恢复</title><link>https://gohalo.github.io/cn/blog/mysql-innodb-crash-recovery/</link><pubDate>Thu, 03 Sep 2020 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-innodb-crash-recovery/</guid><description>&lt;p>如果 InnoDB 没有正常关闭，会在服务器启动的时候执行崩溃恢复 (Crash Recovery)，这一流程比较复杂，涉及到了 redo log、undo log 甚至包括了 binlog 。&lt;/p>
&lt;p>在此简单介绍下 InnoDB 崩溃恢复的流程。&lt;/p></description></item><item><title>整数溢出</title><link>https://gohalo.github.io/cn/blog/integer-overflow/</link><pubDate>Sat, 28 Mar 2020 22:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/integer-overflow/</guid><description>&lt;p>这实际上是一个很严重的问题，包括 PostgreSQL、ZooKeeper 都可能会出现。&lt;/p></description></item><item><title>MySQL 通讯协议详解</title><link>https://gohalo.github.io/cn/blog/mysql-protocol-details/</link><pubDate>Sun, 08 Dec 2019 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-protocol-details/</guid><description>&lt;p>Client/Server 通讯协议用于客户端链接、代理、主备复制等，支持 SSL、压缩，在链接阶段进行认证，在执行命令时可以支持 Prepared Statements 以及 Stored Procedures 。&lt;/p>
&lt;p>当打算编写数据库代理、中间件、对 MySQL 数据包进行审核时，都需要了解底层的通信协议。在本文中，主要介绍 MySQL 通讯协议相关的内容。&lt;/p></description></item><item><title>MySQL 存储引擎</title><link>https://gohalo.github.io/cn/blog/mysql-storage-engine-plugin/</link><pubDate>Tue, 12 Nov 2019 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-storage-engine-plugin/</guid><description>&lt;p>众所周知，在 MySQL 中很多功能是通过插件实现的，包括了其中的存储引擎。在此简单介绍一下与 MySQL 存储引擎相关的内容，包括了提供的接口，实现方法等。&lt;/p>
&lt;p>在 &lt;a href="https://gohalo.github.io/cn/blog/mysql-plugin/">MySQL 插件&lt;/a> 这篇文章中，已经讨论了与插件相关的内容，包括了编译、加载、使用方法等，同时也包括了存储引擎，详细使用方法可以参考这篇文章。&lt;/p>
&lt;p>在此，仅介绍下 MySQL 中，存储引擎的实现。&lt;/p></description></item><item><title>MySQL 常用工具</title><link>https://gohalo.github.io/cn/blog/mysql-tools/</link><pubDate>Tue, 12 Nov 2019 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-tools/</guid><description>&lt;p>在此介绍一些 MySQL 中常用的工具，包括了 percona-tools、sysbench 等工具。&lt;/p>
&lt;p>接下来我们看看。&lt;/p></description></item><item><title>MySQL 复制源码解析</title><link>https://gohalo.github.io/cn/blog/mysql-replication-sourcecode/</link><pubDate>Fri, 04 Oct 2019 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-replication-sourcecode/</guid><description>&lt;p>MySQL 主从复制通过 binlog 实现，从库通过 dump 协议来交互数据的，binlog 复制的基本逻辑处理单元为 event 。&lt;/p>
&lt;p>在本文中，我们看看源码是如何执行的。&lt;/p></description></item><item><title>InnoDB Double Write Buffer</title><link>https://gohalo.github.io/cn/blog/mysql-innodb-double-write-buffer/</link><pubDate>Fri, 13 Sep 2019 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-innodb-double-write-buffer/</guid><description>&lt;p>从 Double Write Buffer 来看，貌似是内存中的一块缓存区域，实际上，这里的 buffer 并不只是一块内存区域，而是还包括了存放在表空间中或是单独指定的某个文件中的一个 buffer 。&lt;/p>
&lt;p>在此，介绍下为什么会有 Double Write Buffer，以及其是如何实现的。&lt;/p></description></item><item><title>MySQL 自带工具</title><link>https://gohalo.github.io/cn/blog/mysql-tools-internal/</link><pubDate>Mon, 19 Aug 2019 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-tools-internal/</guid><description>&lt;p>简单介绍下 MySQL 中自带的工具集。&lt;/p></description></item><item><title>InnoDB 存储空间</title><link>https://gohalo.github.io/cn/blog/mysql-innodb-storage/</link><pubDate>Tue, 23 Jul 2019 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-innodb-storage/</guid><description>&lt;p>InnoDB 表空间 (table space) 用来组织存储保存的数据，本文中对表空间管理进行分析。&lt;/p></description></item><item><title>MySQL 复制方式</title><link>https://gohalo.github.io/cn/blog/mysql-replication/</link><pubDate>Wed, 08 May 2019 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-replication/</guid><description>MySQL 的复制包括了多种方式，一种是基于 Binlog 的原生复制方式，除此之外，还包括了通过插件实现的 semi-sync 复制。另外，针对 InnoDB 实现的 xtrabackup 也可以作为一种复制方式。
在本文中，简单介绍下 MySQL 中的复制方式。
简介 # MySQL 在复制时，可以指定要忽略的数据库、需要复制的数据库甚至具体那些表；支持异步复制、半同步复制、同步复制 (NDB Cluster, Group Replication)、延迟复制等模式。
在进行复制的时候，有两种格式： Statement Based、Row Based，也可以是两者的组合，在配置文件中通过 binlog_format 参数进行设置；后面再介绍与格式相关的内容。
其中，MySQL 的复制原理如下图所示。
在主服务器上，会将数据的更新写入到 binary log 中，而备服务器会从该文件中读取对数据的更改；每次备服务器链接到主时，都会分配一个单独的线程进行处理；该线程会将 binlog 产生的事件发送到备服务器。
通常来说，主服务器会直接从缓存中读取 binlog ，所以不会对磁盘造成压力；但是，如果读取的数据是半小时，甚至更长事件之前的数据，那么就会不可避免的发生磁盘 IO 。
备服务器 # 在备服务器上有两个线程，分别是 IO Thread 以及 SQL Thread 。
IO Thread 线程会从主服务器读取数据，然后保存到本地的日志文件 relay log，该线程当前的状态可以通过 show slave status 查看。
SQL thread 会读取本地的 relay log，然后将相应的语句写入到数据库。
延迟复制 # 当发生延迟复制 (Replication Lag) 时，通常是由于 SQL 线程延迟导致的，当然，最好是通过 show slave status 查看两个线程的状态。如果是 IO 线程导致，最好是打开压缩协议，减小网络 IO 的消耗量。</description></item><item><title>Prophet 使用简介</title><link>https://gohalo.github.io/cn/blog/prophet-usage-introduce/</link><pubDate>Sat, 20 Apr 2019 18:49:39 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/prophet-usage-introduce/</guid><description>&lt;p>Facebook 提供的 Prophet 算法主要是用来处理单变量的时间序列，对于一些异常数据以及确实的情况可以很好的处理，对于周期性的数据几乎可以全自动地预测未来的走势。&lt;/p>
&lt;p>这里简单介绍其使用方法。&lt;/p></description></item><item><title>Beringei 内存时序数据库</title><link>https://gohalo.github.io/cn/blog/beringei-memory-database-introduce/</link><pubDate>Tue, 02 Apr 2019 20:19:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/beringei-memory-database-introduce/</guid><description>&lt;p>Facebook 在 2017.02.03 开源了一个高性能内存时序数据存储引擎 Beringei ，用来解决监控数据的存储和查询需求，具有快速读写、高压缩比等特性。&lt;/p>
&lt;p>这里简单介绍。&lt;/p></description></item><item><title>MySQL 插件详解</title><link>https://gohalo.github.io/cn/blog/mysql-plugin/</link><pubDate>Tue, 12 Mar 2019 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-plugin/</guid><description>&lt;p>在 MySQL 中，为了提高其灵活性，很多的功能都是通过插件来实现的，常见的比如 semi-sync、存储引擎、登陆认证等等。因为 MySQL 是 C/C++ 实现的，对于插件来说实际为动态链接库，保存在 plugin_dir 变量对应的目录下。&lt;/p>
&lt;p>在此介绍一下 MySQL 的插件实现。&lt;/p></description></item><item><title>InnoDB Checkpoint</title><link>https://gohalo.github.io/cn/blog/mysql-innodb-checkpoint/</link><pubDate>Fri, 22 Feb 2019 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-innodb-checkpoint/</guid><description>&lt;p>如果 redo log 可以无限地增大，同时缓冲池也足够大，是不是就意味着可以不将缓冲池中的脏页刷新回磁盘上？宕机时，完全可以通过 redo log 来恢复整个数据库系统中的数据。&lt;/p>
&lt;p>显然，上述的前提条件是不满足的，这也就引入了 checkpoint 技术。&lt;/p>
&lt;p>在这篇文章里，就简单介绍下 MySQL 中的实现。&lt;/p></description></item><item><title>ProxySQL 简单介绍</title><link>https://gohalo.github.io/cn/blog/proxysql-basic-introduce/</link><pubDate>Fri, 11 Jan 2019 21:18:34 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/proxysql-basic-introduce/</guid><description>&lt;p>一个强大灵活的 MySQL 代理层，支持读写分离、Query 路由、配置动态加载、故障切换等等。&lt;/p></description></item><item><title>SQLite 优化实践</title><link>https://gohalo.github.io/cn/blog/sqlite-optimize-introduce/</link><pubDate>Tue, 09 Oct 2018 20:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/sqlite-optimize-introduce/</guid><description>&lt;p>SQLite 的写入性能与磁盘的性能有很大的关系，例如在 SATA 上可能只有 100 左右，在 SSD 上大概有 1K 左右，如果直接使用 RAMDisk 测试能达到 1W 以上。除此之外，还可以通过一些方法进行相关的优化。&lt;/p></description></item><item><title>MySQL GTID 简介</title><link>https://gohalo.github.io/cn/blog/mysql-gtid/</link><pubDate>Mon, 08 Oct 2018 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-gtid/</guid><description>&lt;p>全局事务 ID (Global Transaction ID, GTID) 是用来强化数据库在主备复制场景下，可以有效保证主备一致性、提高故障恢复、容错能力。&lt;/p>
&lt;p>接下来，看看 GTID 是如何实现的，以及如何使用。&lt;/p></description></item><item><title>SQLite 源码解析</title><link>https://gohalo.github.io/cn/blog/sqlite-sourcecode-analyze/</link><pubDate>Sat, 29 Sep 2018 20:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/sqlite-sourcecode-analyze/</guid><description>&lt;p>SQLite 嵌入到使用它的应用程序中，它们共用相同的进程空间，而不是单独的一个进程，从外部看，它并不像一个 RDBMS，但在进程内部，它却是完整的，自包含的数据库引擎。&lt;/p>
&lt;p>核心大约有 3W 行标准 C 代码，这些代码都是模块化的，很容易阅读，如下简单介绍。&lt;/p></description></item><item><title>MySQL 时间相关介绍</title><link>https://gohalo.github.io/cn/blog/mysql-basic-time/</link><pubDate>Sat, 15 Sep 2018 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-basic-time/</guid><description>&lt;p>简单介绍 MySQL 中与时间相关的概念。&lt;/p></description></item><item><title>GORM 关联操作基本概念</title><link>https://gohalo.github.io/cn/blog/golang-db-gorm-preload/</link><pubDate>Sun, 19 Aug 2018 20:19:08 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-db-gorm-preload/</guid><description>&lt;p>关于 GORM 有些与常规 ORM 不同的基本概念，理解这些概念对于使用 GROM 函数会有很大帮助，而不是简单使用 RAW SQL 实现。&lt;/p></description></item><item><title>GORM 源码解析</title><link>https://gohalo.github.io/cn/blog/golang-db-gorm-source/</link><pubDate>Sun, 19 Aug 2018 20:19:08 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-db-gorm-source/</guid><description/></item><item><title>MySQL 组复制</title><link>https://gohalo.github.io/cn/blog/mysql-group-replication/</link><pubDate>Thu, 09 Aug 2018 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-group-replication/</guid><description>&lt;p>MySQL 当前存在异步复制、半同步复制，在 5.7.17 引入了组复制模式，这是基于分布式一致性算法 (Paxos 协议的变体) 实现。&lt;/p>
&lt;p>一个组允许部分节点挂掉，只要保证多数节点仍然存活并且相互之间可以正常通讯，那么这个组仍然可以对外提供服务，是目前一种被分布式系统广泛使用的技术。&lt;/p>
&lt;p>如下，仅简单介绍如何使用。&lt;/p></description></item><item><title>MySQL 链接方式</title><link>https://gohalo.github.io/cn/blog/mysql-connection/</link><pubDate>Sun, 22 Jul 2018 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-connection/</guid><description>&lt;p>与 Oracle 或者 Postgre 不同，MySQL 采用的是线程模型，在这里介绍通过 socket 链接到服务器之后，线程与链接直接是怎么处理的。&lt;/p></description></item><item><title>MySQL 杂项</title><link>https://gohalo.github.io/cn/blog/mysql-tips/</link><pubDate>Wed, 23 May 2018 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-tips/</guid><description>&lt;p>简单记录下 MySQL 常见的一些操作。&lt;/p></description></item><item><title>MySQL 执行简介</title><link>https://gohalo.github.io/cn/blog/mysql-executor/</link><pubDate>Mon, 21 May 2018 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-executor/</guid><description>&lt;p>最后是 MySQL 的执行。&lt;/p></description></item><item><title>GoLang DB 操作简介</title><link>https://gohalo.github.io/cn/blog/golang-db-introduce/</link><pubDate>Sat, 19 May 2018 20:19:08 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-db-introduce/</guid><description>&lt;p>GoLang 提供了标准包用于对 SQL 数据库进行访问，作为操作数据库的入口对象 sql.DB, 主要为提供了两个重要的功能：A) 提供管理底层数据库连接的打开和关闭操作；B) 管理数据库连接池。&lt;/p>
&lt;p>需要注意的是，sql.DB 表示操作数据库的抽象访问接口，而非一个数据库连接对象，会根据实际的驱动打开关闭数据库连接，管理连接池。&lt;/p>
&lt;p>这里简单介绍 MySQL 的使用方式。&lt;/p></description></item><item><title>RAFT 协议简介</title><link>https://gohalo.github.io/cn/blog/raft-consensus-algorithms-introduce/</link><pubDate>Fri, 13 Apr 2018 20:19:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/raft-consensus-algorithms-introduce/</guid><description>&lt;p>Paxos 一直是分布式协议的标准，但是 Paxos 难于理解，更难以实现，例如 Google 的分布式锁系统 Chubby 在实现 Paxos 协议时就遇到很多坑。&lt;/p>
&lt;p>来自 Stanford 的新的分布式协议研究称为 RAFT，它是一个为真实世界应用建立的协议，主要注重协议的落地性和可理解性。&lt;/p></description></item><item><title>MySQL 启动脚本</title><link>https://gohalo.github.io/cn/blog/mysql-mysqld-safe/</link><pubDate>Thu, 08 Mar 2018 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-mysqld-safe/</guid><description>&lt;p>mysqld_safe 是一个 shell 脚本，通常用来启动 MySQL 服务进程，在这篇文章中，我们看下该脚本具体做了什么。&lt;/p></description></item><item><title>MySQL 高可用 MHA</title><link>https://gohalo.github.io/cn/blog/mysql-replication-mha/</link><pubDate>Sat, 20 Jan 2018 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-replication-mha/</guid><description>&lt;p>Master High Availability, MHA 在 MySQL 高可用方面是一个相对成熟的解决方案，能做到在 0~30 秒之内自动完成数据库的故障切换操作，而且能最大程度上保证数据的一致性。&lt;/p>
&lt;p>这里介绍使用配置方法，以及其原理。&lt;/p></description></item><item><title>GORM 操作简介</title><link>https://gohalo.github.io/cn/blog/golang-db-gorm-basic/</link><pubDate>Fri, 19 Jan 2018 21:09:38 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-db-gorm-basic/</guid><description>&lt;p>Object Relational Mapping, ORM 对象关系映射，用于将数据库中的数据与代码中的结构体进行映射，不同语言的实现方式略有区别，但是目的基本相同。&lt;/p>
&lt;p>GoLang 中有多种映射库，这里简单介绍常见的 GORM 使用方式。&lt;/p></description></item><item><title>ETCD 网络模块</title><link>https://gohalo.github.io/cn/blog/golang-raft-etcd-sourcode-network/</link><pubDate>Tue, 05 Dec 2017 20:19:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-raft-etcd-sourcode-network/</guid><description>&lt;p>在使用 RAFT 协议内核时，需要单独实现网络的通讯协议，也就是集群中各个结点之间的通讯，除此之外还有客户端与服务器之间的通讯。&lt;/p>
&lt;p>这里简单介绍其实现方式。&lt;/p></description></item><item><title>ETCD 一致性读</title><link>https://gohalo.github.io/cn/blog/golang-raft-etcd-sourcode-consistent-reading/</link><pubDate>Thu, 30 Nov 2017 20:19:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-raft-etcd-sourcode-consistent-reading/</guid><description>&lt;p>在分布式系统中，存在多种一致性模型，不同模型给应用提供的数据保证也不同，其代价也略有区别。一般来说，一致性越强，代价越高，同时应用也越友好。&lt;/p></description></item><item><title>ETCD 存储模块</title><link>https://gohalo.github.io/cn/blog/golang-raft-etcd-sourcode-storage/</link><pubDate>Wed, 15 Nov 2017 20:19:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-raft-etcd-sourcode-storage/</guid><description>&lt;p>如前所述，ETCD 中 RAFT 协议的只是实现了其核心的部分，而其中的存储模块需要单独实现。&lt;/p></description></item><item><title>MySQL RedoLog 简介</title><link>https://gohalo.github.io/cn/blog/mysql-innodb-redo-log/</link><pubDate>Wed, 08 Nov 2017 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-innodb-redo-log/</guid><description>&lt;p>当事务需要修改某条记录时，会先记录到 redo log，在此介绍下其实现。&lt;/p></description></item><item><title>MySQL 半同步复制</title><link>https://gohalo.github.io/cn/blog/mysql-semisync/</link><pubDate>Fri, 20 Oct 2017 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-semisync/</guid><description>&lt;p>MySQL 提供了原生的异步复制，也就是主库的数据落地之后，并不关心备库的日志是否落库，从而可能导致较多的数据丢失。&lt;/p>
&lt;p>从 MySQL5.5 开始引入了一种半同步复制功能，该功能可以确保主服务器和访问链中至少一台从服务器之间的数据一致性和冗余，从而可以减少数据的丢失。&lt;/p>
&lt;p>接下来，我们就简单介绍下 MySQL 中的半同步复制。&lt;/p></description></item><item><title>MySQL 组提交</title><link>https://gohalo.github.io/cn/blog/mysql-group-commit/</link><pubDate>Sun, 01 Oct 2017 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-group-commit/</guid><description>&lt;p>组提交 (group commit) 是为了优化写日志时的刷磁盘问题，从最初只支持 InnoDB redo log 组提交，到 5.6 官方版本同时支持 redo log 和 binlog 组提交，大大提高了 MySQL 的事务处理性能。&lt;/p>
&lt;p>下面将以 InnoDB 存储引擎为例，详细介绍组提交在各个阶段的实现原理。&lt;/p></description></item><item><title>MySQL Crash-Safe 复制</title><link>https://gohalo.github.io/cn/blog/mysql-crash-safe-replication/</link><pubDate>Mon, 18 Sep 2017 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-crash-safe-replication/</guid><description>&lt;p>简单来说，crash-safe replication 是指当主备库任何一个节点发生宕机等意外情况下，服务器重启后主备的数据依然能够保证一致性。&lt;/p>
&lt;p>接下来看看 MySQL 中是如何实现的。&lt;/p></description></item><item><title>详细介绍 MySQL Sandbox 使用</title><link>https://gohalo.github.io/cn/blog/mysql-sandbox/</link><pubDate>Sat, 22 Jul 2017 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-sandbox/</guid><description>&lt;p>MySQL Sandbox 是个用于在本地快速部署 MySQL 服务的工具，包括了不同版本，不同模式的部署，例如单节点、主备部署、一主多备等等；如果配合 &lt;a href="http://gearman.org/">Gearman&lt;/a>，甚至可以完成分布式的部署。&lt;/p>
&lt;p>该程序通常用于测试，是用 Perl 语言编写的，在此，仅简单介绍下如何使用。&lt;/p></description></item><item><title>MySQL CAPI 接口</title><link>https://gohalo.github.io/cn/blog/mysql-capi/</link><pubDate>Fri, 21 Jul 2017 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-capi/</guid><description>&lt;p>在编写 MySQL 客户端程序时，最常见的就是如何连接以及关闭 MySQL，这里需要注意，如果使用不当将会造成内存泄漏。&lt;/p>
&lt;p>这里，简单介绍 MySQL 中如何通过 C 进行编程。&lt;/p></description></item><item><title>MySQL 使用简介</title><link>https://gohalo.github.io/cn/blog/mysql-install-debug/</link><pubDate>Sun, 16 Jul 2017 19:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-install-debug/</guid><description>&lt;p>MySQL 是一款最流行的开源关系型数据库，最初由瑞典的 MySQL AB 公司开发，目前已被 Oracle 收购，现在比较流行的分支包括了 MariaDB 和 Percona。&lt;/p>
&lt;p>现在来看，MySQL 被收购之后，实际上添加了很多不错的特性，解掉了很多之前未解的问题，而现在 MariaDB 离主干的特性越来越远；而 Percona 据说为了保证质量是不接受社区提供的代码的，不过其提供的工具却是极好的^_^&lt;/p>
&lt;p>在此，简单介绍，二进制安装、源码编译安装、单实例以及多实例的启动、常见的调试方法。&lt;/p></description></item><item><title>MySQL Handler 监控</title><link>https://gohalo.github.io/cn/blog/mysql-monitor-handler/</link><pubDate>Fri, 14 Apr 2017 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-monitor-handler/</guid><description>&lt;p>在 MySQL 中有很多的 &lt;code>handler_*&lt;/code> 类型的监控，接下来我们就看看这些监控项。&lt;/p></description></item><item><title>MySQL 关闭过程</title><link>https://gohalo.github.io/cn/blog/mysql-shutdown/</link><pubDate>Wed, 01 Mar 2017 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-shutdown/</guid><description>&lt;p>简单分析下 mysqld 进程关闭的过程，并讨论如何安全地关闭 MySQL 实例。&lt;/p></description></item><item><title>MySQL 监控指标</title><link>https://gohalo.github.io/cn/blog/mysql-monitor/</link><pubDate>Tue, 11 Oct 2016 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-monitor/</guid><description>&lt;p>为了排查问题，对数据库的监控是必不可少的，在此介绍下 MySQL 中的常用监控指标。&lt;/p></description></item><item><title>InfluxDB</title><link>https://gohalo.github.io/cn/blog/influxdata-influxdb-introduce/</link><pubDate>Sun, 25 Sep 2016 20:19:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/influxdata-influxdb-introduce/</guid><description>&lt;p>InfluxDB 是一个开源分布式时序、事件和指标数据库，使用 Go 语言编写，无需外部依赖，其设计目标是实现分布式和水平伸缩扩展。&lt;/p>
&lt;p>InfluxData 提供了 TICK 一套解决方案，不过使用比较多的是 InfluxDB，在此就介绍下 InfluxDB 以及 Telegraf 。&lt;/p></description></item><item><title>时序数据库简介</title><link>https://gohalo.github.io/cn/blog/time-series-database-introduce/</link><pubDate>Mon, 12 Sep 2016 20:19:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/time-series-database-introduce/</guid><description>&lt;p>时序数据以时间作为主要的查询纬度，通常会将连续的多个时间序列数据绘制成线，可制作基于时间的多纬度报表，用揭示其趋势、规律、异常，除了实时在线预测和预警，还可以做离线的数据分析甚至是机器学习。&lt;/p></description></item><item><title>PostgreSQL C 语言编程</title><link>https://gohalo.github.io/cn/blog/postgresql-c-language-pgcenter/</link><pubDate>Sat, 20 Aug 2016 21:18:34 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/postgresql-c-language-pgcenter/</guid><description>&lt;p>对于 PostgreSQL 的 C 语言编程，可以直接使用 libpq 库，这里简单介绍其使用方法。&lt;/p></description></item><item><title>ETCD 简介</title><link>https://gohalo.github.io/cn/blog/golang-raft-etcd-introduce/</link><pubDate>Sun, 14 Aug 2016 20:19:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-raft-etcd-introduce/</guid><description>&lt;p>Etcd 是一个分布式可靠的键值存储系统，提供了与 ZooKeeper 相似的功能，通过 GoLang 开发而非 Java ，采用 RAFT 算法而非 PAXOS 算法。&lt;/p>
&lt;p>相比来所，etcd 的安装使用更加简单有效。&lt;/p></description></item><item><title>PostgreSQL 结构及权限</title><link>https://gohalo.github.io/cn/blog/postgresql-structure-privileges/</link><pubDate>Fri, 05 Aug 2016 21:18:34 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/postgresql-structure-privileges/</guid><description>&lt;p>在 PostgreSQL 中，有各种各样的概念，例如，一个实例中允许创建多个数据库，每个数据库中可以创建多个 schema，每个 schema 下面可以创建多个对象，包括了表、物化视图、操作符、索引、视图、序列、函数 &amp;hellip; &amp;hellip; 等等。&lt;/p>
&lt;p>另外，PG 中还有表空间的概念，这就导致上面的概念越来越混乱。&lt;/p>
&lt;p>本文主要是理解 PostgreSQL 的逻辑结构和权限体系，快速理解和管理数据库的权限。&lt;/p></description></item><item><title>PostgreSQL 简单介绍</title><link>https://gohalo.github.io/cn/blog/postgresql-introduce/</link><pubDate>Tue, 02 Aug 2016 21:18:34 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/postgresql-introduce/</guid><description>&lt;p>PostgreSQL 可以说是目前功能最强大、特性最丰富和结构最复杂的开源数据库管理系统，其中有些特性甚至连商业数据库都不具备。&lt;/p>
&lt;p>这里简单介绍 PG 的常见操作。&lt;/p></description></item><item><title>MySQL 中 localhost 127.0.0.1 区别</title><link>https://gohalo.github.io/cn/blog/mysql-localhost-vs-loopback/</link><pubDate>Fri, 22 Jul 2016 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-localhost-vs-loopback/</guid><description>&lt;p>最近在 MySQL 中新建了一个数据库帐号，然后配置成允许所有 IP 都可以登陆，但是当尝试从本地登陆时竟然报错 &amp;hellip; &amp;hellip; 用户名和密码都是正确的 WTF&lt;/p>
&lt;p>然后仔细研究了下，发现别有天地。&lt;/p></description></item><item><title>MySQL 用户管理</title><link>https://gohalo.github.io/cn/blog/mysql-users/</link><pubDate>Thu, 24 Mar 2016 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-users/</guid><description>&lt;p>MySQL 权限管理系统的主要功能是证实连接到一台给定主机的用户，并且赋予该用户在数据库上的相关权限，在认证的时候是通过用户名+主机名定义。&lt;/p>
&lt;p>在此，简单介绍下 MySQL 的权限管理，以及设置相应的用户管理。&lt;/p></description></item><item><title>SQLite 使用简介</title><link>https://gohalo.github.io/cn/blog/sqlite-introduce/</link><pubDate>Tue, 19 Jan 2016 20:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/sqlite-introduce/</guid><description>&lt;p>SQLite 是一个开源的嵌入式关系数据库，一个简单无需配置的小型数据库，支持事物，在嵌入式设备或者小型应用中使用较多，例如 Android、Chrome、WeChat 等系统。&lt;/p>
&lt;p>它在 2000 年由 D. Richard Hipp 发布，用来减少应用程序管理数据的开销，可移植性好、很容易使用、高效而且可靠。&lt;/p></description></item><item><title>MySQL 变量相关</title><link>https://gohalo.github.io/cn/blog/mysql-variables/</link><pubDate>Mon, 09 Nov 2015 22:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-variables/</guid><description>&lt;p>MySQL 通过变量设置来控制不同的行为，以及进行调优，从不同的角度看，定义方式各不相同，例如，如根据能否修改，可以分为动态和静态参数两种，动态参数可以修改，而静态参数是只读。&lt;/p>
&lt;p>在本文中简单介绍下 MySQL 中相关变量的设置，以及源码的实现。&lt;/p></description></item><item><title>InnoDB 隔离级别使用实例</title><link>https://gohalo.github.io/cn/blog/mysql-innodb-isolation-level/</link><pubDate>Sun, 01 Nov 2015 19:58:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-innodb-isolation-level/</guid><description>&lt;p>数据库的事务存在着 ACID 四个属性，而在实际应用场景中，当面临着性能需求时，隔离性往往成为最容易妥协的一个，其实际上就是指数据库在并发事务下的表现。&lt;/p>
&lt;p>在本文章中，详细介绍下 InnoDB 中关于隔离级别的实现。&lt;/p></description></item><item><title>MySQL 备份工具</title><link>https://gohalo.github.io/cn/blog/mysql-backup-tools/</link><pubDate>Tue, 25 Aug 2015 21:18:34 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-backup-tools/</guid><description>&lt;p>为了保证数据安全，都会对硬件做高可用，防止出现单点故障，但是无论如何都无法取代备份，尤其对于数据库中所保存的数据而言。&lt;/p>
&lt;p>在此，介绍一下 MySQL 中常用的备份方法。&lt;/p></description></item><item><title>MySQL 常用资源</title><link>https://gohalo.github.io/cn/blog/mysql-some-reference/</link><pubDate>Thu, 30 Jul 2015 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-some-reference/</guid><description>&lt;p>保存一下经常使用的经典 MySQL 资源。&lt;/p></description></item><item><title>MySQL 代码导读</title><link>https://gohalo.github.io/cn/blog/mysql-skeleton/</link><pubDate>Sat, 02 May 2015 21:18:34 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-skeleton/</guid><description>&lt;p>在 MySQL 的官网上，MySQL 号称是 The World&amp;rsquo;s Most Popular Open Source Database ，既然是开源的，据说又这么牛掰，那不看看源码真有点对不起 MySQL 了。&lt;/p>
&lt;p>不禁想起了 PostgreSQL 号称是 The World&amp;rsquo;s Most Advanced Open Source Database ^_^''&lt;/p>
&lt;p>废话少说，本文简单介绍一下 MySQL 的执行流程。&lt;/p></description></item><item><title>MySQL 安全设置</title><link>https://gohalo.github.io/cn/blog/mysql-security/</link><pubDate>Thu, 30 Apr 2015 22:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-security/</guid><description>&lt;p>很多时候在部署一种产品时，安全性往往是最后考虑的，不过这也带来了很大的风险。&lt;/p></description></item><item><title>MySQL 示例数据库</title><link>https://gohalo.github.io/cn/blog/mysql-sample-database/</link><pubDate>Sun, 12 Apr 2015 18:28:19 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-sample-database/</guid><description>&lt;p>一些简单的数据库示例，可以用于简单演示、测试使用。&lt;/p></description></item><item><title>MySQL 主备数据校验</title><link>https://gohalo.github.io/cn/blog/mysql-replication-pt-table-checksum/</link><pubDate>Tue, 20 Jan 2015 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-replication-pt-table-checksum/</guid><description>&lt;p>由于各种原因，MySQL 主从架构可能会出现数据不一致的情况出现，为此需要对主备复制的数据进行校验。&lt;/p>
&lt;p>在此，简单介绍 Percona-Toolkits 提供的数据校验方式。&lt;/p></description></item><item><title>【专题】数据库之 RocksDB</title><link>https://gohalo.github.io/cn/blog/topic-database-rocksdb/</link><pubDate>Tue, 21 Dec 2010 21:18:34 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-database-rocksdb/</guid><description/></item><item><title>【专题】PostgreSQL 关系型数据库</title><link>https://gohalo.github.io/cn/blog/topic-database-postgresql/</link><pubDate>Fri, 12 Nov 2010 20:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-database-postgresql/</guid><description/></item><item><title>【专题】数据库之 SQLite</title><link>https://gohalo.github.io/cn/blog/topic-database-sqlite/</link><pubDate>Wed, 25 Aug 2010 21:18:34 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-database-sqlite/</guid><description/></item><item><title>【专题】数据库之时序数据库</title><link>https://gohalo.github.io/cn/blog/topic-database-time-series/</link><pubDate>Wed, 25 Aug 2010 21:18:34 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-database-time-series/</guid><description/></item><item><title>【专题】数据库之 ETCD</title><link>https://gohalo.github.io/cn/blog/topic-database-etcd/</link><pubDate>Sat, 21 Aug 2010 21:18:34 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-database-etcd/</guid><description> PAXOS 算法从 90 年提出到现在已经有二十几年了，不过其流程过于复杂，目前较多的有 Chubby、libpaxos ，以及 Zookeeper 修改后的 Zookeeper Atomic Broadcase, ZAB 。
RAFT 是斯坦福的 Diego Ongaro、John Ousterhout 两人设计的一致性算法，在 2013 年发布了论文 《In Search of an Understandable Consensus Algorithm》，目前已经有近十多种语言的实现，其中使用较多的是 ETCD 。
RAFT 一个为真实世界应用建立的协议，注重落地性和可理解性。 基本介绍 主要介绍 ETCD 如何使用，包括安装、部署、使用以及常见的介绍。 示例源码 源码中关于如何 RAFT 协议的示例代码，直接使用的是内存数据库。 源码解析 除了上述的示例代码，这里简单介绍其代码的实现。 网络模块 包括了集群节点内部网络通讯，除此之外还有客户端与服务器之间的通讯。 存储模块 核心的 RAFT 协议已经实现，不过存储模块需要单独实现，提供了 BoltDB 作为存储。 一致性读 一致性越强，代价越高，同时应用也越友好。</description></item><item><title>【专题】MySQL 数据库</title><link>https://gohalo.github.io/cn/blog/topic-database-mysql/</link><pubDate>Thu, 22 Jul 2010 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-database-mysql/</guid><description>&lt;p>MySQL 是一款最流行的开源关系型数据库，最初由瑞典的 MySQL AB 公司开发，目前已被 Oracle 收购，虽然如此，但是仍然在不断的向前发展。&lt;/p>
&lt;p>这里详细介绍概念。&lt;/p></description></item></channel></rss>