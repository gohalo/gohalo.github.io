<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>database on</title><link>https://gohalo.github.io/cn/tags/database/</link><description>Recent content in database on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 18 Nov 2020 20:01:39 +0800</lastBuildDate><atom:link href="https://gohalo.github.io/cn/tags/database/index.xml" rel="self" type="application/rss+xml"/><item><title>DBDeployer 常用命令速查表</title><link>https://gohalo.github.io/cn/blog/mysql-tools-dbdeployer-cheatsheet/</link><pubDate>Wed, 18 Nov 2020 20:01:39 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-tools-dbdeployer-cheatsheet/</guid><description>&lt;p>DBDeployer 是一款十分强大的数据库测试环境部署工具，可实现一键部署不同架构、不同版本的数据库环境，之前已经详细介绍过其使用方法。&lt;/p>
&lt;p>这里将一些常用的命令整理下，已方便查询。&lt;/p></description></item><item><title>详细介绍 DBDeployer 部署工具使用</title><link>https://gohalo.github.io/cn/blog/mysql-tools-dbdeployer-usage/</link><pubDate>Wed, 18 Nov 2020 20:01:39 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-tools-dbdeployer-usage/</guid><description>&lt;p>通过 DBDeployer 可以在本地快速搭建一个强大的测试环境，包括了不同版本、不同架构的数据库环境，例如 MySQL 主从复制、GTID 模式复制、MySQL 组复制等等。&lt;/p>
&lt;p>支持几乎当前所有版本的 MySQL 发行版本，除了官方的，还有 Percona MySQL、MariaDB、MySQL NDB Cluster、Percona XtraDB Cluster 等等，还有 MySQL-Shell 的安装，甚至还有 TiDB ，估计是 TiDB 团队贡献的代码吧。&lt;/p>
&lt;p>这里会详细介绍其使用方法。&lt;/p></description></item><item><title>【专题】MySQL 数据库</title><link>https://gohalo.github.io/cn/blog/topic-database-mysql/</link><pubDate>Thu, 16 Jul 2020 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-database-mysql/</guid><description>&lt;p>MySQL 是一款最流行的开源关系型数据库，最初由瑞典的 MySQL AB 公司开发，目前已被 Oracle 收购，虽然如此，但是仍然在不断的向前发展。&lt;/p>
&lt;p>这里详细介绍概念。&lt;/p></description></item><item><title>GORM 操作简介</title><link>https://gohalo.github.io/cn/blog/golang-db-gorm-basic/</link><pubDate>Tue, 21 Aug 2018 21:09:38 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-db-gorm-basic/</guid><description>&lt;p>Object Relational Mapping, ORM 对象关系映射，用于将数据库中的数据与代码中的结构体进行映射，不同语言的实现方式略有区别，但是目的基本相同。&lt;/p>
&lt;p>GoLang 中有多种映射库，这里简单介绍常见的 GORM 使用方式。&lt;/p></description></item><item><title>GoLang DB 操作简介</title><link>https://gohalo.github.io/cn/blog/golang-db-introduce/</link><pubDate>Sun, 19 Aug 2018 20:19:08 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-db-introduce/</guid><description>&lt;p>GoLang 提供了标准包用于对 SQL 数据库进行访问，作为操作数据库的入口对象 sql.DB, 主要为提供了两个重要的功能：A) 提供管理底层数据库连接的打开和关闭操作；B) 管理数据库连接池。&lt;/p>
&lt;p>需要注意的是，sql.DB 表示操作数据库的抽象访问接口，而非一个数据库连接对象，会根据实际的驱动打开关闭数据库连接，管理连接池。&lt;/p>
&lt;p>这里简单介绍 MySQL 的使用方式。&lt;/p></description></item><item><title>GoLang 模板使用简介</title><link>https://gohalo.github.io/cn/blog/golang-template-introduce/</link><pubDate>Sun, 19 Aug 2018 20:19:08 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-template-introduce/</guid><description>&lt;p>在前后端分离的时代，模板语言使用的已经很少了，不过很多特定的场景还是很有用的，这里介绍其基本使用方法。&lt;/p></description></item><item><title>InnoDB 隔离级别使用实例</title><link>https://gohalo.github.io/cn/blog/mysql-innodb-isolation-level/</link><pubDate>Sun, 01 Nov 2015 19:58:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-innodb-isolation-level/</guid><description>&lt;p>数据库的事务存在着 ACID 四个属性，而在实际应用场景中，当面临着性能需求时，隔离性往往成为最容易妥协的一个，其实际上就是指数据库在并发事务下的表现。&lt;/p>
&lt;p>在本文章中，详细介绍下 InnoDB 中关于隔离级别的实现。&lt;/p></description></item><item><title>MySQL 示例数据库</title><link>https://gohalo.github.io/cn/blog/mysql-sample-database/</link><pubDate>Sun, 12 Apr 2015 18:28:19 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-sample-database/</guid><description>&lt;p>一些简单的数据库示例，可以用于简单演示、测试使用。&lt;/p></description></item></channel></rss>