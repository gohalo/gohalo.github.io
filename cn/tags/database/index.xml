<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>database on</title><link>https://gohalo.github.io/cn/tags/database/</link><description>Recent content in database on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 21 Aug 2018 21:09:38 +0800</lastBuildDate><atom:link href="https://gohalo.github.io/cn/tags/database/index.xml" rel="self" type="application/rss+xml"/><item><title>GORM 操作简介</title><link>https://gohalo.github.io/cn/blog/golang-db-gorm-basic/</link><pubDate>Tue, 21 Aug 2018 21:09:38 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-db-gorm-basic/</guid><description>&lt;p>Object Relational Mapping, ORM 对象关系映射，用于将数据库中的数据与代码中的结构体进行映射，不同语言的实现方式略有区别，但是目的基本相同。&lt;/p>
&lt;p>GoLang 中有多种映射库，这里简单介绍常见的 GORM 使用方式。&lt;/p></description></item><item><title>GoLang DB 操作简介</title><link>https://gohalo.github.io/cn/blog/golang-db-introduce/</link><pubDate>Sun, 19 Aug 2018 20:19:08 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-db-introduce/</guid><description>&lt;p>GoLang 提供了标准包用于对 SQL 数据库进行访问，作为操作数据库的入口对象 sql.DB, 主要为提供了两个重要的功能：A) 提供管理底层数据库连接的打开和关闭操作；B) 管理数据库连接池。&lt;/p>
&lt;p>需要注意的是，sql.DB 表示操作数据库的抽象访问接口，而非一个数据库连接对象，会根据实际的驱动打开关闭数据库连接，管理连接池。&lt;/p>
&lt;p>这里简单介绍 MySQL 的使用方式。&lt;/p></description></item><item><title>GoLang 模板使用简介</title><link>https://gohalo.github.io/cn/blog/golang-template-introduce/</link><pubDate>Sun, 19 Aug 2018 20:19:08 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-template-introduce/</guid><description>&lt;p>在前后端分离的时代，模板语言使用的已经很少了，不过很多特定的场景还是很有用的，这里介绍其基本使用方法。&lt;/p></description></item></channel></rss>