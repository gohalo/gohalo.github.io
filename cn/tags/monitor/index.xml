<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>monitor on</title><link>https://gohalo.github.io/cn/tags/monitor/</link><description>Recent content in monitor on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 29 May 2020 20:19:30 +0800</lastBuildDate><atom:link href="https://gohalo.github.io/cn/tags/monitor/index.xml" rel="self" type="application/rss+xml"/><item><title>如何在 Linux 中查看 CPU 信息</title><link>https://gohalo.github.io/cn/blog/check-cpu-info-on-linux/</link><pubDate>Fri, 29 May 2020 20:19:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/check-cpu-info-on-linux/</guid><description>&lt;p>现在 CPU 一般是多核，甚至包括了现在的手机，而每个核又包含了缓存，那么，在 Linux 上如何通过命令查看当前 CPU 的信息呢？例如，常见的型号、时钟频率、核数等等，在这篇文章里会详细介绍。&lt;/p></description></item><item><title>Prometheus 监控系统</title><link>https://gohalo.github.io/cn/blog/monitor-system-prometheus-introduce/</link><pubDate>Sat, 01 Jun 2019 18:49:39 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/monitor-system-prometheus-introduce/</guid><description>&lt;p>一套开源的时序数据存储方案，同时包含了前端的页面展示。&lt;/p></description></item><item><title>Linux 进程监控</title><link>https://gohalo.github.io/cn/blog/linux-monitor-process-introduce/</link><pubDate>Wed, 09 May 2018 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-monitor-process-introduce/</guid><description/></item><item><title>Zabbix 监控系统</title><link>https://gohalo.github.io/cn/blog/zabbix-monitor-introduce/</link><pubDate>Sun, 10 Sep 2017 18:49:39 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/zabbix-monitor-introduce/</guid><description>&lt;p>Zabbix 能监视各种网络、系统参数，保证服务器系统的安全运行，同时提供了灵活的 API 接口，例如通知机制，可以让系统管理员及时通过或者当前的异常状态，支持 Agentd、SNMP、JMX 等多种监控方式。&lt;/p>
&lt;p>同时，提供了一个 WEB 界面，可以作为分布式系统监控以及网络监控的企业级开源解决方案。&lt;/p></description></item><item><title>Linux CGroup 监控</title><link>https://gohalo.github.io/cn/blog/linux-monitor-cgroup-introduce/</link><pubDate>Sun, 23 Jul 2017 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-monitor-cgroup-introduce/</guid><description/></item><item><title>Linux ptrace 简介</title><link>https://gohalo.github.io/cn/blog/linux-ptrace-api-introduce/</link><pubDate>Thu, 15 Jun 2017 20:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-ptrace-api-introduce/</guid><description>&lt;p>&lt;code>ptrace()&lt;/code> 是一个由 Linux 内核提供的系统调用，允许一个用户态进程检查、修改另一个进程的内存和寄存器，通常用在类似 gdb、strace 的调试器中，用来实现断点调试、系统调用的跟踪。&lt;/p>
&lt;p>你想过怎么实现对系统调用的拦截吗？你尝试过通过改变系统调用的参数来愚弄你的系统 kernel 吗？你想过调试器是如何使运行中的进程暂停并且控制它吗？&lt;/p>
&lt;p>这里简单介绍如何使用该接口。&lt;/p></description></item><item><title>MySQL Handler 监控</title><link>https://gohalo.github.io/cn/blog/mysql-monitor-handler/</link><pubDate>Fri, 14 Apr 2017 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-monitor-handler/</guid><description>&lt;p>在 MySQL 中有很多的 &lt;code>handler_*&lt;/code> 类型的监控，接下来我们就看看这些监控项。&lt;/p></description></item><item><title>CPU 物理架构</title><link>https://gohalo.github.io/cn/blog/linux-cpu-physical-arch-introduce/</link><pubDate>Wed, 01 Mar 2017 20:19:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-cpu-physical-arch-introduce/</guid><description/></item><item><title>StatsD 监控简介</title><link>https://gohalo.github.io/cn/blog/statsd-monitor-introduce/</link><pubDate>Fri, 03 Feb 2017 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/statsd-monitor-introduce/</guid><description>&lt;p>StatsD 的使用非常简单，其中 Etsy 改写后使用的是 Node.js 编写的，所以需要先安装好 node 环境，然后修改配置文件，直接启动即可。&lt;/p>
&lt;p>当然，也可以将其理解为一个协议，也就对应了多种语言的实现。&lt;/p>
&lt;p>这里简单介绍与之相关的概念。&lt;/p></description></item><item><title>Sysbench 压测工具</title><link>https://gohalo.github.io/cn/blog/linux-benchmark-tools-sysbench/</link><pubDate>Fri, 20 Jan 2017 18:49:39 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-benchmark-tools-sysbench/</guid><description>&lt;p>Linux 中有很多压测工具，不同的场景会各有优劣，例如磁盘压测工具 fio 。&lt;/p>
&lt;p>Sysbench 算是一个比较通用的压测或者基准测试工具，这是一个开源、模块化、跨平台的多线程性能测试工具，可以用来进行 CPU、内存、IO、线程、数据库的性能测试，其中数据库支持 MySQL、Oracle 和 PostgreSQL 。&lt;/p>
&lt;p>这里简单介绍其使用方法。&lt;/p></description></item><item><title>Conky 配置简介</title><link>https://gohalo.github.io/cn/blog/linux-conky-introduce/</link><pubDate>Thu, 17 Nov 2016 18:49:39 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-conky-introduce/</guid><description>&lt;p>Conky 是一个轻量级的桌面系统监控工具，支持多种监控项，而且支持 Python、Lua 脚本。&lt;/p></description></item><item><title>MySQL 监控指标</title><link>https://gohalo.github.io/cn/blog/mysql-monitor/</link><pubDate>Tue, 11 Oct 2016 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-monitor/</guid><description>&lt;p>为了排查问题，对数据库的监控是必不可少的，在此介绍下 MySQL 中的常用监控指标。&lt;/p></description></item><item><title>Systemtap</title><link>https://gohalo.github.io/cn/blog/linux-systemtap/</link><pubDate>Thu, 15 Sep 2016 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-systemtap/</guid><description>&lt;p>Systemtap 几乎是目前所知的最强大的内核调试工具，甚至有人说它无所不能，接下来，我们就看看 SystemTAP 。&lt;/p></description></item><item><title>Collectd 源码解析</title><link>https://gohalo.github.io/cn/blog/collectd-sourcecode/</link><pubDate>Fri, 26 Aug 2016 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/collectd-sourcecode/</guid><description>&lt;p>接下来介绍下 Collectd 中源码的实现。&lt;/p></description></item><item><title>Collectd 简介</title><link>https://gohalo.github.io/cn/blog/collectd-introduce/</link><pubDate>Tue, 16 Aug 2016 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/collectd-introduce/</guid><description>&lt;p>collectd 是一个后台监控程序，用来采集其所运行系统上的系统信息，并提供各种存储方式来存储为不同值的格式，例如 RRD 文件形式、文本格式、MongoDB 等等。&lt;/p>
&lt;p>在此，简单介绍下 collectd 。&lt;/p></description></item><item><title>Linux 内存监控</title><link>https://gohalo.github.io/cn/blog/linux-monitor-memory-introduce/</link><pubDate>Mon, 12 Oct 2015 18:49:39 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-monitor-memory-introduce/</guid><description/></item><item><title>dstat 使用及其原理</title><link>https://gohalo.github.io/cn/blog/dstat-introduce/</link><pubDate>Tue, 27 May 2014 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/dstat-introduce/</guid><description>&lt;p>dstat 是一个不错的系统监控程序，类似于 vmstat、iostat、mpstat，所不同的是，可以监控多个系统指标，如 CPU、网络、内存、中断等，可以将结果显示到终端，也可保存到文件。&lt;/p>
&lt;p>另外，该程序是通过 Python 实现的，可以动态指定插件，甚至编写自己的插件。&lt;/p>
&lt;p>在本文中，大致介绍其使用方法，以及实现的原理。&lt;/p></description></item><item><title>Linux 监控之 IO</title><link>https://gohalo.github.io/cn/blog/linux-monitor-io-introduce/</link><pubDate>Sat, 03 May 2014 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-monitor-io-introduce/</guid><description>&lt;p>简单介绍下 Linux 中与 IO 相关的内容。&lt;/p></description></item><item><title>Linux Netlink 简介</title><link>https://gohalo.github.io/cn/blog/linux-communication-netlink/</link><pubDate>Wed, 19 Feb 2014 20:19:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-communication-netlink/</guid><description>&lt;p>Netlink 机制是在 Linux 中作为内核态与用户态的一种通讯机制，它是基于 socket 的！！！怎么样，没有想到，除了 TCP/IP 协议外，这样也可以 ^_^&lt;/p>
&lt;p>另外的一个特性是，面向数据报文的无连接消息子系统，有点类似于 UDP 协议。&lt;/p></description></item><item><title>Linux 中断</title><link>https://gohalo.github.io/cn/blog/kernel-interrupts/</link><pubDate>Wed, 19 Feb 2014 20:19:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/kernel-interrupts/</guid><description>&lt;p>中断在很大程度上解放了 CPU，提高了 CPU 的执行效率，弥补了 CPU 与外设运行速度之间的差距。&lt;/p></description></item><item><title>Linux 网络常见监控项以及报错</title><link>https://gohalo.github.io/cn/blog/linux-monitor-network/</link><pubDate>Mon, 03 Feb 2014 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-monitor-network/</guid><description>&lt;p>本来是想将报错和监控拆开的，但是发现两者几乎是耦合的，通过监控项才能发现错误，定为错误的原因时也要依赖监控项，索性就将两者合并到了一起。&lt;/p>
&lt;p>对于很多的报错，实际上你即使看到报错的信息也不清楚到底是那里报错了，或者模棱两可，甚至是误导。最好的方式是 &amp;ldquo;Show me the code&amp;rdquo; 。&lt;/p>
&lt;p>在此，简单介绍一下与网络相关的调试、查看方法，当然也包括了报错相关的内容。&lt;/p></description></item><item><title>Linux 常用监控工具</title><link>https://gohalo.github.io/cn/blog/linux-monitor-misc/</link><pubDate>Sun, 12 May 2013 20:19:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-monitor-misc/</guid><description>在此简单列举一些常见的监控工具，以及配置方式等。
SAR # sar (select activity information) 用于采集系统的信息，默认会保存一个月的信息，在 CentOS 中包含在 sysstat软件包中。与此相关的还有：
sac, system ativity data collector。也就是 sar 的后端，用于收集信息； sa1，用于将信息保存为二进制信息，默认位置为 /var/log/sa/saXX (其中XX表示当月的日期)； sar2，显示每天的统计信息，是 一个 shell 脚本； sadf，用于转换为其它的格式 (如csv，xml) 的程序。 sar1 和 sar2 会在 cron 任务中调用，配置在 /etc/cron.d/sysstat 文件中，默认每 10 分钟调用 sa1 采集一次数据；在 23:53 时通过 sa2 转换一次数据，默认保存 28 天，可以在 /usr/lib64/sa/sa2 中设置。
其中 /etc/cron.d/sysstat 文件内容如下。
# Run system activity accounting tool every 10 minutes */10 * * * * root /usr/lib64/sa/sa1 1 1 # Generate a daily summary of process accounting at 23:53 53 23 * * * root /usr/lib64/sa/sa2 -A 因为使用的是 crontab ，所以最小的粒度是 1min；当然，也可以使用 sa1 1 60 每秒执行依次，并执行 60 次，进一步减小监控的粒度。</description></item><item><title>【专题】Linux 监控调优</title><link>https://gohalo.github.io/cn/blog/topic-linux-monitor/</link><pubDate>Wed, 21 Apr 2010 20:19:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-linux-monitor/</guid><description>系统监控 # 记录与监控相关的内容。
网络监控 包含一些异常的处理，例如丢包、内存不足等。 进程监控 与进程相关的一些监控指标。 内存监控 主要介绍 proc 文件系统的统计。 IO 监控 包括常见的 IO 监控工具，同时也包含测试相关的内容。 CGroup 监控 通过 proc 文件系统可以查看某个 cgroup 组的性能指标。 监控工具 简单列举一些常见的监控工具 (sar top ps)、配置方式以及多线程相关等。 CPU 物理结构 简单介绍 CPU 物理结构，以及 如何在 Linux 中查看 CPU 信息 。 Network # 网络配置 常见的如主机名、网卡、路由等的配置。 状态查看 主要是网络状态查看，例如正在监听的端口信息。 其它 # tcprstat 可以用来统计服务端的数据处理时间，包括了最大最小值等统计信息。 collectd 一个 C 语言编写的多线程监控采集程序，同时可以参考 源码解析 。 dstat 一个使用 Python 编写的跨平台监控工具，包含系统监控，还可以通过插件扩展。 sysbench 不错的压测工具，通常用于数据库，不过也有系统性能压测。 prometheus 当前最常用的监控系统，包含了存储，还有 Grafana 展示等。 statsd 十分简单的监控协议，默认通过 JavaScript 实现，不过当前有很多其它语言实现。 netlink 类似于 TCP/IP 的内核通讯机制，用于在内核态和用户态之间传递数据。 zabbix 历史悠久、成熟的开源监控系统，提供了灵活的 API 接口。 系统配置 常见的相关配置，例如 swap、sysctl 等。 性能调优 # 可以使用 CPU 性能计数器、tracepoints、kprobes、uprobes 对程序的各个指标进行统计。</description></item></channel></rss>