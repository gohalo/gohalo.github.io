<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cheatsheet on</title><link>https://gohalo.github.io/cn/tags/cheatsheet/</link><description>Recent content in cheatsheet on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 28 Mar 2023 21:33:42 +0800</lastBuildDate><atom:link href="https://gohalo.github.io/cn/tags/cheatsheet/index.xml" rel="self" type="application/rss+xml"/><item><title>K8S Controller 常用命令</title><link>https://gohalo.github.io/cn/blog/kubernets-crd-controller-details/</link><pubDate>Tue, 28 Mar 2023 21:33:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/kubernets-crd-controller-details/</guid><description>简介 # 在构建自定义的 Operator 时会涉及到如下几种组件：
client-go 底层用于与 K8S API 进行交互，支持资源的 CRUD 操作，包含了 ClientSet、DynamicClient、RESTClient 三种。 controller-runtime 封装了控制器的处理框架，底层会调用 client-go 库。 kubebuilder 可以很方便渲染出 Controller 整个框架，该框架使用的就是 controller-runtime 模块。 operator-sdk 同样基于 controller-runtime 实现，而且同时使用了 kubebuilder 来构建 Go 项目。 简单来说，当前 Controller 的编写包含了 OperatorSDK、Kubebuilder、ClientGo 三种方式，前两者提供了更加实用的封装，而 ClientGo 相对来说要简单很多，这里简单介绍 Kubebuilder 的使用方式。
Kubebuilder # Kubebuilder 由 K8S Special Interest Group, SIG API Machinery 拥有和维护，用于帮助开发者创建 CRD 并生成 Controller 脚手架，包含了如下的组件：
Client 封装了对资源的操作，修改会直接访问 APIServer ，而查询则会访问本地 Cache 信息。 Cache 负责生成 SharedInformer，会监听 GVK 下的 GVR 变化，然后触发 Controller 的 Reconcile 逻辑。 Manager 管理协调多个 Controller，提供共有依赖以及基础服务(例如保活)，负责初始化 Controller、Cache、Client 的工作。 Finzlizers 用于处理资源的预删除逻辑，保障资源被删除后能够从 Cache 中读取到，清理相关的其它资源。 Builder 构造器，提供了一系列配置接口，可以通过链式条用进行组装，最终为 Reconciler 生成相应的 Controller 对象。 示例 # 可以直接从 GitHub Release 上下载对应的二进制文件。</description></item><item><title>K8S 常用命令</title><link>https://gohalo.github.io/cn/blog/kubernets-commands-usage/</link><pubDate>Fri, 22 Oct 2021 19:43:02 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/kubernets-commands-usage/</guid><description>&lt;p>整理下 K8S 的常用命令，以供参考。&lt;/p></description></item></channel></rss>