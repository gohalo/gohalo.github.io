<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker on</title><link>https://gohalo.github.io/cn/tags/docker/</link><description>Recent content in docker on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 20 Sep 2021 23:10:15 +0800</lastBuildDate><atom:link href="https://gohalo.github.io/cn/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker 使用简介</title><link>https://gohalo.github.io/cn/blog/docker-basic-introduce/</link><pubDate>Mon, 20 Sep 2021 23:10:15 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/docker-basic-introduce/</guid><description>&lt;p>从 Docker 1.11 开始，Docker 容器运行已经不是简单的通过 Docker Daemon 启动，而是集成了 containerd、runC 等多个组件，在 Docker 服务启动之后，可以看到系统上启动了 dockerd、containerd 等进程。&lt;/p>
&lt;p>这里简单介绍一些与 Docker 相关的基本概念。&lt;/p></description></item><item><title>Docker 镜像分析工具 Dive 简介</title><link>https://gohalo.github.io/cn/blog/docker-image-layers-analyze/</link><pubDate>Wed, 21 Jul 2021 22:18:19 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/docker-image-layers-analyze/</guid><description>&lt;p>Docker 的容器镜像是一层层叠加的，可以通过 &lt;code>docker inspect&lt;/code> 命令查看镜像中的 meta 信息，或者通过 &lt;code>docker history&lt;/code> 了解镜像的构建历史，不过相对来说不够清晰。&lt;/p>
&lt;p>这里介绍一个很好用的工具 Dive 。&lt;/p></description></item><item><title>Docker 示例 Alpine + OpenSSH</title><link>https://gohalo.github.io/cn/blog/docker-example-sshd/</link><pubDate>Mon, 07 Sep 2020 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/docker-example-sshd/</guid><description>&lt;p>SSH 是最常见的远程连接协议，这里通过 Alpine 和 OpenSSH 搭建一个示例。&lt;/p></description></item><item><title>Dockerfile 简介</title><link>https://gohalo.github.io/cn/blog/docker-dockerfile/</link><pubDate>Thu, 11 Jul 2019 21:48:10 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/docker-dockerfile/</guid><description>&lt;p>Dockerfile 可以用来创建一个镜像，允许在该文件中调用一些命令行中的命令，这样可以利用一个基础镜像，然后附加一些基础操作，最后直接自动生成新镜像。&lt;/p></description></item><item><title>Docker RunC 简介</title><link>https://gohalo.github.io/cn/blog/docker-component-runc-introduce/</link><pubDate>Mon, 08 Apr 2019 22:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/docker-component-runc-introduce/</guid><description>&lt;p>OCI 定义了容器运行时标准，runC 是 Docker 按照开放容器格式标准 Open Container Format, OCF 制定的一种具体实现。&lt;/p>
&lt;p>该项目从 Docker 的 libcontainer 中迁移来，实现了容器启停、资源隔离等功能，所以，可以直接通过该工具运行容器。&lt;/p></description></item><item><title>容器之 CGroup</title><link>https://gohalo.github.io/cn/blog/linux-container-cgroup-introduce/</link><pubDate>Fri, 21 Sep 2018 20:19:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-container-cgroup-introduce/</guid><description>&lt;p>CGroup 是 Control Groups 的缩写，是 Linux 内核提供的一种可以限制进程组使用资源的机制，该项目最早是由 Google 的工程师 (主要时 Paul Menage 和 Rohit Seth) 在 2006 年发起，开始被称为进程容器 (Process Containers)。&lt;/p>
&lt;p>在 2007 年，因为 Linux 内核中容器这一名词太过广泛，为避免混乱，重命名为 cgroup ，并且合并到 2.6.24 版本的内核中。&lt;/p>
&lt;p>随着其功能逐渐完善，开始作为 LXC、容器等资源隔离机制的基础，这里详细介绍其使用机制。&lt;/p></description></item><item><title>Docker Volume 简介</title><link>https://gohalo.github.io/cn/blog/docker-concept-volume-introduce/</link><pubDate>Wed, 02 Aug 2017 21:16:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/docker-concept-volume-introduce/</guid><description>&lt;p>所谓的 Docker 数据持久化，也就是数据不会随着容器的结束而删除，对于像数据库这类的应用，为了能够使数据持久化，提供了 Volume 的概念，简单来说，就是可以绕过默认的联合文件系统，将文件或者目录保存在宿主机上。&lt;/p>
&lt;p>通常有两种：A) Bind Mount 保存在主机上的某个目录；B) Volume 通过 Docker 自己管理的 Volume 。&lt;/p></description></item></channel></rss>