<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>container on</title><link>https://gohalo.github.io/cn/tags/container/</link><description>Recent content in container on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 22 Oct 2021 19:43:02 +0800</lastBuildDate><atom:link href="https://gohalo.github.io/cn/tags/container/index.xml" rel="self" type="application/rss+xml"/><item><title>K8S 常用命令</title><link>https://gohalo.github.io/cn/blog/kubernets-commands-usage/</link><pubDate>Fri, 22 Oct 2021 19:43:02 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/kubernets-commands-usage/</guid><description>&lt;p>整理下 K8S 的常用命令，以供参考。&lt;/p></description></item><item><title>Docker 使用简介</title><link>https://gohalo.github.io/cn/blog/docker-basic-introduce/</link><pubDate>Mon, 20 Sep 2021 23:10:15 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/docker-basic-introduce/</guid><description>&lt;p>从 Docker 1.11 开始，Docker 容器运行已经不是简单的通过 Docker Daemon 启动，而是集成了 containerd、runC 等多个组件，在 Docker 服务启动之后，可以看到系统上启动了 dockerd、containerd 等进程。&lt;/p>
&lt;p>这里简单介绍一些与 Docker 相关的基本概念。&lt;/p></description></item><item><title>K8S 简单安装部署服务</title><link>https://gohalo.github.io/cn/blog/kubernets-simple-install/</link><pubDate>Sun, 01 Aug 2021 21:15:32 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/kubernets-simple-install/</guid><description>&lt;p>现在很多的 K8S 部署是通过容器安装的，这里介绍如何在物理机上独立部署，这也是最简单的方式。&lt;/p></description></item><item><title>Kubernets 网络示例</title><link>https://gohalo.github.io/cn/blog/kubernets-examples-nginx/</link><pubDate>Fri, 19 Mar 2021 21:19:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/kubernets-examples-nginx/</guid><description>&lt;p>这里以 Nginx 为例，介绍几种常见的网络模型。&lt;/p></description></item><item><title>YAML 配置格式</title><link>https://gohalo.github.io/cn/blog/yaml-format-standard/</link><pubDate>Wed, 10 Mar 2021 23:15:52 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/yaml-format-standard/</guid><description>&lt;p>YAML 是一种可读性高的数据标记语言，通常用于配置文件，可存放一些复杂的数据类型，例如列表、字典等。&lt;/p></description></item><item><title>Kubernetes 基本介绍</title><link>https://gohalo.github.io/cn/blog/kubernets-basic-introduce/</link><pubDate>Thu, 10 Dec 2020 21:50:32 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/kubernets-basic-introduce/</guid><description/></item><item><title>Docker 示例 Alpine + OpenSSH</title><link>https://gohalo.github.io/cn/blog/docker-example-sshd/</link><pubDate>Thu, 16 Jul 2020 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/docker-example-sshd/</guid><description>&lt;p>SSH 是最常见的远程连接协议，这里通过 Alpine 和 OpenSSH 搭建一个示例。&lt;/p></description></item><item><title>K8S 制作离线镜像</title><link>https://gohalo.github.io/cn/blog/kubernets-create-offline-images/</link><pubDate>Thu, 16 Jul 2020 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/kubernets-create-offline-images/</guid><description>&lt;p>大部分的镜像制作都是通过 Dockerfile 来实现的，基本都是基于基础镜像制作，这里介绍使用 &lt;code>buildah&lt;/code> 来构建基础镜像，可以以此理解其基本原理。&lt;/p></description></item><item><title>Docker Compose 简介</title><link>https://gohalo.github.io/cn/blog/docker-compose-introduce/</link><pubDate>Sun, 22 Dec 2019 21:34:52 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/docker-compose-introduce/</guid><description>&lt;p>Docker Compose 是 Docker 官方编排项目，用于快速的部署应用。通过 DockerFile 可以快速生成一个容器，如果要多个容器配合使用，那么就可以通过该编排工具完成。&lt;/p></description></item><item><title>Dockerfile 简介</title><link>https://gohalo.github.io/cn/blog/docker-dockerfile/</link><pubDate>Thu, 11 Jul 2019 21:48:10 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/docker-dockerfile/</guid><description>&lt;p>Dockerfile 可以用来创建一个镜像，允许在该文件中调用一些命令行中的命令，这样可以利用一个基础镜像，然后附加一些基础操作，最后直接自动生成新镜像。&lt;/p></description></item><item><title>K8S Pause</title><link>https://gohalo.github.io/cn/blog/kubernets-basic-components-pause/</link><pubDate>Sat, 12 Jan 2019 21:50:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/kubernets-basic-components-pause/</guid><description>&lt;p>在 K8S 的 Slave 节点上，除了本身启动的容器外，还会看到很多的 Pause 容器，一般是一个 Pod 会对应一个 Pause 。&lt;/p>
&lt;p>那么这个 Pause 的用途是什么？&lt;/p></description></item><item><title>K8S 本地集群 Kind 使用介绍</title><link>https://gohalo.github.io/cn/blog/kubernets-minimal-kind-cluster/</link><pubDate>Fri, 12 Nov 2010 20:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/kubernets-minimal-kind-cluster/</guid><description>kind 是 Kubernetes in Docker 的简写，是一个使用 Docker 容器作为 Nodes，在本地创建和运行 Kubernetes 群集的工具，适用于在本机创建 Kubernetes 群集环境进行开发和测试，而且支持离线部署。
简介 # 实际上 Kind 会通过 Docker 启动一个容器，然后容器中会启动多个进程的 Pod 服务，为了方便管理，还会在容器外部启动一个 kubelet 服务，这样就可以无需进入容器直接使用 kubectl 命令了。
其中 Node 是基于 Debain 实现的容器。
准备工作 # 可以直接从 Github Release 上下载相应的版本，可以直接下载二进制文件，然后添加到 PATH 环境变量所在目录下。 如果是离线使用，那么可以通过如下方式安装，实际上主要是准备 Docker 镜像。
----- 找台在线机器下载镜像，在上述Release Notes中会提及对应版本，也可以使用历史版本 # docker pull kindest/node:v1.27.2@sha256:3966ac761 ----- 然后打包，两种方式都可以 # docker save -o kind.v1.27.2.tar kindest/node:v1.27.2@sha256:3966ac761 # docker save kindest/node:v1.27.2@sha256:3966ac761 | gzip &amp;gt; kind.v1.27.2.tar.gz ----- 在所需的离线环境中加载镜像，并重新定义tag # docker load -i kind.</description></item><item><title>【专题】Linux 容器介绍</title><link>https://gohalo.github.io/cn/blog/topic-linux-container/</link><pubDate>Fri, 12 Mar 2010 20:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-linux-container/</guid><description/></item><item><title>K8S Pod 简介</title><link>https://gohalo.github.io/cn/blog/kubernets-components-pod/</link><pubDate>Fri, 12 Mar 2010 20:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/kubernets-components-pod/</guid><description>&lt;p>K8S 中有各种各样的组件，对于容器来说 K8S 的最小单元由 Pod 进行组成，它封装了一个或多个应用程序的容器、存储资源、网络 IP 以及管理容器的选项。&lt;/p></description></item></channel></rss>