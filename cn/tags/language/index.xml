<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>language on</title><link>https://gohalo.github.io/cn/tags/language/</link><description>Recent content in language on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 10 Sep 2023 18:39:45 +0800</lastBuildDate><atom:link href="https://gohalo.github.io/cn/tags/language/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust 命令行参数解析库</title><link>https://gohalo.github.io/cn/blog/rust-third-clap/</link><pubDate>Sun, 10 Sep 2023 18:39:45 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-third-clap/</guid><description>&lt;p>当使用命令行时，参数管理通常比较复杂，尤其是随着子参数增多，通过 clap 三方库可以很方便进行管理。&lt;/p></description></item><item><title>Java 常用工具详解</title><link>https://gohalo.github.io/cn/blog/java-tools-introduce/</link><pubDate>Sun, 29 Aug 2021 20:38:50 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/java-tools-introduce/</guid><description>&lt;p>Java 安装包中除了 JVM 虚拟机之外，还提供了一些常用的命令行，这里简单介绍常用的命令。&lt;/p></description></item><item><title>Python 打包详解</title><link>https://gohalo.github.io/cn/blog/python-package-distribute/</link><pubDate>Fri, 20 Aug 2021 20:49:38 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-package-distribute/</guid><description>&lt;p>之前介绍了如何通过 &lt;code>pip&lt;/code> 安装包，主要是以用户的角度介绍，这里则从开发角度介绍如何打包、分发。&lt;/p></description></item><item><title>Java 常用技巧</title><link>https://gohalo.github.io/cn/blog/java-some-tips/</link><pubDate>Tue, 26 Jan 2021 20:39:48 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/java-some-tips/</guid><description>&lt;p>这里总结一些常用的技巧。&lt;/p></description></item><item><title>Python 包管理机制详解介绍</title><link>https://gohalo.github.io/cn/blog/python-package-management/</link><pubDate>Sun, 20 Dec 2020 19:59:28 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-package-management/</guid><description>&lt;p>Python 中可以通过 PIP 来自动管理依赖包，当然，也可以下载源码或者二进制包，有些源码包需要编译环境，最好直接下载安装二进制包。&lt;/p></description></item><item><title>Rust 结构体详解</title><link>https://gohalo.github.io/cn/blog/rust-syntax-structure-details/</link><pubDate>Thu, 26 Nov 2020 20:49:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-syntax-structure-details/</guid><description>&lt;p>结构体是 Rust 中最常用的，同样使用起来也相对更加复杂。&lt;/p></description></item><item><title>Python With 语句详细介绍</title><link>https://gohalo.github.io/cn/blog/python-basic-syntax-with/</link><pubDate>Fri, 30 Oct 2020 22:48:38 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-basic-syntax-with/</guid><description>&lt;p>通常会有一些任务，开始需要进行设置，处理任务，事后做清理工作，对于这种场景，Python 的 with 语句提供了一种非常方便的处理方式。一个很好的例子是文件处理，你需要获取一个文件句柄，从文件中读取数据，然后关闭文件句柄。&lt;/p>
&lt;p>这里详细介绍其实现的内部原理。&lt;/p></description></item><item><title>Lua 基本概念介绍</title><link>https://gohalo.github.io/cn/blog/lua-basic-introduce/</link><pubDate>Sun, 12 Apr 2020 18:19:15 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/lua-basic-introduce/</guid><description>&lt;p>Lua 历史可以从 1993 年开始，到现在为止，在很多场景都可以看到 Lua 的影子，如游戏开发、Web 应用脚本、安全系统插件等，像常见的 nmap、sysbench 等程序。&lt;/p>
&lt;p>这里简单介绍 Lua 的安装使用。&lt;/p></description></item><item><title>GoLang Echo 简介</title><link>https://gohalo.github.io/cn/blog/golang-echo-http-framework/</link><pubDate>Thu, 05 Mar 2020 22:28:15 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-echo-http-framework/</guid><description>&lt;p>echo web 框架是通过 GoLang 开发的一种高性能、可扩展、轻量级的 web 框架，只包含了 MVC 框架的 C 部分，也就是负责 URL 路由和控制器部分，对于 V 视图和 M 数据操作可以使用自己喜欢的工具库来实现。&lt;/p>
&lt;p>这里简单介绍其使用方法。&lt;/p></description></item><item><title>Python 日志使用详解</title><link>https://gohalo.github.io/cn/blog/python-third-package-logging/</link><pubDate>Thu, 30 Jan 2020 23:18:34 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-third-package-logging/</guid><description>&lt;p>用 Python 写代码时，经常需要打印日志，其实内部提供了一个灵活的 logging 模块，基本可以满足绝大部分的需求，如下简单介绍其使用方式。&lt;/p></description></item><item><title>Python 语法简介</title><link>https://gohalo.github.io/cn/blog/python-basic-syntax-introduce/</link><pubDate>Sun, 30 Dec 2018 20:58:38 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-basic-syntax-introduce/</guid><description>&lt;p>这里介绍 Python 的基本的语法。&lt;/p></description></item><item><title>Bash 自动补全机制详解</title><link>https://gohalo.github.io/cn/blog/bash-auto-completion-introduce/</link><pubDate>Sat, 08 Dec 2018 19:17:02 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/bash-auto-completion-introduce/</guid><description>&lt;p>在 Linux 命令行中，当输入字符后，按两次 &lt;code>Tab&lt;/code> 键，Shell 就会列出以这些字符打头的所有可用命令，如果只有一个命令匹配到，按一次 &lt;code>Tab&lt;/code> 键就自动将这个命令补全。&lt;/p>
&lt;p>比如，如果想更改密码，但只记得这个命令前几个字母是 pa，此时按 &lt;code>Tab&lt;/code> 键 Shell 就会自动补全 passwd 命令，非常方便。除了命令补全，还有路径、文件名补全，这个在通过 cd 命令切换到指定目录时特别好用。&lt;/p>
&lt;p>这里详细介绍其使用方法。&lt;/p></description></item><item><title>LLVM 使用简介</title><link>https://gohalo.github.io/cn/blog/llvm-compiler-infrastructure-introduce/</link><pubDate>Sat, 08 Dec 2018 19:17:02 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/llvm-compiler-infrastructure-introduce/</guid><description>&lt;p>LLVM 计划启动于 2000 年，由 UIUC 大学的 Chris Lattner 博士主持，后入职 Apple 继续推广，所以 Apple 就成了主要的赞助商。&lt;/p>
&lt;p>最初是 Low Level Virtual Machine 的缩写，不过随着发展，逐渐整合成了一整套的编译工具，所以官方也就放弃了原有的缩写，而修改成 The LLVM Compiler Infrastructure 。&lt;/p>
&lt;p>其强大之处在于模块化，可以很方便适配不同的语言以及硬件平台。&lt;/p></description></item><item><title>Bash 模拟终端介绍</title><link>https://gohalo.github.io/cn/blog/bash-terminal-emulator/</link><pubDate>Tue, 16 Oct 2018 19:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/bash-terminal-emulator/</guid><description>&lt;p>Bash 是一个交互程序，不过现在都是基于虚拟终端来实现，不同虚拟终端支持能力各有区别，这里简单介绍。&lt;/p></description></item><item><title>GoLang 异常处理</title><link>https://gohalo.github.io/cn/blog/golang-basic-error-panic/</link><pubDate>Sat, 15 Sep 2018 21:39:58 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-basic-error-panic/</guid><description>&lt;p>Golang 中的错误处理是一个被大家经常拿出来讨论的话题(另外一个是泛型)，这里简单介绍其使用方法。&lt;/p></description></item><item><title>Python 新类和旧类区别</title><link>https://gohalo.github.io/cn/blog/python-old-new-style-class/</link><pubDate>Fri, 27 Jul 2018 19:49:38 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-old-new-style-class/</guid><description>&lt;p>在 Python 2.2 版本中引入了新式类 (New Style Class)，所以，通常将在此之前的类称为经典类或者旧类，而在此之后的称为新式类，两者在使用时略有区别。&lt;/p>
&lt;p>这里会简单介绍两者的区别。&lt;/p></description></item><item><title>Python 三方库 requests</title><link>https://gohalo.github.io/cn/blog/python-third-package-requests/</link><pubDate>Thu, 30 Nov 2017 18:39:17 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-third-package-requests/</guid><description>&lt;p>这是一个简单但是非常优雅的 HTTP 库，对于一些常见的 API 调用非常简单实用。&lt;/p></description></item><item><title>MySQL 使用简介</title><link>https://gohalo.github.io/cn/blog/mysql-basic-introduce/</link><pubDate>Mon, 16 Oct 2017 19:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-basic-introduce/</guid><description>&lt;p>MySQL 是一款最流行的开源关系型数据库，最初由瑞典的 MySQL AB 公司开发，目前已被 Oracle 收购，现在比较流行的分支包括了 MariaDB 和 Percona。&lt;/p>
&lt;p>现在来看，MySQL 被收购之后，实际上添加了很多不错的特性，解掉了很多之前未解的问题，而现在 MariaDB 离主干的特性越来越远；而 Percona 据说为了保证质量是不接受社区提供的代码的，不过其提供的工具却是极好的^_^&lt;/p>
&lt;p>在此，简单介绍，二进制安装、源码编译安装、单实例以及多实例的启动、常见的调试方法。&lt;/p></description></item><item><title>GoLang JSON 编码解码</title><link>https://gohalo.github.io/cn/blog/golang-json-encode-decode-introduce/</link><pubDate>Fri, 07 Oct 2016 19:29:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-json-encode-decode-introduce/</guid><description>&lt;p>随着 REST API 的兴起，基本上已经前后端分离，更多的返回格式是 json 字符串，这里简单讨论下在 GoLang 中如何编码和解码 JSON 结构。&lt;/p>
&lt;p>GoLang 提供了 &lt;code>encoding/json&lt;/code> 的标准库用于 JSON 的处理，简单记录 GoLang 中使用 JSON 的常用技巧。&lt;/p></description></item><item><title>GoLang 参数校验</title><link>https://gohalo.github.io/cn/blog/golang-validator-introduce/</link><pubDate>Tue, 26 Jul 2016 20:28:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-validator-introduce/</guid><description>&lt;p>接口开发经常会遇到一个问题是后端需要大量代码进行参数校验，防止用户的恶意请求。最常见的如日期格式、用户年龄、性别等必须是正常的值，不能随意设置。&lt;/p>
&lt;p>这里介绍 GoLang 中的一个参数校验库。&lt;/p></description></item><item><title>Python 虚拟环境详解</title><link>https://gohalo.github.io/cn/blog/python-virtual-environments/</link><pubDate>Mon, 30 Nov 2015 20:19:36 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-virtual-environments/</guid><description>&lt;p>Python 的虚拟环境用来创建一个相对独立的执行环境，尤其是一些依赖的三方包，最常见的如不同项目依赖同一个但是不同版本的三方包，而且，在虚拟环境中的安装包不会影响到系统的安装包。&lt;/p>
&lt;p>不过，其具体的工作原理是怎样的，这里详细介绍。&lt;/p></description></item><item><title>GoLang Echo 中间件</title><link>https://gohalo.github.io/cn/blog/golang-echo-middleware/</link><pubDate>Tue, 06 Oct 2015 19:29:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-echo-middleware/</guid><description>&lt;p>Echo 中间件指的是可以拦截 http 请求的特殊函数，在请求和响应中间可以注册多个中间件，每个中间件执行不同的功能，一个中间执行完再轮到下一个中间件执行。&lt;/p></description></item><item><title>Python 模块简介</title><link>https://gohalo.github.io/cn/blog/python-modules-introduce/</link><pubDate>Sun, 07 Jun 2015 21:39:22 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-modules-introduce/</guid><description>在 Python 解析器中，每次重新进入，之前定义的函数、变量等都会丢失，所以，通常是将代码保存在文件中运行，而随着功能增加，文件会变得越来越大，为了方便维护，会将其拆分成多个文件。
其它语言也有类似的问题，Python 将其称为模块 (Module) ，通过模块可以定义函数、类、变量等，从而更有逻辑地组织 Python 代码。
这里介绍模块的引入、搜索、制作等一些常见的问题。
简介 # 每个文件都是一个模块 (module)，其模块名就是对应的文件名，在模块内运行时，可以通过全局变量 __name__ 获取，最常见的就是 __main__ 的判断，也就是是否为主 Pyhton 脚本。
if __name__ == &amp;#34;__main__&amp;#34;: print(&amp;#34;Hello World&amp;#34;) 也就是该文件可以作为模块引入其它代码中，也可以作为一个独立的执行文件运行，而判断的逻辑就是这里的 if __name__ == &amp;quot;__main__&amp;quot; 语句，直接调用脚本时，对应 __name__ 变量保存的是 __main__ ，如果是引入的模块，则是模块名称。
模块导入 # 可以通过 import 关键字导入模块，也就是添加到当前的命名空间中，根据不同的使用场景，有如下的几种方式。
# 直接导入模块，可以通过math.cos()调用 import math # 导入模块中的函数，这样可以直接调用cos sin，不过很容易被覆盖 from math import cos, sin # 导入模块的所有符号 from math import * # 导入模块的符号，为了防止名字覆盖，将其重命名 from math import pi as PI 导入的模块会保存在 sys.modules 中，这是一个字典，如果多次导入第二次实际不会有加载的动作。</description></item><item><title>Python 基本环境准备</title><link>https://gohalo.github.io/cn/blog/python-environment-prepare/</link><pubDate>Thu, 17 Oct 2013 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-environment-prepare/</guid><description>&lt;p>与 Java 类似，Python 底层通过一个虚拟机运行，而且已经移植到了多个平台上，也就是，需要根据不同的平台安装虚拟机，实际上最主要的就是 python 可执行文件。&lt;/p>
&lt;p>现在大多数安装的都是 CPython ，也就是 C 语言实现的 Python ，通常，直接使用安装包安装即可。&lt;/p>
&lt;p>这里详细介绍如何安装环境，使用虚拟环境等等。&lt;/p></description></item><item><title>SEO 优化技巧</title><link>https://gohalo.github.io/cn/blog/seo-tips-for-webs/</link><pubDate>Sun, 28 Oct 2012 19:20:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/seo-tips-for-webs/</guid><description>&lt;p>所谓的 SEO 也就是搜索引擎优化，指遵循搜索引擎的搜索原理，对网站结构、网页文字语言和站点间互动外交略等进行合理规划部署，以改善网站在搜索引擎的搜索表现，进而增加客户发现并访问网站的可能性。&lt;/p>
&lt;p>这里主要介绍一些常见的优化技巧。&lt;/p></description></item><item><title>【专题】Python 编程语言</title><link>https://gohalo.github.io/cn/blog/topic-language-python/</link><pubDate>Sun, 17 Oct 2010 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-language-python/</guid><description>&lt;p>Python 是一种解释型语言，提供了跨平台的支持，可以快速开发一些脚本，随着 AI 的兴起，提供了一些常见的开发框架，这里详解介绍 Python 的使用。&lt;/p></description></item><item><title>【专题】Rust 编程语言</title><link>https://gohalo.github.io/cn/blog/topic-language-rust/</link><pubDate>Sat, 16 Oct 2010 19:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-language-rust/</guid><description>&lt;p>可以将 Rust 理解为 C 的直接替代品，提供了系统级的性能，而且在很多方面更好，最常提到的就是内存安全，并且可以与遗留 C 代码原生互操作以进行增量替换。&lt;/p></description></item><item><title>【专题】GoLang 编程语言</title><link>https://gohalo.github.io/cn/blog/topic-language-golang/</link><pubDate>Wed, 06 Oct 2010 19:29:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-language-golang/</guid><description>&lt;p>GoLang 是谷歌 2009 年发布的开源编程语言，其开发人员都是计算机界大神一般的存在，提供了便捷的协程使用，具有很高的并发性。目前很多 Cloud Native 软件都是通过 GoLang 编写，例如 Docker、K8S、LXD 等等。&lt;/p></description></item><item><title>【专题】Java 编程语言</title><link>https://gohalo.github.io/cn/blog/topic-language-java/</link><pubDate>Wed, 06 Oct 2010 19:29:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-language-java/</guid><description>&lt;p>Java 是由 Sun Microsystems 公司于 1995 年 5 月推出的高级程序设计语言，可运行于多个平台，如 Windows、Mac OS 及其它多种类 UNIX 版本的系统，包括 Linux 系统。&lt;/p></description></item><item><title>Rust Iced 使用详解</title><link>https://gohalo.github.io/cn/blog/rust-third-iced/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohalo.github.io/cn/blog/rust-third-iced/</guid><description/></item></channel></rss>