<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>network on</title><link>https://gohalo.github.io/cn/tags/network/</link><description>Recent content in network on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 28 Apr 2022 21:39:10 +0800</lastBuildDate><atom:link href="https://gohalo.github.io/cn/tags/network/index.xml" rel="self" type="application/rss+xml"/><item><title>Socks 代理协议详解</title><link>https://gohalo.github.io/cn/blog/network-proxy-socks/</link><pubDate>Thu, 28 Apr 2022 21:39:10 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/network-proxy-socks/</guid><description>&lt;p>Socks 是一个代理协议，这里会对协议进行详细介绍，同时会介绍其使用场景。&lt;/p></description></item><item><title>Linux 网络配置</title><link>https://gohalo.github.io/cn/blog/linux-network-settings/</link><pubDate>Wed, 20 May 2020 21:29:10 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-network-settings/</guid><description>&lt;p>现在很多系统管理员仍在使用 ifconfig、route、arp 和 netstat 等命令行工具，来管理和排查各种网络配置。这套工具也就是 net-tools 包，源于 BSD TCP/IP 工具箱，但是自 2001 年以后基本就停滞不前。&lt;/p>
&lt;p>iproute 作为一套新的网络配置工具，旨在替换原有的 net-tools 工具包，这里大概介绍下两者的区别。&lt;/p></description></item><item><title>GoLang Echo 简介</title><link>https://gohalo.github.io/cn/blog/golang-echo-http-framework/</link><pubDate>Thu, 05 Mar 2020 22:28:15 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-echo-http-framework/</guid><description>&lt;p>echo web 框架是通过 GoLang 开发的一种高性能、可扩展、轻量级的 web 框架，只包含了 MVC 框架的 C 部分，也就是负责 URL 路由和控制器部分，对于 V 视图和 M 数据操作可以使用自己喜欢的工具库来实现。&lt;/p>
&lt;p>这里简单介绍其使用方法。&lt;/p></description></item><item><title>GoLang HTTP 使用简介</title><link>https://gohalo.github.io/cn/blog/golang-http-webserver-introduce/</link><pubDate>Fri, 27 Apr 2018 18:13:19 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-http-webserver-introduce/</guid><description>&lt;p>除去细节，理解 HTTP 构建的网络应用只要关注客户端和服务端的处理，服务器主要用来接收客户端的请求，然后返回响应，在接收请求并处理的过程中，最重要的莫过于路由 (Router)。&lt;/p>
&lt;p>这里简单介绍如何使用 &lt;code>net/http&lt;/code> 构建 HTTP 请求。&lt;/p></description></item><item><title>Linux 网络状态查看</title><link>https://gohalo.github.io/cn/blog/linux-network-status/</link><pubDate>Thu, 26 Apr 2018 21:19:27 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-network-status/</guid><description>&lt;p>直接通过 &lt;code>man 8 netstat&lt;/code> 查看帮助时就可以发现这样的一句话 &lt;code>This program is obsolete. Replacement for netstat is ss.&lt;/code>，而且后面还有几个相关的等价示例介绍。&lt;/p>
&lt;p>所以这里简单介绍与 ss 相关的指令。&lt;/p></description></item><item><title>JWT 简介</title><link>https://gohalo.github.io/cn/blog/golang-json-web-token-jwt/</link><pubDate>Tue, 13 Feb 2018 21:27:20 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-json-web-token-jwt/</guid><description>&lt;p>在程序开发中，用户认证授权是一个绕不过的重难点，以前的开发模式下，cookie 和 session 认证是主流，随着前后端分离的趋势，基于 Token 的认证方式成为主流。&lt;/p>
&lt;p>而 JWT(RFC 7519) 是基于 Token 认证方式的一种机制，是实现单点登录认证的一种有效方法。&lt;/p>
&lt;p>这里详细介绍其设计和使用方式。&lt;/p></description></item><item><title>GoLang Echo 中间件</title><link>https://gohalo.github.io/cn/blog/golang-echo-middleware/</link><pubDate>Tue, 06 Oct 2015 19:29:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-echo-middleware/</guid><description>&lt;p>Echo 中间件指的是可以拦截 http 请求的特殊函数，在请求和响应中间可以注册多个中间件，每个中间件执行不同的功能，一个中间执行完再轮到下一个中间件执行。&lt;/p></description></item></channel></rss>