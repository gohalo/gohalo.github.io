<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>vim on</title><link>https://gohalo.github.io/cn/tags/vim/</link><description>Recent content in vim on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 12 Jun 2024 20:10:42 +0800</lastBuildDate><atom:link href="https://gohalo.github.io/cn/tags/vim/index.xml" rel="self" type="application/rss+xml"/><item><title>Neovim 插件管理工具</title><link>https://gohalo.github.io/cn/blog/neovim-plugins-management/</link><pubDate>Wed, 12 Jun 2024 20:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/neovim-plugins-management/</guid><description>&lt;p>历史曾经推荐使用 &lt;a href="https://gohalo.github.io/cn/blog/neovim-plugins-management-legacy-packer/">Packer.nvim&lt;/a> 作为插件管理工具，不过该插件从 2023.08 开始不再维护，所以就有了 &lt;a href="https://github.com/folke/lazy.nvim">lazy.nvim&lt;/a> 插件。&lt;/p>
&lt;p>这里详细介绍其使用。&lt;/p></description></item><item><title>NeoVim 基本环境配置</title><link>https://gohalo.github.io/cn/blog/neovim-basic-usage/</link><pubDate>Fri, 02 Sep 2022 21:14:02 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/neovim-basic-usage/</guid><description>&lt;p>最开始 NeoVim 是 Vim 的功能增强，但是随着不断开发，功能越来越完善，而且已经分道扬镳，现在已经成为了更加接近现代的开发工具，尤其是随着 &lt;a href="https://neovim.io/charter/">Vision&lt;/a> 计划的开发，也包括了其子项目 &lt;a href="https://tree-sitter.github.io/tree-sitter/">Tree-sitter&lt;/a>。&lt;/p></description></item><item><title>NeoVim LSP 使用介绍</title><link>https://gohalo.github.io/cn/blog/neovim-lsp-usage/</link><pubDate>Tue, 30 Nov 2021 18:39:17 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/neovim-lsp-usage/</guid><description>&lt;p>在 NeoVim 内部已经提供了 Language Server Protocol, LSP 客户端，服务端就需要按照自己的需求进行安装了，目前已经有一些高效的配置插件，可以很简单完成基本环境的配置。&lt;/p></description></item><item><title>NeoVIM 常用命令整理</title><link>https://gohalo.github.io/cn/blog/neovim-cheatsheet/</link><pubDate>Sun, 31 Oct 2021 18:39:17 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/neovim-cheatsheet/</guid><description>&lt;p>整理使用 NeoVIM 时常用的技巧。&lt;/p></description></item><item><title>Neovim 常用插件介绍</title><link>https://gohalo.github.io/cn/blog/neovim-basic-plugins-introduce/</link><pubDate>Sat, 26 Jun 2021 21:34:52 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/neovim-basic-plugins-introduce/</guid><description>&lt;p>这里会列举常用的一些 NeoVIM 插件。&lt;/p></description></item><item><title>VIM 代码折叠</title><link>https://gohalo.github.io/cn/blog/vim-tips-folding/</link><pubDate>Mon, 30 Nov 2020 18:39:17 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/vim-tips-folding/</guid><description>&lt;p>VIM 支持多种模式的折叠，可以方便查看代码结构。&lt;/p></description></item><item><title>Neovim 插件管理工具之 Packer(历史)</title><link>https://gohalo.github.io/cn/blog/neovim-plugins-management-legacy-packer/</link><pubDate>Fri, 12 Jun 2020 20:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/neovim-plugins-management-legacy-packer/</guid><description>&lt;p>从 Neovim 0.5 版本开始，一般推荐使用 Lua 原生的 &lt;code>packer.nvim&lt;/code> 做插件管理，现在大多数插件都支持该管理工具。&lt;/p>
&lt;p>这里详细介绍其使用。&lt;/p></description></item><item><title>VIM 界面显示介绍</title><link>https://gohalo.github.io/cn/blog/vim-tips-tab-buffer/</link><pubDate>Sun, 12 Apr 2020 18:19:15 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/vim-tips-tab-buffer/</guid><description>&lt;p>在 VIM 中，与显示相关的内容包括了 Tab、Window、Buffer 三种，很多的功能可以用不同的机制实现，不过很容易引起混淆，这里简单介绍 VIM 设计的基本概念，并简单介绍最佳实践。&lt;/p></description></item><item><title>VIM 颜色配置</title><link>https://gohalo.github.io/cn/blog/vim-tips-true-colors/</link><pubDate>Sun, 12 Apr 2020 18:19:15 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/vim-tips-true-colors/</guid><description>&lt;p>不同的终端对于颜色的支持能力略有区别。&lt;/p></description></item><item><title>VIM 自动对齐配置</title><link>https://gohalo.github.io/cn/blog/vim-tips-indent/</link><pubDate>Fri, 03 Apr 2020 18:19:15 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/vim-tips-indent/</guid><description>&lt;p>通过 VIM 可以自动设置对齐方式，例如使用 Tab 还是空格，使用四个字节还是八个字节等等，而且，可以根据不同的语言设置不同的格式。&lt;/p></description></item><item><title>VIM技巧 -- 自动换行</title><link>https://gohalo.github.io/cn/blog/vim-auto-return/</link><pubDate>Wed, 12 Jun 2019 20:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/vim-auto-return/</guid><description> 自动换行 # 输入时，默认 Vim 是不会自动换行的，可以通过设定 :set textwidth=29 选项，让 Vim 自动在第 30 列换行，注意，对于已经存在的文本是不会换行的，也超过制定长度后也不会换行。
这里的换行不会添加 EOL 符号，而只是影响显示。希望允许设置显示的最大宽度，超过之后可以不显示或者换行，如果换行，那么上下切换行的时候就不要再以原有的行进行切换。
通过设置 linebreak=true 可以只在分词的时候进行换行，而设置为 false 时会在对应的字符位置直接换行。
换行切换 # 一行因为过长自动换行之后，可以通过 gj 切换，为了保持与之前的快捷键统一，那么就可以使用如下的映射。
noremap j gj noremap k gk</description></item><item><title>VIM 常用配置</title><link>https://gohalo.github.io/cn/blog/vim-some-tips/</link><pubDate>Fri, 01 Jun 2018 20:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/vim-some-tips/</guid><description/></item></channel></rss>