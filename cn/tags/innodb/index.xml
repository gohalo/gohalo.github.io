<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>innodb on</title><link>https://gohalo.github.io/cn/tags/innodb/</link><description>Recent content in innodb on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 08 Oct 2020 19:18:25 +0800</lastBuildDate><atom:link href="https://gohalo.github.io/cn/tags/innodb/index.xml" rel="self" type="application/rss+xml"/><item><title>InnoDB 简单介绍</title><link>https://gohalo.github.io/cn/blog/mysql-innodb-introduce/</link><pubDate>Thu, 08 Oct 2020 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-innodb-introduce/</guid><description>&lt;p>我们知道，在 MySQL 中，存储引擎是通过插件实现的，从而使得添加存储引擎时相对来说比较简单，而且目前支持多种类型的存储引擎。&lt;/p>
&lt;p>InnoDB 目前基本上已经是实时上的没人存储引擎了，现在可以支持外键、行锁、MVCC、支持标准的 4 种隔离级别等等。实际上，这也就意味着 InnoDB 是相当复杂的一个存储引擎。&lt;/p>
&lt;p>在此，仅简单介绍下。&lt;/p></description></item><item><title>InnoDB 崩溃恢复</title><link>https://gohalo.github.io/cn/blog/mysql-innodb-crash-recovery/</link><pubDate>Thu, 03 Sep 2020 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-innodb-crash-recovery/</guid><description>&lt;p>如果 InnoDB 没有正常关闭，会在服务器启动的时候执行崩溃恢复 (Crash Recovery)，这一流程比较复杂，涉及到了 redo log、undo log 甚至包括了 binlog 。&lt;/p>
&lt;p>在此简单介绍下 InnoDB 崩溃恢复的流程。&lt;/p></description></item><item><title>InnoDB Double Write Buffer</title><link>https://gohalo.github.io/cn/blog/mysql-innodb-double-write-buffer/</link><pubDate>Fri, 13 Sep 2019 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-innodb-double-write-buffer/</guid><description>&lt;p>从 Double Write Buffer 来看，貌似是内存中的一块缓存区域，实际上，这里的 buffer 并不只是一块内存区域，而是还包括了存放在表空间中或是单独指定的某个文件中的一个 buffer 。&lt;/p>
&lt;p>在此，介绍下为什么会有 Double Write Buffer，以及其是如何实现的。&lt;/p></description></item><item><title>InnoDB 存储空间</title><link>https://gohalo.github.io/cn/blog/mysql-innodb-storage/</link><pubDate>Tue, 23 Jul 2019 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-innodb-storage/</guid><description>&lt;p>InnoDB 表空间 (table space) 用来组织存储保存的数据，本文中对表空间管理进行分析。&lt;/p></description></item><item><title>InnoDB Checkpoint</title><link>https://gohalo.github.io/cn/blog/mysql-innodb-checkpoint/</link><pubDate>Fri, 22 Feb 2019 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-innodb-checkpoint/</guid><description>&lt;p>如果 redo log 可以无限地增大，同时缓冲池也足够大，是不是就意味着可以不将缓冲池中的脏页刷新回磁盘上？宕机时，完全可以通过 redo log 来恢复整个数据库系统中的数据。&lt;/p>
&lt;p>显然，上述的前提条件是不满足的，这也就引入了 checkpoint 技术。&lt;/p>
&lt;p>在这篇文章里，就简单介绍下 MySQL 中的实现。&lt;/p></description></item><item><title>InnoDB 隔离级别使用实例</title><link>https://gohalo.github.io/cn/blog/mysql-innodb-isolation-level/</link><pubDate>Sun, 01 Nov 2015 19:58:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-innodb-isolation-level/</guid><description>&lt;p>数据库的事务存在着 ACID 四个属性，而在实际应用场景中，当面临着性能需求时，隔离性往往成为最容易妥协的一个，其实际上就是指数据库在并发事务下的表现。&lt;/p>
&lt;p>在本文章中，详细介绍下 InnoDB 中关于隔离级别的实现。&lt;/p></description></item></channel></rss>