<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linux on</title><link>https://gohalo.github.io/cn/tags/linux/</link><description>Recent content in linux on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 28 Apr 2022 21:39:10 +0800</lastBuildDate><atom:link href="https://gohalo.github.io/cn/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Socks 代理协议详解</title><link>https://gohalo.github.io/cn/blog/network-proxy-socks/</link><pubDate>Thu, 28 Apr 2022 21:39:10 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/network-proxy-socks/</guid><description>&lt;p>Socks 是一个代理协议，这里会对协议进行详细介绍，同时会介绍其使用场景。&lt;/p></description></item><item><title>Debian 系统配置</title><link>https://gohalo.github.io/cn/blog/linux-debian-distribution/</link><pubDate>Sun, 12 Sep 2021 20:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-debian-distribution/</guid><description>&lt;p>Debian 是最早最老牌的 Linux 发行版之一，最大优点是极其稳定快速，是 Ubuntu、Linux Mint 和 elementary OS 等 Linux 操作系统的母板，同时拥有强大的 APT 包管理机制和丰富的软件源，可以方便地安装和平滑升级软件和系统，省去很多编译安装和版本升级的麻烦.&lt;/p>
&lt;p>其具有完善的包管理系统，它的每个组件和应用程序都内置在系统中安装的软件包中。&lt;/p></description></item><item><title>Python 通过 Paramiko 访问 SSH 服务</title><link>https://gohalo.github.io/cn/blog/ssh-python-paramiko-examples/</link><pubDate>Thu, 12 Aug 2021 20:28:54 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/ssh-python-paramiko-examples/</guid><description>&lt;p>Paramiko 实现了 SSH2 协议，用于与远程机器建立经过认证和加密后的安全连接，与 SSL 不同的是，SSH 不需要权威机构签署的分层证书，采用分布式的方式管理。&lt;/p></description></item><item><title>yum 配置以及常用 rpm 命令</title><link>https://gohalo.github.io/cn/blog/yum-rpm-config-and-command-usage/</link><pubDate>Thu, 16 Jul 2020 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/yum-rpm-config-and-command-usage/</guid><description>&lt;p>在 CentOS 中，会通过 YUM 或者 RPM 进行软件包的管理，不过 RPM 不能很好的解决软件之间的依赖关系，所以目前使用较多的是 YUM 源。&lt;/p>
&lt;p>介绍常用的管理命令，基本的 RPM 规范，常见的错误处理，例如镜像地址配置、本地源设置、强制安装包等等。&lt;/p></description></item><item><title>Linux 网络配置</title><link>https://gohalo.github.io/cn/blog/linux-network-settings/</link><pubDate>Wed, 20 May 2020 21:29:10 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-network-settings/</guid><description>&lt;p>现在很多系统管理员仍在使用 ifconfig、route、arp 和 netstat 等命令行工具，来管理和排查各种网络配置。这套工具也就是 net-tools 包，源于 BSD TCP/IP 工具箱，但是自 2001 年以后基本就停滞不前。&lt;/p>
&lt;p>iproute 作为一套新的网络配置工具，旨在替换原有的 net-tools 工具包，这里大概介绍下两者的区别。&lt;/p></description></item><item><title>Linux 系统配置</title><link>https://gohalo.github.io/cn/blog/linux-system-config/</link><pubDate>Fri, 27 Sep 2019 19:49:36 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-system-config/</guid><description>&lt;p>一些与 Linux 系统配置相关的介绍。&lt;/p></description></item><item><title>Linux 可执行文件解析工具</title><link>https://gohalo.github.io/cn/blog/c-linux-tools-executable-binary-parse/</link><pubDate>Sat, 08 Jun 2019 21:19:32 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/c-linux-tools-executable-binary-parse/</guid><description>&lt;p>主要是在如何解析 ELF 格式的文件。&lt;/p></description></item><item><title>Linux 常用配置</title><link>https://gohalo.github.io/cn/blog/linux-basic-common-setup/</link><pubDate>Tue, 21 May 2019 20:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-basic-common-setup/</guid><description>&lt;p>这里简单整理在 Linux 安装过程中常见的配置。&lt;/p></description></item><item><title>C/CPP 静态链接顺序</title><link>https://gohalo.github.io/cn/blog/c-cpp-static-linkage/</link><pubDate>Sun, 28 Apr 2019 22:10:33 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/c-cpp-static-linkage/</guid><description>&lt;p>静态链接和动态链接最大的区别就在于链接的时机不一样，静态链接是在生车可执行程序前，而动态链接的进行则是在程序执行时，而且静态链接库的位置不同将会影响二进制文件生成。&lt;/p></description></item><item><title>Perf 使用简介</title><link>https://gohalo.github.io/cn/blog/linux-perf-introduce/</link><pubDate>Wed, 27 Feb 2019 21:39:50 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-perf-introduce/</guid><description>&lt;p>Perf 全名是 Performance Event，在 Linux 2.6.31 以后内建的系统性能分析工具，由内核社区维护和发展，不仅可以用于应用程序的性能统计分析，也可以应用于内核代码的性能统计和分析。&lt;/p>
&lt;p>这里简单介绍。&lt;/p></description></item><item><title>gdbinit 功能介绍</title><link>https://gohalo.github.io/cn/blog/gdb-gdbinit-script/</link><pubDate>Mon, 13 Aug 2018 20:10:51 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/gdb-gdbinit-script/</guid><description>&lt;p>在启动时，会在当前用户目录下寻找文件名为 &lt;code>.gdbinit&lt;/code> 的文件，如果存在，会执行该文件中的所有命令，通常用于简单的配置命令，如设置所需的默认汇编程序格式、输出数据默认基数，还可以读取宏编码语言，从而实现更强大的自定义函数。&lt;/p></description></item><item><title>Linux 网络状态查看</title><link>https://gohalo.github.io/cn/blog/linux-network-status/</link><pubDate>Thu, 26 Apr 2018 21:19:27 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-network-status/</guid><description>&lt;p>直接通过 &lt;code>man 8 netstat&lt;/code> 查看帮助时就可以发现这样的一句话 &lt;code>This program is obsolete. Replacement for netstat is ss.&lt;/code>，而且后面还有几个相关的等价示例介绍。&lt;/p>
&lt;p>所以这里简单介绍与 ss 相关的指令。&lt;/p></description></item><item><title>DWARF 格式简介</title><link>https://gohalo.github.io/cn/blog/gdb-dwarf-format-introduce/</link><pubDate>Sun, 10 Dec 2017 23:49:17 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/gdb-dwarf-format-introduce/</guid><description>&lt;p>也就是 Debugging With Attributed RecordFormats, DWARF ，到目前为止，应该包括了 &lt;code>V1~5&lt;/code> 共五个版本，其中 dwarf2 对 dwarf1 的改变很大，而后续的版本基本上是对前者的扩展。&lt;/p>
&lt;p>这一格式独立于语言，不过使用比较多的是 C/C++ ，这里简单介绍在 GDB 中，如何对这些调试信息进行组织、实现，并且如何利用调试信息进行 C 语言级别的调试。&lt;/p></description></item><item><title>GDB Python 脚本</title><link>https://gohalo.github.io/cn/blog/gdb-python-script/</link><pubDate>Sat, 15 Apr 2017 20:39:11 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/gdb-python-script/</guid><description>&lt;p>GDB 很早就支持自定义脚本辅助调试，不过语法比较老，不如 Python 使用方便广泛，从 GDB 7.X(2009) 版本开始支持 Python Scripting ，不过建议使用 9.X 以上的版本，关于 Python 的详细特性可以参考 &lt;a href="https://www.sourceware.org/gdb/news/">GDB News&lt;/a> 的内容。&lt;/p></description></item><item><title>GDB 基本功能介绍</title><link>https://gohalo.github.io/cn/blog/gdb-basic-usage-introduce/</link><pubDate>Fri, 10 Mar 2017 22:30:31 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/gdb-basic-usage-introduce/</guid><description>&lt;p>GNU Project Debugger, GDB 一个代码调试工具，通过系统提供的 ptrace 接口实现的控制进程，然后可以在进程内部查看信息，甚至调用函数。&lt;/p></description></item><item><title>Linux 时间相关概念介绍</title><link>https://gohalo.github.io/cn/blog/linux-time-basic/</link><pubDate>Sun, 15 Jan 2017 21:16:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-time-basic/</guid><description>&lt;p>简单介绍在 Linux 中部分与时间相关的概念，例如时区、闰秒、夏令时、ntp 等。&lt;/p>
&lt;p>&amp;ldquo;现在几点了？&amp;rdquo; 或者 &amp;ldquo;离过年还有多久？&amp;rdquo; 这恐怕连小学生也觉得是再简单不过的问题了；但是如果问及 &amp;ldquo;时间是什么？&amp;rdquo; 恐怕绝大多数人都会顿觉茫然。&lt;/p></description></item><item><title>GoLang 实现 SSH 相关示例</title><link>https://gohalo.github.io/cn/blog/ssh-golang-examples/</link><pubDate>Tue, 26 Jul 2016 20:28:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/ssh-golang-examples/</guid><description>&lt;p>GoLang 提供了基础的 SSH 库，可以用来作为服务端或者客户端使用，这里整理了常见的用法。&lt;/p></description></item><item><title>SSH 代理设置</title><link>https://gohalo.github.io/cn/blog/ssh-port-forwarding/</link><pubDate>Tue, 26 Jul 2016 20:28:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/ssh-port-forwarding/</guid><description>&lt;p>通过 ssh 的端口转发或者隧道 (tunneling) 功能，可以实现: A) 加密 SSH Client 端至 SSH Server 端之间的通讯数据；B) 突破防火墙的限制完成一些之前无法建立的 TCP 连接。&lt;/p></description></item><item><title>SSH 便捷登录配置</title><link>https://gohalo.github.io/cn/blog/ssh-simplify-your-life/</link><pubDate>Tue, 26 Jul 2016 20:28:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/ssh-simplify-your-life/</guid><description>&lt;p>通常在一个 ssh 链接中，需要指定用户名、主机名、主机端口号、配置参数等信息，如果每次登陆一台主机都要输入，那么就会变的非常麻烦，而且一些 IP 地址通常又非常难记。&lt;/p>
&lt;p>为此，我们可以通过 OpenSSH 的客户端配置文件简化我们的登陆方式，下面简单介绍下。&lt;/p></description></item><item><title>SSH 基本介绍</title><link>https://gohalo.github.io/cn/blog/ssh-basic-introduce/</link><pubDate>Tue, 26 Jul 2016 20:28:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/ssh-basic-introduce/</guid><description>&lt;p>传统的 telnet、rcp ftp、rlogin、rsh 都是极不安全的，并且会使用明文传送密码，OpenSSH 提供了服务端后台程序和客户端工具，用来加密远程控件和文件传输过程中的数据，并由此来代替原来的类似服务。&lt;/p>
&lt;p>OpenSSH 是 SSH (Secure SHell) 协议的免费开源实现，SSH 协议族可以用来进行远程控制，或在计算机之间传送文件。这里简单介绍下 SSH 和 OpenSSH 的使用。&lt;/p></description></item><item><title>SSH 密钥管理</title><link>https://gohalo.github.io/cn/blog/ssh-keys-manage/</link><pubDate>Tue, 26 Jul 2016 20:28:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/ssh-keys-manage/</guid><description>&lt;p>服务端会保存自己的公私钥，客户端每次链接时会确认是否为上次记录主机。&lt;/p></description></item><item><title>SSH 证书登录介绍</title><link>https://gohalo.github.io/cn/blog/ssh-cert-manage/</link><pubDate>Tue, 26 Jul 2016 20:28:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/ssh-cert-manage/</guid><description>&lt;p>从 OpenSSH 5.4 版本 (2010年) 开始支持 SSH 证书，相比 SSL 中使用的证书来说，SSH 的更为简单，没有证书链只有一个 CA 证书，这样就免去了商业签名授权。&lt;/p></description></item><item><title>软件 DNSmasq 使用介绍</title><link>https://gohalo.github.io/cn/blog/linux-dnsmasq-introduce/</link><pubDate>Sun, 20 Dec 2015 21:50:32 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-dnsmasq-introduce/</guid><description>&lt;p>通常上网使用的 DNS 服务器都是由电信、联通等运营商提供的，或者是公用的 DNS 解析服务器，例如 Google 提供的解析器，这通常会带来些问题，如有时解析不正常、经常弹出广告等。&lt;/p>
&lt;p>有时我们需要管理 DNS 解析，如加速 DNS 的解析过程、纠正错误的 DNS 解析记录、配置局域网的 DNS 解析等等。&lt;/p>
&lt;p>DNSmasq 就是其中的一个主机上最常用的解决方案，相比 BIND 来说，其更加小巧，配置更加方便，其源码仅有 2 万多行，但足以满足常见的需求。&lt;/p></description></item><item><title>SSH 通讯协议介绍</title><link>https://gohalo.github.io/cn/blog/ssh-protocol-details/</link><pubDate>Thu, 17 Sep 2015 22:58:24 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/ssh-protocol-details/</guid><description>&lt;p>SSH 通讯是基于几个基本协议完成，这里简单介绍。&lt;/p></description></item><item><title>HTTP/HTTPS 代理协议</title><link>https://gohalo.github.io/cn/blog/network-proxy-http-https/</link><pubDate>Fri, 10 Apr 2015 22:09:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/network-proxy-http-https/</guid><description>&lt;p>代理服务器的功能是代理网络用户去取得网络信息，是网络信息的中转站，通常用于隐藏身份、充当防火墙、防止攻击、权限控制等用途。&lt;/p></description></item><item><title>TMUX 简介</title><link>https://gohalo.github.io/cn/blog/tmux-terminal-introduce/</link><pubDate>Wed, 21 May 2014 19:49:37 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/tmux-terminal-introduce/</guid><description>&lt;p>TMUX 类似于 screen，是一个窗口管理器，而且功能更加强大，提供了强劲的、易于使用的命令行界面，可横向和纵向分割窗口，支持 UTF-8 编码及 256 色终端等特性。&lt;/p>
&lt;p>接下来简单介绍下 TMUX 的使用。&lt;/p></description></item><item><title>Linux 常用命令 rsync 介绍</title><link>https://gohalo.github.io/cn/blog/linux-command-rsync-introduce/</link><pubDate>Wed, 15 Dec 2010 21:18:32 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-command-rsync-introduce/</guid><description>&lt;p>rsync 是一个远程数据同步工具，使用 &amp;ldquo;rsync算法&amp;rdquo; 来使本地和远程两个主机之间的文件达到同步，该算法只传送两个文件的不同部分，从而可以有效提高传输效率，而且本地复制文件也可以提高效率。&lt;/p></description></item><item><title>Linux 常用命令 inotify 介绍</title><link>https://gohalo.github.io/cn/blog/linux-command-inotify-introduce/</link><pubDate>Wed, 20 Oct 2010 20:17:52 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-command-inotify-introduce/</guid><description>&lt;p>在 Linux 系统下 inotify 是一种强大的、细粒度的、异步的文件系统事件监控机制，通过该机制可以快速感知文件的变化，这样可以用于一些文件的实时同步。&lt;/p></description></item><item><title>【专题】Linux 安全相关</title><link>https://gohalo.github.io/cn/blog/topic-linux-security/</link><pubDate>Sat, 27 Mar 2010 21:18:34 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-linux-security/</guid><description>&lt;p>介绍 Linux 中与安全相关的内容，例如 SSH、SELinux 等，当然，也包括了一些安全相关基本的概念，例如加密算法、TLS 等等。&lt;/p>
&lt;p>这里作为一个专题介绍一些常见概念。&lt;/p></description></item><item><title>【专题】Linux 环境搭建</title><link>https://gohalo.github.io/cn/blog/topic-linux-environment-setup/</link><pubDate>Thu, 25 Feb 2010 22:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-linux-environment-setup/</guid><description>&lt;p>Linux 有多个发行版本，其中 RedHat、Debian 及其衍生版本占了很大一部分，大部分的基本功能相似，但是环境又略有区别，这里简单介绍其基础的环境使用，以及一些常见概念。&lt;/p></description></item></channel></rss>