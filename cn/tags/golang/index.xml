<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on</title><link>https://gohalo.github.io/cn/tags/golang/</link><description>Recent content in golang on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 15 Apr 2020 21:18:40 +0800</lastBuildDate><atom:link href="https://gohalo.github.io/cn/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>GoLang 单元测试</title><link>https://gohalo.github.io/cn/blog/golang-testing-method/</link><pubDate>Wed, 15 Apr 2020 21:18:40 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-testing-method/</guid><description>&lt;p>程序开发中比较重要的一点是如何可以高效的进行单元测试，可以保证快速发现定位问题，在 GoLang 中自带了一个轻量级的测试框架 &lt;code>testing&lt;/code> 以及 &lt;code>go test&lt;/code> 命令来实现单元测试和性能测试。&lt;/p></description></item><item><title>GoLang Echo 简介</title><link>https://gohalo.github.io/cn/blog/golang-echo-http-framework/</link><pubDate>Thu, 05 Mar 2020 22:28:15 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-echo-http-framework/</guid><description>&lt;p>echo web 框架是通过 GoLang 开发的一种高性能、可扩展、轻量级的 web 框架，只包含了 MVC 框架的 C 部分，也就是负责 URL 路由和控制器部分，对于 V 视图和 M 数据操作可以使用自己喜欢的工具库来实现。&lt;/p>
&lt;p>这里简单介绍其使用方法。&lt;/p></description></item><item><title>GoLang Delve 调试工具</title><link>https://gohalo.github.io/cn/blog/golang-debug-delve/</link><pubDate>Tue, 23 Jul 2019 22:19:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-debug-delve/</guid><description>&lt;p>Delve 是 GoLang 的三方调试器，相比 GDB 来说能更好的理解 GoLang 的运行时，包括数据结构、表达式等，目前支持 Linux、Windows 以及 Mac 等平台。&lt;/p></description></item><item><title>GoLang 基本语法介绍</title><link>https://gohalo.github.io/cn/blog/golang-basic-syntax/</link><pubDate>Thu, 25 Apr 2019 19:28:10 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-basic-syntax/</guid><description>&lt;p>简单介绍常见的语法，例如 import、异常处理、反射等。&lt;/p></description></item><item><title>GoLang 异常处理</title><link>https://gohalo.github.io/cn/blog/golang-basic-error-panic/</link><pubDate>Sat, 15 Sep 2018 21:39:58 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-basic-error-panic/</guid><description>&lt;p>Golang 中的错误处理是一个被大家经常拿出来讨论的话题(另外一个是泛型)，这里简单介绍其使用方法。&lt;/p></description></item><item><title>GoLang 基本介绍</title><link>https://gohalo.github.io/cn/blog/golang-basic-introduce/</link><pubDate>Tue, 21 Aug 2018 21:09:38 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-basic-introduce/</guid><description>&lt;p>GoLang 目前越来越火，包括了 Docker、InfluxDB、etcd 等等，越来越多的工程都在使用 GoLang 。虽然它的语法都比较 &amp;ldquo;奇葩&amp;rdquo;，一些高级语言支持的特性却都不支持，但其高并发、高效率等等，也使其热度不减。&lt;/p>
&lt;p>这篇文章主要简单介绍下 GoLang 环境的搭建。&lt;/p></description></item><item><title>GORM 操作简介</title><link>https://gohalo.github.io/cn/blog/golang-db-gorm-basic/</link><pubDate>Tue, 21 Aug 2018 21:09:38 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-db-gorm-basic/</guid><description>&lt;p>Object Relational Mapping, ORM 对象关系映射，用于将数据库中的数据与代码中的结构体进行映射，不同语言的实现方式略有区别，但是目的基本相同。&lt;/p>
&lt;p>GoLang 中有多种映射库，这里简单介绍常见的 GORM 使用方式。&lt;/p></description></item><item><title>GoLang DB 操作简介</title><link>https://gohalo.github.io/cn/blog/golang-db-introduce/</link><pubDate>Sun, 19 Aug 2018 20:19:08 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-db-introduce/</guid><description>&lt;p>GoLang 提供了标准包用于对 SQL 数据库进行访问，作为操作数据库的入口对象 sql.DB, 主要为提供了两个重要的功能：A) 提供管理底层数据库连接的打开和关闭操作；B) 管理数据库连接池。&lt;/p>
&lt;p>需要注意的是，sql.DB 表示操作数据库的抽象访问接口，而非一个数据库连接对象，会根据实际的驱动打开关闭数据库连接，管理连接池。&lt;/p>
&lt;p>这里简单介绍 MySQL 的使用方式。&lt;/p></description></item><item><title>GoLang 模板使用简介</title><link>https://gohalo.github.io/cn/blog/golang-template-introduce/</link><pubDate>Sun, 19 Aug 2018 20:19:08 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-template-introduce/</guid><description>&lt;p>在前后端分离的时代，模板语言使用的已经很少了，不过很多特定的场景还是很有用的，这里介绍其基本使用方法。&lt;/p></description></item><item><title>GoLang HTTP 使用简介</title><link>https://gohalo.github.io/cn/blog/golang-http-webserver-introduce/</link><pubDate>Fri, 27 Apr 2018 18:13:19 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-http-webserver-introduce/</guid><description>&lt;p>除去细节，理解 HTTP 构建的网络应用只要关注客户端和服务端的处理，服务器主要用来接收客户端的请求，然后返回响应，在接收请求并处理的过程中，最重要的莫过于路由 (Router)。&lt;/p>
&lt;p>这里简单介绍如何使用 &lt;code>net/http&lt;/code> 构建 HTTP 请求。&lt;/p></description></item><item><title>JWT 简介</title><link>https://gohalo.github.io/cn/blog/golang-json-web-token-jwt/</link><pubDate>Tue, 13 Feb 2018 21:27:20 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-json-web-token-jwt/</guid><description>&lt;p>在程序开发中，用户认证授权是一个绕不过的重难点，以前的开发模式下，cookie 和 session 认证是主流，随着前后端分离的趋势，基于 Token 的认证方式成为主流。&lt;/p>
&lt;p>而 JWT(RFC 7519) 是基于 Token 认证方式的一种机制，是实现单点登录认证的一种有效方法。&lt;/p>
&lt;p>这里详细介绍其设计和使用方式。&lt;/p></description></item><item><title>GoLang 日志模块使用介绍</title><link>https://gohalo.github.io/cn/blog/golang-log-module-introduce/</link><pubDate>Mon, 16 Oct 2017 19:29:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-log-module-introduce/</guid><description>&lt;p>打印日志是最常规的需求，GoLang 的基础库只提供了简单的格式化功能，但是很多基础功能不存在，例如日志级别、文件切割等等。&lt;/p>
&lt;p>这里介绍 Uber 开发的一个日志库 ZAP 。&lt;/p></description></item><item><title>GoLang JSON 编码解码</title><link>https://gohalo.github.io/cn/blog/golang-json-encode-decode-introduce/</link><pubDate>Fri, 07 Oct 2016 19:29:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-json-encode-decode-introduce/</guid><description>&lt;p>随着 REST API 的兴起，基本上已经前后端分离，更多的返回格式是 json 字符串，这里简单讨论下在 GoLang 中如何编码和解码 JSON 结构。&lt;/p>
&lt;p>GoLang 提供了 &lt;code>encoding/json&lt;/code> 的标准库用于 JSON 的处理，简单记录 GoLang 中使用 JSON 的常用技巧。&lt;/p></description></item><item><title>GoLang 参数校验</title><link>https://gohalo.github.io/cn/blog/golang-validator-introduce/</link><pubDate>Tue, 26 Jul 2016 20:28:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-validator-introduce/</guid><description>&lt;p>接口开发经常会遇到一个问题是后端需要大量代码进行参数校验，防止用户的恶意请求。最常见的如日期格式、用户年龄、性别等必须是正常的值，不能随意设置。&lt;/p>
&lt;p>这里介绍 GoLang 中的一个参数校验库。&lt;/p></description></item><item><title>GoLang Echo 中间件</title><link>https://gohalo.github.io/cn/blog/golang-echo-middleware/</link><pubDate>Tue, 06 Oct 2015 19:29:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-echo-middleware/</guid><description>&lt;p>Echo 中间件指的是可以拦截 http 请求的特殊函数，在请求和响应中间可以注册多个中间件，每个中间件执行不同的功能，一个中间执行完再轮到下一个中间件执行。&lt;/p></description></item><item><title>【专题】Rust 编程语言</title><link>https://gohalo.github.io/cn/blog/topic-language-rust/</link><pubDate>Sat, 16 Oct 2010 19:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-language-rust/</guid><description>&lt;p>可以将 Rust 理解为 C 的直接替代品，提供了系统级的性能，而且在很多方面更好，最常提到的就是内存安全，并且可以与遗留 C 代码原生互操作以进行增量替换。&lt;/p></description></item><item><title>【专题】GoLang 编程语言</title><link>https://gohalo.github.io/cn/blog/topic-language-golang/</link><pubDate>Wed, 06 Oct 2010 19:29:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-language-golang/</guid><description>&lt;p>GoLang 是谷歌 2009 年发布的开源编程语言，其开发人员都是计算机界大神一般的存在，提供了便捷的协程使用，具有很高的并发性。目前很多 Cloud Native 软件都是通过 GoLang 编写，例如 Docker、K8S、LXD 等等。&lt;/p></description></item></channel></rss>