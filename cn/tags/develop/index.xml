<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>develop on</title><link>https://gohalo.github.io/cn/tags/develop/</link><description>Recent content in develop on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 12 Oct 2022 23:05:42 +0800</lastBuildDate><atom:link href="https://gohalo.github.io/cn/tags/develop/index.xml" rel="self" type="application/rss+xml"/><item><title>git 开源代码提交流程</title><link>https://gohalo.github.io/cn/blog/git-tips-opensource-workflow/</link><pubDate>Wed, 12 Oct 2022 23:05:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-tips-opensource-workflow/</guid><description>&lt;p>这里以 GitHub 上的工作流程为例，讲解如何维护、提交代码。&lt;/p></description></item><item><title>git 换行符配置</title><link>https://gohalo.github.io/cn/blog/git-tips-crlr/</link><pubDate>Wed, 12 Jan 2022 23:05:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-tips-crlr/</guid><description>&lt;p>Windows 和 Linux/Mac 平台上的换行符不同，通过 git 可以自动进行设置。&lt;/p></description></item><item><title>NeoVim LSP 使用介绍</title><link>https://gohalo.github.io/cn/blog/neovim-lsp-usage/</link><pubDate>Tue, 30 Nov 2021 18:39:17 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/neovim-lsp-usage/</guid><description>&lt;p>在 NeoVim 内部已经提供了 Language Server Protocol, LSP 客户端，服务端就需要按照自己的需求进行安装了，目前已经有一些高效的配置插件，可以很简单完成基本环境的配置。&lt;/p></description></item><item><title>NeoVIM 常用命令整理</title><link>https://gohalo.github.io/cn/blog/neovim-cheatsheet/</link><pubDate>Sun, 31 Oct 2021 18:39:17 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/neovim-cheatsheet/</guid><description>&lt;p>整理使用 NeoVIM 时常用的技巧。&lt;/p></description></item><item><title>gogs 使用简介</title><link>https://gohalo.github.io/cn/blog/git-gogs-introduce/</link><pubDate>Thu, 26 Aug 2021 21:19:45 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-gogs-introduce/</guid><description>&lt;p>Gogs 的功能类似于 GitHub 或者 GitLab ，不过相比来说是一款极易搭建的 Git 服务，其目标是打造一个最简单、最快速和最轻松的方式搭建自助 Git 服务，通过 Go 语言开发，使得 Gogs 能够通过独立二进制分发，支持平台包括了 Linux、Mac OS、Windows 以及 ARM 。&lt;/p></description></item><item><title>VIM 代码折叠</title><link>https://gohalo.github.io/cn/blog/vim-tips-folding/</link><pubDate>Mon, 30 Nov 2020 18:39:17 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/vim-tips-folding/</guid><description>&lt;p>VIM 支持多种模式的折叠，可以方便查看代码结构。&lt;/p></description></item><item><title>git 免登陆设置</title><link>https://gohalo.github.io/cn/blog/git-tips-skip-password-typing/</link><pubDate>Thu, 16 Jul 2020 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-tips-skip-password-typing/</guid><description>&lt;p>使用 git 时，可以通过 http 或者 ssh 访问远端仓库，但是每次访问如果都要填写用户名密码就会很麻烦，这里主要针对这两种场景，介绍如何配置免密码直接登陆。&lt;/p></description></item><item><title>VIM 自动对齐配置</title><link>https://gohalo.github.io/cn/blog/vim-tips-indent/</link><pubDate>Fri, 03 Apr 2020 18:19:15 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/vim-tips-indent/</guid><description>&lt;p>通过 VIM 可以自动设置对齐方式，例如使用 Tab 还是空格，使用四个字节还是八个字节等等，而且，可以根据不同的语言设置不同的格式。&lt;/p></description></item><item><title>git 子模块使用</title><link>https://gohalo.github.io/cn/blog/git-tips-submodule/</link><pubDate>Sun, 16 Feb 2020 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-tips-submodule/</guid><description>&lt;p>开发过程中经常会遇到依赖另外的项目，多数情况可能就是三方库，但是几个独立的项目，通过子模块可以将多个项目关联。&lt;/p></description></item><item><title>Drone 使用</title><link>https://gohalo.github.io/cn/blog/cicd-drone-introduce/</link><pubDate>Mon, 26 Aug 2019 21:38:05 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/cicd-drone-introduce/</guid><description>&lt;p>相对于常见的 Jenkins 来说，其非常简洁，同时拥有可以满足基本需求的能力，并且提供了许多实用的插件，如 GitHub、Gogs、Email 等等，再结合 Gogs 可以实现持续集成和持续部署的方案。&lt;/p></description></item><item><title>git 常见问题整理</title><link>https://gohalo.github.io/cn/blog/git-faqs/</link><pubDate>Mon, 01 Apr 2019 18:38:55 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-faqs/</guid><description>&lt;p>整理下常见的 git 问题。&lt;/p></description></item><item><title>git 对象简介</title><link>https://gohalo.github.io/cn/blog/git-internal-object-introduce/</link><pubDate>Mon, 21 Jan 2019 19:38:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-internal-object-introduce/</guid><description>&lt;p>git 作为当前最流行的版本管理工具，简单、易用，而且功能强大，不过其依托的是一组极为简洁的数据结构。&lt;/p>
&lt;p>这里简单介绍其核心概念。&lt;/p></description></item><item><title>git 多个远端仓库</title><link>https://gohalo.github.io/cn/blog/git-tips-multi-remote-repos/</link><pubDate>Wed, 26 Dec 2018 19:38:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-tips-multi-remote-repos/</guid><description>&lt;p>Git 作为一个分布式的仓库，可以配置多个远端，这里介绍如何将一个本地仓库同步到不同的远端仓库中，最常见的是开源代码时对应了不同仓库地址。&lt;/p></description></item><item><title>git lfs 简介</title><link>https://gohalo.github.io/cn/blog/git-large-file-storage-introduce/</link><pubDate>Sat, 01 Dec 2018 19:38:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-large-file-storage-introduce/</guid><description>&lt;p>GIT 代码管理是基于文本文件行的，那么，对于二进制文件来说，当保存每次提交的改动时，会保存整个文件，会导致仓库快速增大，包括了网络带宽。&lt;/p>
&lt;p>在 2015.04 GitHub 推出了 Large File Storage, LFS 将标记的大文件保存在另外的仓库，而主仓库仅保留其轻量级指针。&lt;/p></description></item><item><title>git 统计工具</title><link>https://gohalo.github.io/cn/blog/git-some-statistic-commands-and-tools-introduce/</link><pubDate>Thu, 13 Sep 2018 19:38:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-some-statistic-commands-and-tools-introduce/</guid><description>&lt;p>git 应该是目前使用最为广泛的代码管理仓库了，提供了非常简单的命令行工具，通过这些命令行可以进行一些常见的代码统计。&lt;/p>
&lt;p>这里简单介绍一些常用的命令。&lt;/p></description></item><item><title>git 补丁相关操作</title><link>https://gohalo.github.io/cn/blog/git-tips-patch-command-usage/</link><pubDate>Sun, 08 Oct 2017 19:30:02 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-tips-patch-command-usage/</guid><description>&lt;p>在 Linux 中可以通过 diff patch 命令生成补丁以及打补丁，而且 git 实际上也提供了很简单的命令直接生成 Patch 文件，然后，可以再结合 patch 命令使用即可。&lt;/p>
&lt;p>这里简单介绍其使用方法。&lt;/p></description></item><item><title>【专题】开发环境</title><link>https://gohalo.github.io/cn/blog/topic-develop-workspace/</link><pubDate>Sat, 12 Jun 2010 20:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-develop-workspace/</guid><description>Git # Git 是一免费、开源的分布式版本控制系统，可有效、高速的处理从很小到非常大的项目版本管理，该工具是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发，其本意是为了替换 BitKeeper 。
除了 GitHub 外，开源的工具还有 GitLab、Gogs，以及 C 的相关库 libgit2 。
这里简单介绍一下常见概念及其操作。
简明教程 介绍常见的基础操作，以及相关的配置。 分支模型 git 提供了很方便的分支管理，通过规范化的管理策略可以简化版本维护成本。 对象简介 内部使用一组极为简洁的数据结构来维护，也就是对象。 常用技巧 # 免密登录 这里介绍对于 http 和 ssh 访问时如何免除密码输入。 子模块使用 可以将其它的库作为模块添加，这样就可以方便管理。 补丁管理 可以通过 git 生成补丁文件，然后可以在 Linux 中通过命令打补丁。 换行符切换 在 Window 和 Linux 上的换行符是不同的，可以自动进行切换。 多源管理 介绍如何将一个本地仓库同步到不同的远端仓库中。 统计工具 对于一些常见指标的统计。 LFS 使用 由 GitHub 实现的一种处理大文件的解决方案。 开源流程 这里以 GitHub 为例简单介绍一个常用的提交流程。 常见问题 整理下 git 中常见的问题、解决方案以及相关原因，同时包含 github 代理。 使用杂项 记录 git 常见的示例，可以用来作为参考使用，也就是 Cheatsheet 参考。 参考 # 下载加速 长期维护的代理、Hosts 等信息，海外下载可以使用 果冻网络加速 进行代理。 CICD # 用于搭建开发、自动部署等平台。</description></item></channel></rss>