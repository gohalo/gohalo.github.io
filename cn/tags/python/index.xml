<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on</title><link>https://gohalo.github.io/cn/tags/python/</link><description>Recent content in python on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 20 Aug 2021 20:49:38 +0800</lastBuildDate><atom:link href="https://gohalo.github.io/cn/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Python 打包详解</title><link>https://gohalo.github.io/cn/blog/python-package-distribute/</link><pubDate>Fri, 20 Aug 2021 20:49:38 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-package-distribute/</guid><description>&lt;p>之前介绍了如何通过 &lt;code>pip&lt;/code> 安装包，主要是以用户的角度介绍，这里则从开发角度介绍如何打包、分发。&lt;/p></description></item><item><title>Python 包管理机制详解介绍</title><link>https://gohalo.github.io/cn/blog/python-package-management/</link><pubDate>Sun, 20 Dec 2020 19:59:28 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-package-management/</guid><description>&lt;p>Python 中可以通过 PIP 来自动管理依赖包，当然，也可以下载源码或者二进制包，有些源码包需要编译环境，最好直接下载安装二进制包。&lt;/p></description></item><item><title>Python With 语句详细介绍</title><link>https://gohalo.github.io/cn/blog/python-basic-syntax-with/</link><pubDate>Fri, 30 Oct 2020 22:48:38 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-basic-syntax-with/</guid><description>&lt;p>通常会有一些任务，开始需要进行设置，处理任务，事后做清理工作，对于这种场景，Python 的 with 语句提供了一种非常方便的处理方式。一个很好的例子是文件处理，你需要获取一个文件句柄，从文件中读取数据，然后关闭文件句柄。&lt;/p>
&lt;p>这里详细介绍其实现的内部原理。&lt;/p></description></item><item><title>Python 日志使用详解</title><link>https://gohalo.github.io/cn/blog/python-third-package-logging/</link><pubDate>Thu, 30 Jan 2020 23:18:34 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-third-package-logging/</guid><description>&lt;p>用 Python 写代码时，经常需要打印日志，其实内部提供了一个灵活的 logging 模块，基本可以满足绝大部分的需求，如下简单介绍其使用方式。&lt;/p></description></item><item><title>Python 语法简介</title><link>https://gohalo.github.io/cn/blog/python-basic-syntax-introduce/</link><pubDate>Sun, 30 Dec 2018 20:58:38 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-basic-syntax-introduce/</guid><description>&lt;p>这里介绍 Python 的基本的语法。&lt;/p></description></item><item><title>Python 新类和旧类区别</title><link>https://gohalo.github.io/cn/blog/python-old-new-style-class/</link><pubDate>Fri, 27 Jul 2018 19:49:38 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-old-new-style-class/</guid><description>&lt;p>在 Python 2.2 版本中引入了新式类 (New Style Class)，所以，通常将在此之前的类称为经典类或者旧类，而在此之后的称为新式类，两者在使用时略有区别。&lt;/p>
&lt;p>这里会简单介绍两者的区别。&lt;/p></description></item><item><title>Python 三方库 requests</title><link>https://gohalo.github.io/cn/blog/python-third-package-requests/</link><pubDate>Thu, 30 Nov 2017 18:39:17 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-third-package-requests/</guid><description>&lt;p>这是一个简单但是非常优雅的 HTTP 库，对于一些常见的 API 调用非常简单实用。&lt;/p></description></item><item><title>Python 虚拟环境详解</title><link>https://gohalo.github.io/cn/blog/python-virtual-environments/</link><pubDate>Mon, 30 Nov 2015 20:19:36 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-virtual-environments/</guid><description>&lt;p>Python 的虚拟环境用来创建一个相对独立的执行环境，尤其是一些依赖的三方包，最常见的如不同项目依赖同一个但是不同版本的三方包，而且，在虚拟环境中的安装包不会影响到系统的安装包。&lt;/p>
&lt;p>不过，其具体的工作原理是怎样的，这里详细介绍。&lt;/p></description></item><item><title>Python 模块简介</title><link>https://gohalo.github.io/cn/blog/python-modules-introduce/</link><pubDate>Sun, 07 Jun 2015 21:39:22 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-modules-introduce/</guid><description>在 Python 解析器中，每次重新进入，之前定义的函数、变量等都会丢失，所以，通常是将代码保存在文件中运行，而随着功能增加，文件会变得越来越大，为了方便维护，会将其拆分成多个文件。
其它语言也有类似的问题，Python 将其称为模块 (Module) ，通过模块可以定义函数、类、变量等，从而更有逻辑地组织 Python 代码。
这里介绍模块的引入、搜索、制作等一些常见的问题。
简介 # 每个文件都是一个模块 (module)，其模块名就是对应的文件名，在模块内运行时，可以通过全局变量 __name__ 获取，最常见的就是 __main__ 的判断，也就是是否为主 Pyhton 脚本。
if __name__ == &amp;#34;__main__&amp;#34;: print(&amp;#34;Hello World&amp;#34;) 也就是该文件可以作为模块引入其它代码中，也可以作为一个独立的执行文件运行，而判断的逻辑就是这里的 if __name__ == &amp;quot;__main__&amp;quot; 语句，直接调用脚本时，对应 __name__ 变量保存的是 __main__ ，如果是引入的模块，则是模块名称。
模块导入 # 可以通过 import 关键字导入模块，也就是添加到当前的命名空间中，根据不同的使用场景，有如下的几种方式。
# 直接导入模块，可以通过math.cos()调用 import math # 导入模块中的函数，这样可以直接调用cos sin，不过很容易被覆盖 from math import cos, sin # 导入模块的所有符号 from math import * # 导入模块的符号，为了防止名字覆盖，将其重命名 from math import pi as PI 导入的模块会保存在 sys.modules 中，这是一个字典，如果多次导入第二次实际不会有加载的动作。</description></item><item><title>Python 基本环境准备</title><link>https://gohalo.github.io/cn/blog/python-environment-prepare/</link><pubDate>Thu, 17 Oct 2013 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-environment-prepare/</guid><description>&lt;p>与 Java 类似，Python 底层通过一个虚拟机运行，而且已经移植到了多个平台上，也就是，需要根据不同的平台安装虚拟机，实际上最主要的就是 python 可执行文件。&lt;/p>
&lt;p>现在大多数安装的都是 CPython ，也就是 C 语言实现的 Python ，通常，直接使用安装包安装即可。&lt;/p>
&lt;p>这里详细介绍如何安装环境，使用虚拟环境等等。&lt;/p></description></item><item><title>【专题】Python 编程语言</title><link>https://gohalo.github.io/cn/blog/topic-language-python/</link><pubDate>Sun, 17 Oct 2010 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-language-python/</guid><description>&lt;p>Python 是一种解释型语言，提供了跨平台的支持，可以快速开发一些脚本，随着 AI 的兴起，提供了一些常见的开发框架，这里详解介绍 Python 的使用。&lt;/p></description></item></channel></rss>