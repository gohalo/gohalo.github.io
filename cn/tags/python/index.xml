<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on</title><link>https://gohalo.github.io/cn/tags/python/</link><description>Recent content in python on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 13 Feb 2024 18:39:18 +0800</lastBuildDate><atom:link href="https://gohalo.github.io/cn/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>人工神经网络</title><link>https://gohalo.github.io/cn/blog/artificial-neural-network/</link><pubDate>Tue, 13 Feb 2024 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/artificial-neural-network/</guid><description/></item><item><title>损失函数 - 交叉熵详解</title><link>https://gohalo.github.io/cn/blog/loss-function-cross-entropy/</link><pubDate>Wed, 13 Dec 2023 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/loss-function-cross-entropy/</guid><description>&lt;p>Cross Entropy 交叉熵是深度学习中经常使用的概念，用作损失函数评估目标和预测值之间的差异。&lt;/p></description></item><item><title>PyTorch 使用简介</title><link>https://gohalo.github.io/cn/blog/python-pytorch-package-introduce/</link><pubDate>Tue, 13 Dec 2022 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-pytorch-package-introduce/</guid><description/></item><item><title>损失函数</title><link>https://gohalo.github.io/cn/blog/machine-learning-algorithms-loss-functions/</link><pubDate>Tue, 13 Dec 2022 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/machine-learning-algorithms-loss-functions/</guid><description>均方差 # 如下梳理常用的一些实现。
Mean Absolute Error, MAE 平均绝对误差。
$$ \frac{1}{n} \sum \limits_{i=1}^{n} \lvert y_i – \hat{y}_i \rvert $$
Mean Square Error, MSE 均方误差。真实值与预测值差值的平方然后求和平均，常用作线性回归的损失函数。
$$\frac{1}{n} \sum_{i=1}^{n}(y_i - \hat y_i)^2$$
Root Mean Square Error, RMSE 均方根误差。衡量观测值与真实值之间的偏差，常用来作为机器学习模型预测结果衡量的标准。
$$ \sqrt{ \frac{1}{n} \sum_{i=1}^{n}(y_i - \hat y_i)^2 }$$
Root Mean Squared Log Error, RMSLE 均方根对数误差。
$$\sqrt{ \frac{1}{n} \sum_{i=1}^{n} (log(\hat{y}_i + 1) – log(y_i + 1))^2 }$$
实际上，很多的比赛采用的是 RMSLE ，例如 Kaggle ，对于异常值来说，RMSE 会快速的增加，而 RMSLE 因为取了对数就不会。</description></item><item><title>梯度下降算法</title><link>https://gohalo.github.io/cn/blog/math-gradient-descent-optimize-method/</link><pubDate>Tue, 13 Dec 2022 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/math-gradient-descent-optimize-method/</guid><description>梯度下降法 # 所谓的梯度实际上就是多元函数的 导数，对于 $n$ 元函数 $f(x_1,x_2, \cdots, x_n)$ 的梯度是一个长度为 $n$ 的向量，其中向量中第 $k$ 个元素为函数 $f$ 对 $x_k$ 的偏导数。
$$ \nabla f(x_1, x_2, \cdots, x_n) = \left( \frac{\partial f}{\partial x_1}, \frac{\partial f}{\partial x_2}, \cdots, \frac{\partial f}{\partial x_n} \right) $$
从几何意义上来说，这个向量的指向是函数变化最快的方向。
import numpy as np import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D def Rosenbrock(x, y): return (1 - x) ** 2 + 100 * (y - x ** 2) ** 2 step = 0.</description></item><item><title>Python 调用动态库</title><link>https://gohalo.github.io/cn/blog/python-dynamic-library-usage/</link><pubDate>Sun, 27 Nov 2022 18:39:17 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-dynamic-library-usage/</guid><description>&lt;p>通过 Python 可以直接调用动态库，通常有两种方式，使用 ctypes 进行封装，还可以对 C/C++ 库直接封装成动态库，这样可以直接使用。&lt;/p>
&lt;p>这里不再介绍 ctypes 的相关使用，详细介绍下如何直接使用动态库。&lt;/p></description></item><item><title>Python 打包详解</title><link>https://gohalo.github.io/cn/blog/python-package-distribute/</link><pubDate>Sat, 03 Apr 2021 20:49:38 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-package-distribute/</guid><description>&lt;p>之前介绍了如何通过 &lt;code>pip&lt;/code> 安装包，主要是以用户的角度介绍，这里则从开发角度介绍如何打包、分发。&lt;/p></description></item><item><title>Rust PyO3 使用</title><link>https://gohalo.github.io/cn/blog/rust-python-binding-pyo3/</link><pubDate>Tue, 26 Jan 2021 20:39:48 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-python-binding-pyo3/</guid><description>&lt;p>Python 有强于 Bash 的语法检查，但是，不适合一些高性能的场景，所以，很多时候会作为胶水语言使用。而且，由于 CPython 作为事实标准，使得其兼容 C/C++ 要容易的多，所以，通常高性能场景下会通过 C/C++ 进行重构。&lt;/p>
&lt;p>这里介绍 Python 如何调用 Rust 的实现。&lt;/p></description></item><item><title>Python 包管理机制详解介绍</title><link>https://gohalo.github.io/cn/blog/python-package-management/</link><pubDate>Sun, 20 Dec 2020 19:59:28 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-package-management/</guid><description>&lt;p>Python 中可以通过 PIP 来自动管理依赖包，当然，也可以下载源码或者二进制包，有些源码包需要编译环境，最好直接下载安装二进制包。&lt;/p></description></item><item><title>在 Python 中如何连接 MySQL 数据库</title><link>https://gohalo.github.io/cn/blog/python-third-package-mysql/</link><pubDate>Mon, 23 Nov 2020 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-third-package-mysql/</guid><description>&lt;p>在 Python 中多种方式可以访问 MySQL 服务端，这里介绍几种常用的库。&lt;/p></description></item><item><title>关于 Python 函数声明以及调用方式</title><link>https://gohalo.github.io/cn/blog/python-parameter-methods/</link><pubDate>Fri, 13 Nov 2020 20:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-parameter-methods/</guid><description>&lt;p>Python 提供了非常灵活的参数声明以及调用方式，除了最常用的位置参数，还包括了默认值以及关键词匹配方式，而且对于列表、字典很方便展开。&lt;/p>
&lt;p>这里详细介绍 Python 的参数声明、调用方式。&lt;/p></description></item><item><title>Python With 语句详细介绍</title><link>https://gohalo.github.io/cn/blog/python-basic-syntax-with/</link><pubDate>Fri, 30 Oct 2020 22:48:38 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-basic-syntax-with/</guid><description>&lt;p>通常会有一些任务，开始需要进行设置，处理任务，事后做清理工作，对于这种场景，Python 的 with 语句提供了一种非常方便的处理方式。一个很好的例子是文件处理，你需要获取一个文件句柄，从文件中读取数据，然后关闭文件句柄。&lt;/p>
&lt;p>这里详细介绍其实现的内部原理。&lt;/p></description></item><item><title>决策树</title><link>https://gohalo.github.io/cn/blog/artificial-intelligence-decision-tree/</link><pubDate>Sat, 05 Sep 2020 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/artificial-intelligence-decision-tree/</guid><description>&lt;p>决策树算法是从数据的特征出发，并以此作为基础划分不同的类。&lt;/p></description></item><item><title>Python 内置模块和内置命名空间介绍</title><link>https://gohalo.github.io/cn/blog/python-builtins-module-and-builtin-namespace/</link><pubDate>Sat, 01 Aug 2020 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-builtins-module-and-builtin-namespace/</guid><description>&lt;p>在 CPython 的实现中有一个内置的 &lt;code>builtins&lt;/code> 模块，同时还包含了一个内置的命名空间，其 Key 被称为 &lt;code>__builtins__&lt;/code>，两者在查找时会相互关联，不过在不同模块中实现又不相同。&lt;/p>
&lt;p>这里详细介绍其区别。&lt;/p></description></item><item><title>PyCharm 常用设置</title><link>https://gohalo.github.io/cn/blog/pycharm-settings/</link><pubDate>Fri, 06 Mar 2020 18:49:39 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/pycharm-settings/</guid><description>&lt;p>PyCharm 是 JetBrains 打造的一款 Python IDE 跨平台的 IDE ，当然，还有其它语言的 IDE ，快捷键十分相似。&lt;/p>
&lt;p>这里简单介绍下 PyCharm 相关的一些常用配置。&lt;/p></description></item><item><title>Python 命名空间和作用域介绍</title><link>https://gohalo.github.io/cn/blog/python-namespace-scope/</link><pubDate>Mon, 24 Feb 2020 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-namespace-scope/</guid><description>&lt;p>在 Python 中，一切皆对象，命名空间实际是一个名称到对象的映射，另外，虽然 Python 是一种动态类型的语言，但是静态作用域语言，变量使用与作用域相关。&lt;/p>
&lt;p>这里详细介绍命名空间和作用域的关系。&lt;/p></description></item><item><title>详细介绍 Python 闭包以及装饰器</title><link>https://gohalo.github.io/cn/blog/python-decorator-closure/</link><pubDate>Thu, 20 Feb 2020 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-decorator-closure/</guid><description>&lt;p>装饰器可以为 Python 提供一些修饰工作，所谓修饰工作就是想给现有的模块加上一些小功能，但又不让这个小功能侵入到原有的模块中的代码里去，最常见的三种函数修饰器 &lt;code>@staticmethod&lt;/code>、&lt;code>@classmethod&lt;/code> 和 &lt;code>@property&lt;/code> ，都是 Python 的内置函数。&lt;/p>
&lt;p>这里详细介绍其使用方式。&lt;/p></description></item><item><title>Python 变量基本概念详解</title><link>https://gohalo.github.io/cn/blog/python-variables-bind/</link><pubDate>Wed, 05 Feb 2020 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-variables-bind/</guid><description>&lt;p>在 Python 中，所有的都是对象，变量与大部分常用语言有所区别，赋值的时候，严格来说不是赋值，而是变量的绑定，变量名称中并没有保存对象，而更像是在对象上添加了一个标签而已。&lt;/p>
&lt;p>这里简单介绍下 Python 中与变量相关的基本概念。&lt;/p></description></item><item><title>Python 日志使用详解</title><link>https://gohalo.github.io/cn/blog/python-third-package-logging/</link><pubDate>Thu, 30 Jan 2020 23:18:34 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-third-package-logging/</guid><description>&lt;p>用 Python 写代码时，经常需要打印日志，其实内部提供了一个灵活的 logging 模块，基本可以满足绝大部分的需求，如下简单介绍其使用方式。&lt;/p></description></item><item><title>Python 常用模块</title><link>https://gohalo.github.io/cn/blog/python-third-package-others/</link><pubDate>Fri, 03 Jan 2020 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-third-package-others/</guid><description/></item><item><title>Python 绘图方法</title><link>https://gohalo.github.io/cn/blog/python-matplotlib-ploting-method-intorduce/</link><pubDate>Sat, 28 Sep 2019 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-matplotlib-ploting-method-intorduce/</guid><description>&lt;p>介绍一些 Python 中常见的图片绘制方法。&lt;/p></description></item><item><title>Python StatsModels 简介</title><link>https://gohalo.github.io/cn/blog/python-statsmodels-package-introduce/</link><pubDate>Thu, 18 Jul 2019 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-statsmodels-package-introduce/</guid><description>&lt;p>一个 Python 库，提供了经典频率学派统计方法，包括了多种统计模型。&lt;/p></description></item><item><title>数据预处理</title><link>https://gohalo.github.io/cn/blog/machine-learning-pre-processing-methods-introduce/</link><pubDate>Wed, 22 May 2019 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/machine-learning-pre-processing-methods-introduce/</guid><description/></item><item><title>基本优化算法</title><link>https://gohalo.github.io/cn/blog/math-basic-concept-optimize-method/</link><pubDate>Sat, 30 Mar 2019 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/math-basic-concept-optimize-method/</guid><description/></item><item><title>Python 语法简介</title><link>https://gohalo.github.io/cn/blog/python-basic-syntax-introduce/</link><pubDate>Sun, 30 Dec 2018 20:58:38 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-basic-syntax-introduce/</guid><description>&lt;p>这里介绍 Python 的基本的语法。&lt;/p></description></item><item><title>Python Scipy 简介</title><link>https://gohalo.github.io/cn/blog/python-scipy-package-introduce/</link><pubDate>Sat, 15 Dec 2018 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-scipy-package-introduce/</guid><description>&lt;p>Scipy 是一个用于数学、科学、工程领域的常用软件包，可以处理插值、积分、优化、图像处理、常微分方程数值解的求解、信号处理等问题。&lt;/p>
&lt;p>可以有效计算 Numpy 中的矩阵，从而使 Numpy 和 Scipy 可以协同工作，高效解决问题。&lt;/p></description></item><item><title>PyMC 使用简介</title><link>https://gohalo.github.io/cn/blog/python-pymc-package-introduce/</link><pubDate>Thu, 13 Dec 2018 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-pymc-package-introduce/</guid><description>&lt;p>PyMC3 是一个用 Python 编写的开源的概率编程框架，完全通过 Python 代码来定义模型，并使用 Theano 通过变分推理进行梯度计算，并使用 C 实现加速运算。&lt;/p>
&lt;p>目前的 Theano 库已经不再维护，而 PyMC3 团队会单独维护与 PyMC3 相关的一些特性。&lt;/p></description></item><item><title>数据集简介</title><link>https://gohalo.github.io/cn/blog/machine-learning-some-datasets-introduce/</link><pubDate>Tue, 30 Oct 2018 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/machine-learning-some-datasets-introduce/</guid><description>&lt;p>简单来说，就是准备所需的数据，包括一些从官方下载的数据，动态生成的测试数据，以及部分经典的函数等。&lt;/p></description></item><item><title>Python Numpy 简介</title><link>https://gohalo.github.io/cn/blog/python-numpy-package-introduce/</link><pubDate>Tue, 09 Oct 2018 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-numpy-package-introduce/</guid><description>&lt;p>NumPy 是 Python 的一个扩充程序库，支持高级大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。内部解除了 Python 的 PIL (全局解释器锁)，同时使用 C/C++ 做扩展，运算效率极好，是大量机器学习框架的基础库。&lt;/p></description></item><item><title>概率论基本概念</title><link>https://gohalo.github.io/cn/blog/math-probability-basic-concept/</link><pubDate>Mon, 01 Oct 2018 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/math-probability-basic-concept/</guid><description/></item><item><title>基本初等函数</title><link>https://gohalo.github.io/cn/blog/math-basic-elementary-function/</link><pubDate>Fri, 03 Aug 2018 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/math-basic-elementary-function/</guid><description>&lt;p>基本初等函数包括了：幂函数、指数函数、对数函数、三角函数、反三角函数五类。&lt;/p></description></item><item><title>Python 新类和旧类区别</title><link>https://gohalo.github.io/cn/blog/python-old-new-style-class/</link><pubDate>Fri, 27 Jul 2018 19:49:38 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-old-new-style-class/</guid><description>&lt;p>在 Python 2.2 版本中引入了新式类 (New Style Class)，所以，通常将在此之前的类称为经典类或者旧类，而在此之后的称为新式类，两者在使用时略有区别。&lt;/p>
&lt;p>这里会简单介绍两者的区别。&lt;/p></description></item><item><title>Python 常用代码</title><link>https://gohalo.github.io/cn/blog/python-some-codes/</link><pubDate>Sun, 22 Jul 2018 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-some-codes/</guid><description/></item><item><title>Python Matplotlib 简介</title><link>https://gohalo.github.io/cn/blog/python-matplotlib-package-introduce/</link><pubDate>Tue, 10 Jul 2018 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-matplotlib-package-introduce/</guid><description>&lt;p>简单来说，Matplotlib 是 Python 中的一个绘图库，包含了大量的工具，几乎可以通过该工具完成你所需要的任何图形，包括散点图、正弦曲线，甚至是三维图形。&lt;/p>
&lt;p>这一工具经常用在数据可视化中，这里简单介绍其使用方法。&lt;/p></description></item><item><title>Python AI 环境准备</title><link>https://gohalo.github.io/cn/blog/python-ai-environment-prepare/</link><pubDate>Wed, 09 May 2018 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-ai-environment-prepare/</guid><description>&lt;p>目前大部分的 AI 相关工具包、框架等都是通过 Python 实现的，包括了常用的 Numpy、Scikit-Learn、TensorFlow、PyTorch 等等。&lt;/p>
&lt;p>所以，这里搭建的环境主要也就是 Python 相关的，另外还有基本的 MNIST 数据集。&lt;/p></description></item><item><title>Python Seaborn 简介</title><link>https://gohalo.github.io/cn/blog/python-seaborn-package-introduce/</link><pubDate>Wed, 09 May 2018 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-seaborn-package-introduce/</guid><description>&lt;p>Seaborn 是一个基于 matplotlib 的可视化库，提供了一个更上层的 API 封装，从而可以更容易的绘制图形。&lt;/p></description></item><item><title>Python C</title><link>https://gohalo.github.io/cn/blog/python-c-bind-introduce/</link><pubDate>Tue, 30 Jan 2018 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-c-bind-introduce/</guid><description/></item><item><title>Python Pandas 简介</title><link>https://gohalo.github.io/cn/blog/python-pandas-package-introduce/</link><pubDate>Thu, 04 Jan 2018 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-pandas-package-introduce/</guid><description>&lt;p>Pandas 是一个基于 NumPy 的工具，主要是为了解决数据分析任务，包括了一些标准的数据模型，提供了高效地操作大型数据集所需的工具。&lt;/p></description></item><item><title>NeoVim/Vim 按键映射</title><link>https://gohalo.github.io/cn/blog/vim-tips-keymap/</link><pubDate>Thu, 30 Nov 2017 18:39:17 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/vim-tips-keymap/</guid><description>&lt;p>使用 NeoVim/Vim 的主要就是为了可以减少鼠标的使用，而且提供了极高的配置，按键映射主要还是为了适合自己的操作习惯。&lt;/p></description></item><item><title>Python 三方库 requests</title><link>https://gohalo.github.io/cn/blog/python-third-package-requests/</link><pubDate>Thu, 30 Nov 2017 18:39:17 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-third-package-requests/</guid><description>&lt;p>这是一个简单但是非常优雅的 HTTP 库，对于一些常见的 API 调用非常简单实用。&lt;/p></description></item><item><title>50 行 Python 实现 Bitcoin</title><link>https://gohalo.github.io/cn/blog/bitcoin-50-python-lines/</link><pubDate>Mon, 07 Aug 2017 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/bitcoin-50-python-lines/</guid><description>&lt;p>区块链近年来被越炒越热，是一串使用密码学方法相关联产生的数据块，每一个数据块中包含了一次比特币网络交易的信息，用于验证其信息的有效性和生成下一个区块。&lt;/p>
&lt;p>而比特币的交易过程中，就使用了区块链技术。&lt;/p></description></item><item><title>似然函数</title><link>https://gohalo.github.io/cn/blog/math-statistics-likelihood-function/</link><pubDate>Tue, 01 Aug 2017 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/math-statistics-likelihood-function/</guid><description>&lt;p>在统计学中，通常所要观测的样本集很大 (全国身高)，很难完成这么多的样本数据采集，这时就需要用到估计了。&lt;/p>
&lt;p>一般会抽取样本，然后通过统计样本 (Sample) 去估计总体 (Population)，也就是参数估计。&lt;/p>
&lt;p>参数估计中的最大似然估计，有点难理解，这里简单介绍。&lt;/p></description></item><item><title>Python DocString 简介</title><link>https://gohalo.github.io/cn/blog/python-basic-syntax-docstring-introduce/</link><pubDate>Mon, 05 Jun 2017 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-basic-syntax-docstring-introduce/</guid><description>&lt;p>也就是 Python 的文档字符串，提供了一种很方便的方式将文档与 modules、functions、classes 以及 methods ；该字符串是在对象的第一个语句中定义，然后通过 &lt;code>__doc__&lt;/code> 引用。&lt;/p></description></item><item><title>Python 杂项</title><link>https://gohalo.github.io/cn/blog/python-tips/</link><pubDate>Mon, 05 Jun 2017 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-tips/</guid><description>&lt;p>在此记录与 Python 相关的乱七八糟的东西。&lt;/p></description></item><item><title>Python ORM 简介</title><link>https://gohalo.github.io/cn/blog/python-orm-introduce/</link><pubDate>Tue, 23 May 2017 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-orm-introduce/</guid><description>&lt;p>很多数据库都可以通过相应的库，直接编写原生的 SQL 语句进行操作，实现增删改查，但是如果功能比较复杂，就会导致重用性不强。&lt;/p>
&lt;p>Object Relational Mapping, ORM 建立在数据库 API 之上，使用关系对象映射进行数据库操作；简言之，将对象转换成 SQL，然后使用数据 API 执行 SQL 并获取执行结果。&lt;/p></description></item><item><title>Python2 VS. Python3</title><link>https://gohalo.github.io/cn/blog/python-version2-vs-version3-introduce/</link><pubDate>Thu, 23 Feb 2017 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-version2-vs-version3-introduce/</guid><description/></item><item><title>Python 字典对象实现</title><link>https://gohalo.github.io/cn/blog/python-dictioniary-string-hash-table/</link><pubDate>Sun, 08 Jan 2017 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-dictioniary-string-hash-table/</guid><description>&lt;p>在 Python 中有一个字典，可以看作是一个 Key Value 对，其代码是通过哈希表实现，也就是说，字典是一个数组，而数组的索引是键经过哈希函数处理后得到的。&lt;/p>
&lt;p>Python 字典是用哈希表 (hash table) 实现，哈希表是一个数组，它的索引是对键运用哈希函数计算求得的。&lt;/p>
&lt;p>这里简单结合 Python 中 Hash 函数的实现。&lt;/p></description></item><item><title>Ansible 简介</title><link>https://gohalo.github.io/cn/blog/python-ansible/</link><pubDate>Sat, 13 Feb 2016 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-ansible/</guid><description>&lt;p>Ansible 是一个配置管理工具，当然同类的产品还有 Puppet、Chef、SaltStack 等，不过上述的三者都是基于服务端+客户端的模式，而 Ansible 相对来说要简单的多，无需安装服务端和客户端，只需要有 ssh 即可，而且使用简单。&lt;/p></description></item><item><title>Python 异步任务队列</title><link>https://gohalo.github.io/cn/blog/python-async-queue/</link><pubDate>Wed, 10 Feb 2016 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-async-queue/</guid><description>&lt;p>Python 中有很多的调度系统，这里简单介绍一下常用的，例如 APScheduler、Redis Queue、Celery 等。&lt;/p></description></item><item><title>Python 虚拟环境详解</title><link>https://gohalo.github.io/cn/blog/python-virtual-environments/</link><pubDate>Mon, 30 Nov 2015 20:19:36 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-virtual-environments/</guid><description>&lt;p>Python 的虚拟环境用来创建一个相对独立的执行环境，尤其是一些依赖的三方包，最常见的如不同项目依赖同一个但是不同版本的三方包，而且，在虚拟环境中的安装包不会影响到系统的安装包。&lt;/p>
&lt;p>不过，其具体的工作原理是怎样的，这里详细介绍。&lt;/p></description></item><item><title>Python 时间操作</title><link>https://gohalo.github.io/cn/blog/python-time-handle/</link><pubDate>Fri, 26 Jun 2015 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-time-handle/</guid><description>&lt;p>Python 与时间处理相关的提供了 datetime、time、calendar 三个模块，而且还有三方模块 pytz 可以使用；另外，datetime 模块中又存在 datetime、time 类，不要与相应的模块混淆。&lt;/p></description></item><item><title>Python 动态执行</title><link>https://gohalo.github.io/cn/blog/python-eval/</link><pubDate>Tue, 16 Jun 2015 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-eval/</guid><description>&lt;p>在 Python 中，允许通过 exec 和 eval 执行以字符串形式表示的代码片段，这体现了动态语言的特性，可以让代码变得更灵活。实际上，在使用 exec 和 eval 时，也是需要进行编译的，没错是 &amp;ldquo;编译&amp;rdquo;。&lt;/p>
&lt;p>只是与 C 需要编译成机器码不同，CPython 需要编译成字节码 (ByteCode) 。&lt;/p>
&lt;p>接下来，我们看看 Python 的动态执行相关内容。&lt;/p></description></item><item><title>Python 模块简介</title><link>https://gohalo.github.io/cn/blog/python-modules-introduce/</link><pubDate>Sun, 07 Jun 2015 21:39:22 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-modules-introduce/</guid><description>在 Python 解析器中，每次重新进入，之前定义的函数、变量等都会丢失，所以，通常是将代码保存在文件中运行，而随着功能增加，文件会变得越来越大，为了方便维护，会将其拆分成多个文件。
其它语言也有类似的问题，Python 将其称为模块 (Module) ，通过模块可以定义函数、类、变量等，从而更有逻辑地组织 Python 代码。
这里介绍模块的引入、搜索、制作等一些常见的问题。
简介 # 每个文件都是一个模块 (module)，其模块名就是对应的文件名，在模块内运行时，可以通过全局变量 __name__ 获取，最常见的就是 __main__ 的判断，也就是是否为主 Pyhton 脚本。
if __name__ == &amp;#34;__main__&amp;#34;: print(&amp;#34;Hello World&amp;#34;) 也就是该文件可以作为模块引入其它代码中，也可以作为一个独立的执行文件运行，而判断的逻辑就是这里的 if __name__ == &amp;quot;__main__&amp;quot; 语句，直接调用脚本时，对应 __name__ 变量保存的是 __main__ ，如果是引入的模块，则是模块名称。
模块导入 # 可以通过 import 关键字导入模块，也就是添加到当前的命名空间中，根据不同的使用场景，有如下的几种方式。
# 直接导入模块，可以通过math.cos()调用 import math # 导入模块中的函数，这样可以直接调用cos sin，不过很容易被覆盖 from math import cos, sin # 导入模块的所有符号 from math import * # 导入模块的符号，为了防止名字覆盖，将其重命名 from math import pi as PI 导入的模块会保存在 sys.modules 中，这是一个字典，如果多次导入第二次实际不会有加载的动作。</description></item><item><title>Python 的垃圾回收</title><link>https://gohalo.github.io/cn/blog/python-garbage-collection/</link><pubDate>Sun, 07 Jun 2015 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-garbage-collection/</guid><description>&lt;p>Python 带有自动垃圾回收机制，但是它真的能处理所有的垃圾回收问题吗？ 是不是有了自动垃圾回收，就不用再担心内存泄露了呢？ 为什么经常会看到文章说，在实现自己的类时，不要使用 &lt;code>__del__()&lt;/code> ？&lt;/p>
&lt;p>很多当代的语言都实现了垃圾回收机制，包括 Java、Ruby、Lua、Go等，从而将众码农从内存管理中释放出来，那么 Python 的垃圾回收是怎么实现的呢？&lt;/p>
&lt;p>这篇文章将详细介绍 Python 垃圾回收的使用方法，包括示例以及相关的源码分析。&lt;/p></description></item><item><title>Greenlet Gevent</title><link>https://gohalo.github.io/cn/blog/python-gevent-greenlet/</link><pubDate>Thu, 04 Sep 2014 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-gevent-greenlet/</guid><description>&lt;p>对于服务器端的编程，从多进程，到多线程，再到异步回调，再到现在比较流行的协程的方式。对于 Python 来说，支持多进程；由于存在 GIL，实际对于线程会有性能影响。&lt;/p>
&lt;p>对于 Python 协程在此介绍一下 greenlet 的实现。&lt;/p></description></item><item><title>Python 基本环境准备</title><link>https://gohalo.github.io/cn/blog/python-environment-prepare/</link><pubDate>Thu, 17 Oct 2013 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-environment-prepare/</guid><description>&lt;p>与 Java 类似，Python 底层通过一个虚拟机运行，而且已经移植到了多个平台上，也就是，需要根据不同的平台安装虚拟机，实际上最主要的就是 python 可执行文件。&lt;/p>
&lt;p>现在大多数安装的都是 CPython ，也就是 C 语言实现的 Python ，通常，直接使用安装包安装即可。&lt;/p>
&lt;p>这里详细介绍如何安装环境，使用虚拟环境等等。&lt;/p></description></item><item><title>【专题】Python 编程语言</title><link>https://gohalo.github.io/cn/blog/topic-language-python/</link><pubDate>Sun, 17 Oct 2010 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-language-python/</guid><description>&lt;p>Python 是一种解释型语言，提供了跨平台的支持，可以快速开发一些脚本，随着 AI 的兴起，提供了一些常见的开发框架，这里详解介绍 Python 的使用。&lt;/p></description></item></channel></rss>