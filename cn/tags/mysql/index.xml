<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>mysql on</title><link>https://gohalo.github.io/cn/tags/mysql/</link><description>Recent content in mysql on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 19 May 2021 19:18:25 +0800</lastBuildDate><atom:link href="https://gohalo.github.io/cn/tags/mysql/index.xml" rel="self" type="application/rss+xml"/><item><title>MySQL 日志相关</title><link>https://gohalo.github.io/cn/blog/mysql-log/</link><pubDate>Wed, 19 May 2021 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-log/</guid><description>&lt;p>MySQL 中的日志主要包括了：错误日志、查询日志、慢查询日志、事务日志、二进制日志，在此，介绍下一些常见的配置，以及 BinLog 相关内容。&lt;/p></description></item><item><title>MySQL 基本概念介绍</title><link>https://gohalo.github.io/cn/blog/mysql-basic-introduce/</link><pubDate>Fri, 30 Apr 2021 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-basic-introduce/</guid><description>&lt;p>在此主要介绍下与数据库相关的一些操作，其中有一部分是与 MySQL 相关的功能。&lt;/p></description></item><item><title>MySQL 语法解析</title><link>https://gohalo.github.io/cn/blog/mysql-parser/</link><pubDate>Sat, 21 Nov 2020 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-parser/</guid><description>当服务器接收到一条 SQL 语句时，会经过词法分析、语法分析、语义分析、构造执行树、生成执行计划、计划的执行几个过程。其中，词法语法解析的处理过程根编译原理上的东西基本类似，MySQL 并没有使用 lex 来实现词法分析，但是语法分析用了 yacc。
与之对比的 SQLite 数据库，其词法分析器是手工写的，语法分析器由 Lemon 生成。在此介绍其在 MySQL 中的使用。
源码解析 # Linux 一般来说，词法和语法解析都是通过 Flex 与 Bison 完成的；而在 MySQL 中，词法分析使用自己的程序，而语法分析使用的是 Bison；Bison 会根据 MySQL 定义的语法规则，进行语法解析。
完成语法解析后，会将解析结果生成的数据结构保存在 struct LEX 中，该结构体在 sql/sql_lex.h 文件中定义。
struct LEX: public Query_tables_list { friend bool lex_start(THD *thd); SELECT_LEX_UNIT *unit; ///&amp;lt; Outer-most query expression /// @todo: select_lex can be replaced with unit-&amp;gt;first-select() SELECT_LEX *select_lex; ///&amp;lt; First query block SELECT_LEX *all_selects_list; ///&amp;lt; List of all query blocks private: /* current SELECT_LEX in parsing */ SELECT_LEX *m_current_select; .</description></item><item><title>DBDeployer 常用命令</title><link>https://gohalo.github.io/cn/blog/mysql-tools-dbdeployer-cheatsheet/</link><pubDate>Wed, 18 Nov 2020 20:01:39 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-tools-dbdeployer-cheatsheet/</guid><description>&lt;p>DBDeployer 是一款十分强大的数据库测试环境部署工具，可实现一键部署不同架构、不同版本的数据库环境，之前已经详细介绍过其使用方法。&lt;/p>
&lt;p>这里将一些常用的命令整理下，已方便查询。&lt;/p></description></item><item><title>详细介绍 DBDeployer 部署工具使用</title><link>https://gohalo.github.io/cn/blog/mysql-tools-dbdeployer-usage/</link><pubDate>Wed, 18 Nov 2020 20:01:39 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-tools-dbdeployer-usage/</guid><description>&lt;p>通过 DBDeployer 可以在本地快速搭建一个强大的测试环境，包括了不同版本、不同架构的数据库环境，例如 MySQL 主从复制、GTID 模式复制、MySQL 组复制等等。&lt;/p>
&lt;p>支持几乎当前所有版本的 MySQL 发行版本，除了官方的，还有 Percona MySQL、MariaDB、MySQL NDB Cluster、Percona XtraDB Cluster 等等，还有 MySQL-Shell 的安装，甚至还有 TiDB ，估计是 TiDB 团队贡献的代码吧。&lt;/p>
&lt;p>这里会详细介绍其使用方法。&lt;/p></description></item><item><title>InnoDB 简单介绍</title><link>https://gohalo.github.io/cn/blog/mysql-innodb-introduce/</link><pubDate>Thu, 08 Oct 2020 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-innodb-introduce/</guid><description>&lt;p>我们知道，在 MySQL 中，存储引擎是通过插件实现的，从而使得添加存储引擎时相对来说比较简单，而且目前支持多种类型的存储引擎。&lt;/p>
&lt;p>InnoDB 目前基本上已经是实时上的没人存储引擎了，现在可以支持外键、行锁、MVCC、支持标准的 4 种隔离级别等等。实际上，这也就意味着 InnoDB 是相当复杂的一个存储引擎。&lt;/p>
&lt;p>在此，仅简单介绍下。&lt;/p></description></item><item><title>InnoDB 崩溃恢复</title><link>https://gohalo.github.io/cn/blog/mysql-innodb-crash-recovery/</link><pubDate>Thu, 03 Sep 2020 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-innodb-crash-recovery/</guid><description>&lt;p>如果 InnoDB 没有正常关闭，会在服务器启动的时候执行崩溃恢复 (Crash Recovery)，这一流程比较复杂，涉及到了 redo log、undo log 甚至包括了 binlog 。&lt;/p>
&lt;p>在此简单介绍下 InnoDB 崩溃恢复的流程。&lt;/p></description></item><item><title>MySQL 通讯协议详解</title><link>https://gohalo.github.io/cn/blog/mysql-protocol-details/</link><pubDate>Sun, 08 Dec 2019 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-protocol-details/</guid><description>&lt;p>Client/Server 通讯协议用于客户端链接、代理、主备复制等，支持 SSL、压缩，在链接阶段进行认证，在执行命令时可以支持 Prepared Statements 以及 Stored Procedures 。&lt;/p>
&lt;p>当打算编写数据库代理、中间件、对 MySQL 数据包进行审核时，都需要了解底层的通信协议。在本文中，主要介绍 MySQL 通讯协议相关的内容。&lt;/p></description></item><item><title>MySQL 存储引擎</title><link>https://gohalo.github.io/cn/blog/mysql-storage-engine-plugin/</link><pubDate>Tue, 12 Nov 2019 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-storage-engine-plugin/</guid><description>&lt;p>众所周知，在 MySQL 中很多功能是通过插件实现的，包括了其中的存储引擎。在此简单介绍一下与 MySQL 存储引擎相关的内容，包括了提供的接口，实现方法等。&lt;/p>
&lt;p>在 &lt;a href="https://gohalo.github.io/cn/blog/mysql-plugin/">MySQL 插件&lt;/a> 这篇文章中，已经讨论了与插件相关的内容，包括了编译、加载、使用方法等，同时也包括了存储引擎，详细使用方法可以参考这篇文章。&lt;/p>
&lt;p>在此，仅介绍下 MySQL 中，存储引擎的实现。&lt;/p></description></item><item><title>MySQL 常用工具</title><link>https://gohalo.github.io/cn/blog/mysql-tools/</link><pubDate>Tue, 12 Nov 2019 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-tools/</guid><description>&lt;p>在此介绍一些 MySQL 中常用的工具，包括了 percona-tools、sysbench 等工具。&lt;/p>
&lt;p>接下来我们看看。&lt;/p></description></item><item><title>MySQL 复制源码解析</title><link>https://gohalo.github.io/cn/blog/mysql-replication-sourcecode/</link><pubDate>Fri, 04 Oct 2019 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-replication-sourcecode/</guid><description>&lt;p>MySQL 主从复制通过 binlog 实现，从库通过 dump 协议来交互数据的，binlog 复制的基本逻辑处理单元为 event 。&lt;/p>
&lt;p>在本文中，我们看看源码是如何执行的。&lt;/p></description></item><item><title>InnoDB Double Write Buffer</title><link>https://gohalo.github.io/cn/blog/mysql-innodb-double-write-buffer/</link><pubDate>Fri, 13 Sep 2019 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-innodb-double-write-buffer/</guid><description>&lt;p>从 Double Write Buffer 来看，貌似是内存中的一块缓存区域，实际上，这里的 buffer 并不只是一块内存区域，而是还包括了存放在表空间中或是单独指定的某个文件中的一个 buffer 。&lt;/p>
&lt;p>在此，介绍下为什么会有 Double Write Buffer，以及其是如何实现的。&lt;/p></description></item><item><title>MySQL 自带工具</title><link>https://gohalo.github.io/cn/blog/mysql-tools-internal/</link><pubDate>Mon, 19 Aug 2019 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-tools-internal/</guid><description>&lt;p>简单介绍下 MySQL 中自带的工具集。&lt;/p></description></item><item><title>InnoDB 存储空间</title><link>https://gohalo.github.io/cn/blog/mysql-innodb-storage/</link><pubDate>Tue, 23 Jul 2019 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-innodb-storage/</guid><description>&lt;p>InnoDB 表空间 (table space) 用来组织存储保存的数据，本文中对表空间管理进行分析。&lt;/p></description></item><item><title>MySQL 复制方式</title><link>https://gohalo.github.io/cn/blog/mysql-replication/</link><pubDate>Wed, 08 May 2019 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-replication/</guid><description>MySQL 的复制包括了多种方式，一种是基于 Binlog 的原生复制方式，除此之外，还包括了通过插件实现的 semi-sync 复制。另外，针对 InnoDB 实现的 xtrabackup 也可以作为一种复制方式。
在本文中，简单介绍下 MySQL 中的复制方式。
简介 # MySQL 在复制时，可以指定要忽略的数据库、需要复制的数据库甚至具体那些表；支持异步复制、半同步复制、同步复制 (NDB Cluster, Group Replication)、延迟复制等模式。
在进行复制的时候，有两种格式： Statement Based、Row Based，也可以是两者的组合，在配置文件中通过 binlog_format 参数进行设置；后面再介绍与格式相关的内容。
其中，MySQL 的复制原理如下图所示。
在主服务器上，会将数据的更新写入到 binary log 中，而备服务器会从该文件中读取对数据的更改；每次备服务器链接到主时，都会分配一个单独的线程进行处理；该线程会将 binlog 产生的事件发送到备服务器。
通常来说，主服务器会直接从缓存中读取 binlog ，所以不会对磁盘造成压力；但是，如果读取的数据是半小时，甚至更长事件之前的数据，那么就会不可避免的发生磁盘 IO 。
备服务器 # 在备服务器上有两个线程，分别是 IO Thread 以及 SQL Thread 。
IO Thread 线程会从主服务器读取数据，然后保存到本地的日志文件 relay log，该线程当前的状态可以通过 show slave status 查看。
SQL thread 会读取本地的 relay log，然后将相应的语句写入到数据库。
延迟复制 # 当发生延迟复制 (Replication Lag) 时，通常是由于 SQL 线程延迟导致的，当然，最好是通过 show slave status 查看两个线程的状态。如果是 IO 线程导致，最好是打开压缩协议，减小网络 IO 的消耗量。</description></item><item><title>MySQL 插件详解</title><link>https://gohalo.github.io/cn/blog/mysql-plugin/</link><pubDate>Tue, 12 Mar 2019 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-plugin/</guid><description>&lt;p>在 MySQL 中，为了提高其灵活性，很多的功能都是通过插件来实现的，常见的比如 semi-sync、存储引擎、登陆认证等等。因为 MySQL 是 C/C++ 实现的，对于插件来说实际为动态链接库，保存在 plugin_dir 变量对应的目录下。&lt;/p>
&lt;p>在此介绍一下 MySQL 的插件实现。&lt;/p></description></item><item><title>InnoDB Checkpoint</title><link>https://gohalo.github.io/cn/blog/mysql-innodb-checkpoint/</link><pubDate>Fri, 22 Feb 2019 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-innodb-checkpoint/</guid><description>&lt;p>如果 redo log 可以无限地增大，同时缓冲池也足够大，是不是就意味着可以不将缓冲池中的脏页刷新回磁盘上？宕机时，完全可以通过 redo log 来恢复整个数据库系统中的数据。&lt;/p>
&lt;p>显然，上述的前提条件是不满足的，这也就引入了 checkpoint 技术。&lt;/p>
&lt;p>在这篇文章里，就简单介绍下 MySQL 中的实现。&lt;/p></description></item><item><title>ProxySQL 简单介绍</title><link>https://gohalo.github.io/cn/blog/proxysql-basic-introduce/</link><pubDate>Fri, 11 Jan 2019 21:18:34 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/proxysql-basic-introduce/</guid><description>&lt;p>一个强大灵活的 MySQL 代理层，支持读写分离、Query 路由、配置动态加载、故障切换等等。&lt;/p></description></item><item><title>MySQL GTID 简介</title><link>https://gohalo.github.io/cn/blog/mysql-gtid/</link><pubDate>Mon, 08 Oct 2018 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-gtid/</guid><description>&lt;p>全局事务 ID (Global Transaction ID, GTID) 是用来强化数据库在主备复制场景下，可以有效保证主备一致性、提高故障恢复、容错能力。&lt;/p>
&lt;p>接下来，看看 GTID 是如何实现的，以及如何使用。&lt;/p></description></item><item><title>MySQL 时间相关介绍</title><link>https://gohalo.github.io/cn/blog/mysql-basic-time/</link><pubDate>Sat, 15 Sep 2018 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-basic-time/</guid><description>&lt;p>简单介绍 MySQL 中与时间相关的概念。&lt;/p></description></item><item><title>MySQL 组复制</title><link>https://gohalo.github.io/cn/blog/mysql-group-replication/</link><pubDate>Thu, 09 Aug 2018 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-group-replication/</guid><description>&lt;p>MySQL 当前存在异步复制、半同步复制，在 5.7.17 引入了组复制模式，这是基于分布式一致性算法 (Paxos 协议的变体) 实现。&lt;/p>
&lt;p>一个组允许部分节点挂掉，只要保证多数节点仍然存活并且相互之间可以正常通讯，那么这个组仍然可以对外提供服务，是目前一种被分布式系统广泛使用的技术。&lt;/p>
&lt;p>如下，仅简单介绍如何使用。&lt;/p></description></item><item><title>MySQL 链接方式</title><link>https://gohalo.github.io/cn/blog/mysql-connection/</link><pubDate>Sun, 22 Jul 2018 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-connection/</guid><description>&lt;p>与 Oracle 或者 Postgre 不同，MySQL 采用的是线程模型，在这里介绍通过 socket 链接到服务器之后，线程与链接直接是怎么处理的。&lt;/p></description></item><item><title>MySQL 杂项</title><link>https://gohalo.github.io/cn/blog/mysql-tips/</link><pubDate>Wed, 23 May 2018 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-tips/</guid><description>&lt;p>简单记录下 MySQL 常见的一些操作。&lt;/p></description></item><item><title>MySQL 执行简介</title><link>https://gohalo.github.io/cn/blog/mysql-executor/</link><pubDate>Mon, 21 May 2018 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-executor/</guid><description>&lt;p>最后是 MySQL 的执行。&lt;/p></description></item><item><title>MySQL 启动脚本</title><link>https://gohalo.github.io/cn/blog/mysql-mysqld-safe/</link><pubDate>Thu, 08 Mar 2018 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-mysqld-safe/</guid><description>&lt;p>mysqld_safe 是一个 shell 脚本，通常用来启动 MySQL 服务进程，在这篇文章中，我们看下该脚本具体做了什么。&lt;/p></description></item><item><title>MySQL 高可用 MHA</title><link>https://gohalo.github.io/cn/blog/mysql-replication-mha/</link><pubDate>Sat, 20 Jan 2018 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-replication-mha/</guid><description>&lt;p>Master High Availability, MHA 在 MySQL 高可用方面是一个相对成熟的解决方案，能做到在 0~30 秒之内自动完成数据库的故障切换操作，而且能最大程度上保证数据的一致性。&lt;/p>
&lt;p>这里介绍使用配置方法，以及其原理。&lt;/p></description></item><item><title>MySQL RedoLog 简介</title><link>https://gohalo.github.io/cn/blog/mysql-innodb-redo-log/</link><pubDate>Wed, 08 Nov 2017 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-innodb-redo-log/</guid><description>&lt;p>当事务需要修改某条记录时，会先记录到 redo log，在此介绍下其实现。&lt;/p></description></item><item><title>MySQL 半同步复制</title><link>https://gohalo.github.io/cn/blog/mysql-semisync/</link><pubDate>Fri, 20 Oct 2017 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-semisync/</guid><description>&lt;p>MySQL 提供了原生的异步复制，也就是主库的数据落地之后，并不关心备库的日志是否落库，从而可能导致较多的数据丢失。&lt;/p>
&lt;p>从 MySQL5.5 开始引入了一种半同步复制功能，该功能可以确保主服务器和访问链中至少一台从服务器之间的数据一致性和冗余，从而可以减少数据的丢失。&lt;/p>
&lt;p>接下来，我们就简单介绍下 MySQL 中的半同步复制。&lt;/p></description></item><item><title>MySQL 组提交</title><link>https://gohalo.github.io/cn/blog/mysql-group-commit/</link><pubDate>Sun, 01 Oct 2017 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-group-commit/</guid><description>&lt;p>组提交 (group commit) 是为了优化写日志时的刷磁盘问题，从最初只支持 InnoDB redo log 组提交，到 5.6 官方版本同时支持 redo log 和 binlog 组提交，大大提高了 MySQL 的事务处理性能。&lt;/p>
&lt;p>下面将以 InnoDB 存储引擎为例，详细介绍组提交在各个阶段的实现原理。&lt;/p></description></item><item><title>MySQL Crash-Safe 复制</title><link>https://gohalo.github.io/cn/blog/mysql-crash-safe-replication/</link><pubDate>Mon, 18 Sep 2017 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-crash-safe-replication/</guid><description>&lt;p>简单来说，crash-safe replication 是指当主备库任何一个节点发生宕机等意外情况下，服务器重启后主备的数据依然能够保证一致性。&lt;/p>
&lt;p>接下来看看 MySQL 中是如何实现的。&lt;/p></description></item><item><title>详细介绍 MySQL Sandbox 使用</title><link>https://gohalo.github.io/cn/blog/mysql-sandbox/</link><pubDate>Sat, 22 Jul 2017 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-sandbox/</guid><description>&lt;p>MySQL Sandbox 是个用于在本地快速部署 MySQL 服务的工具，包括了不同版本，不同模式的部署，例如单节点、主备部署、一主多备等等；如果配合 &lt;a href="http://gearman.org/">Gearman&lt;/a>，甚至可以完成分布式的部署。&lt;/p>
&lt;p>该程序通常用于测试，是用 Perl 语言编写的，在此，仅简单介绍下如何使用。&lt;/p></description></item><item><title>MySQL CAPI 接口</title><link>https://gohalo.github.io/cn/blog/mysql-capi/</link><pubDate>Fri, 21 Jul 2017 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-capi/</guid><description>&lt;p>在编写 MySQL 客户端程序时，最常见的就是如何连接以及关闭 MySQL，这里需要注意，如果使用不当将会造成内存泄漏。&lt;/p>
&lt;p>这里，简单介绍 MySQL 中如何通过 C 进行编程。&lt;/p></description></item><item><title>MySQL 使用简介</title><link>https://gohalo.github.io/cn/blog/mysql-install-debug/</link><pubDate>Sun, 16 Jul 2017 19:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-install-debug/</guid><description>&lt;p>MySQL 是一款最流行的开源关系型数据库，最初由瑞典的 MySQL AB 公司开发，目前已被 Oracle 收购，现在比较流行的分支包括了 MariaDB 和 Percona。&lt;/p>
&lt;p>现在来看，MySQL 被收购之后，实际上添加了很多不错的特性，解掉了很多之前未解的问题，而现在 MariaDB 离主干的特性越来越远；而 Percona 据说为了保证质量是不接受社区提供的代码的，不过其提供的工具却是极好的^_^&lt;/p>
&lt;p>在此，简单介绍，二进制安装、源码编译安装、单实例以及多实例的启动、常见的调试方法。&lt;/p></description></item><item><title>MySQL Handler 监控</title><link>https://gohalo.github.io/cn/blog/mysql-monitor-handler/</link><pubDate>Fri, 14 Apr 2017 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-monitor-handler/</guid><description>&lt;p>在 MySQL 中有很多的 &lt;code>handler_*&lt;/code> 类型的监控，接下来我们就看看这些监控项。&lt;/p></description></item><item><title>MySQL 关闭过程</title><link>https://gohalo.github.io/cn/blog/mysql-shutdown/</link><pubDate>Wed, 01 Mar 2017 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-shutdown/</guid><description>&lt;p>简单分析下 mysqld 进程关闭的过程，并讨论如何安全地关闭 MySQL 实例。&lt;/p></description></item><item><title>MySQL 监控指标</title><link>https://gohalo.github.io/cn/blog/mysql-monitor/</link><pubDate>Tue, 11 Oct 2016 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-monitor/</guid><description>&lt;p>为了排查问题，对数据库的监控是必不可少的，在此介绍下 MySQL 中的常用监控指标。&lt;/p></description></item><item><title>MySQL 中 localhost 127.0.0.1 区别</title><link>https://gohalo.github.io/cn/blog/mysql-localhost-vs-loopback/</link><pubDate>Fri, 22 Jul 2016 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-localhost-vs-loopback/</guid><description>&lt;p>最近在 MySQL 中新建了一个数据库帐号，然后配置成允许所有 IP 都可以登陆，但是当尝试从本地登陆时竟然报错 &amp;hellip; &amp;hellip; 用户名和密码都是正确的 WTF&lt;/p>
&lt;p>然后仔细研究了下，发现别有天地。&lt;/p></description></item><item><title>MySQL 用户管理</title><link>https://gohalo.github.io/cn/blog/mysql-users/</link><pubDate>Thu, 24 Mar 2016 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-users/</guid><description>&lt;p>MySQL 权限管理系统的主要功能是证实连接到一台给定主机的用户，并且赋予该用户在数据库上的相关权限，在认证的时候是通过用户名+主机名定义。&lt;/p>
&lt;p>在此，简单介绍下 MySQL 的权限管理，以及设置相应的用户管理。&lt;/p></description></item><item><title>MySQL 变量相关</title><link>https://gohalo.github.io/cn/blog/mysql-variables/</link><pubDate>Mon, 09 Nov 2015 22:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-variables/</guid><description>&lt;p>MySQL 通过变量设置来控制不同的行为，以及进行调优，从不同的角度看，定义方式各不相同，例如，如根据能否修改，可以分为动态和静态参数两种，动态参数可以修改，而静态参数是只读。&lt;/p>
&lt;p>在本文中简单介绍下 MySQL 中相关变量的设置，以及源码的实现。&lt;/p></description></item><item><title>InnoDB 隔离级别使用实例</title><link>https://gohalo.github.io/cn/blog/mysql-innodb-isolation-level/</link><pubDate>Sun, 01 Nov 2015 19:58:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-innodb-isolation-level/</guid><description>&lt;p>数据库的事务存在着 ACID 四个属性，而在实际应用场景中，当面临着性能需求时，隔离性往往成为最容易妥协的一个，其实际上就是指数据库在并发事务下的表现。&lt;/p>
&lt;p>在本文章中，详细介绍下 InnoDB 中关于隔离级别的实现。&lt;/p></description></item><item><title>MySQL 备份工具</title><link>https://gohalo.github.io/cn/blog/mysql-backup-tools/</link><pubDate>Tue, 25 Aug 2015 21:18:34 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-backup-tools/</guid><description>&lt;p>为了保证数据安全，都会对硬件做高可用，防止出现单点故障，但是无论如何都无法取代备份，尤其对于数据库中所保存的数据而言。&lt;/p>
&lt;p>在此，介绍一下 MySQL 中常用的备份方法。&lt;/p></description></item><item><title>MySQL 常用资源</title><link>https://gohalo.github.io/cn/blog/mysql-some-reference/</link><pubDate>Thu, 30 Jul 2015 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-some-reference/</guid><description>&lt;p>保存一下经常使用的经典 MySQL 资源。&lt;/p></description></item><item><title>MySQL 代码导读</title><link>https://gohalo.github.io/cn/blog/mysql-skeleton/</link><pubDate>Sat, 02 May 2015 21:18:34 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-skeleton/</guid><description>&lt;p>在 MySQL 的官网上，MySQL 号称是 The World&amp;rsquo;s Most Popular Open Source Database ，既然是开源的，据说又这么牛掰，那不看看源码真有点对不起 MySQL 了。&lt;/p>
&lt;p>不禁想起了 PostgreSQL 号称是 The World&amp;rsquo;s Most Advanced Open Source Database ^_^''&lt;/p>
&lt;p>废话少说，本文简单介绍一下 MySQL 的执行流程。&lt;/p></description></item><item><title>MySQL 安全设置</title><link>https://gohalo.github.io/cn/blog/mysql-security/</link><pubDate>Thu, 30 Apr 2015 22:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-security/</guid><description>&lt;p>很多时候在部署一种产品时，安全性往往是最后考虑的，不过这也带来了很大的风险。&lt;/p></description></item><item><title>MySQL 示例数据库</title><link>https://gohalo.github.io/cn/blog/mysql-sample-database/</link><pubDate>Sun, 12 Apr 2015 18:28:19 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-sample-database/</guid><description>&lt;p>一些简单的数据库示例，可以用于简单演示、测试使用。&lt;/p></description></item><item><title>MySQL 主备数据校验</title><link>https://gohalo.github.io/cn/blog/mysql-replication-pt-table-checksum/</link><pubDate>Tue, 20 Jan 2015 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-replication-pt-table-checksum/</guid><description>&lt;p>由于各种原因，MySQL 主从架构可能会出现数据不一致的情况出现，为此需要对主备复制的数据进行校验。&lt;/p>
&lt;p>在此，简单介绍 Percona-Toolkits 提供的数据校验方式。&lt;/p></description></item><item><title>【专题】MySQL 数据库</title><link>https://gohalo.github.io/cn/blog/topic-database-mysql/</link><pubDate>Thu, 22 Jul 2010 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-database-mysql/</guid><description>&lt;p>MySQL 是一款最流行的开源关系型数据库，最初由瑞典的 MySQL AB 公司开发，目前已被 Oracle 收购，虽然如此，但是仍然在不断的向前发展。&lt;/p>
&lt;p>这里详细介绍概念。&lt;/p></description></item></channel></rss>