<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>program on</title><link>https://gohalo.github.io/cn/tags/program/</link><description>Recent content in program on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 19 Sep 2022 21:15:12 +0800</lastBuildDate><atom:link href="https://gohalo.github.io/cn/tags/program/index.xml" rel="self" type="application/rss+xml"/><item><title>Bash 使用常见错误以及规避措施</title><link>https://gohalo.github.io/cn/blog/bash-pitfalls/</link><pubDate>Mon, 19 Sep 2022 21:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/bash-pitfalls/</guid><description>&lt;p>简单介绍下 Linux 中 Bash 编程所需要注意的内容，以及常见的规避措施。&lt;/p></description></item><item><title>Rust 基本语法</title><link>https://gohalo.github.io/cn/blog/rust-basic-syntax/</link><pubDate>Mon, 19 Sep 2022 21:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-basic-syntax/</guid><description/></item><item><title>Rust 基本介绍</title><link>https://gohalo.github.io/cn/blog/rust-basic-introduce/</link><pubDate>Fri, 16 Sep 2022 21:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-basic-introduce/</guid><description/></item><item><title>Python 包管理机制详解介绍</title><link>https://gohalo.github.io/cn/blog/python-package-management/</link><pubDate>Sun, 20 Dec 2020 19:59:28 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-package-management/</guid><description>&lt;p>Python 中可以通过 PIP 来自动管理依赖包，当然，也可以下载源码或者二进制包，有些源码包需要编译环境，最好直接下载安装二进制包。&lt;/p></description></item><item><title>Bash 命令注入以及预防策略</title><link>https://gohalo.github.io/cn/blog/bash-security-commands-injection/</link><pubDate>Wed, 08 Jul 2020 19:18:35 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/bash-security-commands-injection/</guid><description>&lt;p>所谓的命令注入，简单来说，就是利用任何会调用系统命令的应用，通过构造特殊命令字符串的方式，执行恶意代码。常见的例如 SQL 命令注入、页面命令注入等。&lt;/p>
&lt;p>这里介绍一下 Bash 的命令注入以及预防策略。&lt;/p></description></item><item><title>CMake 使用简介</title><link>https://gohalo.github.io/cn/blog/cmake-basic-introduce/</link><pubDate>Thu, 26 Dec 2019 17:49:24 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/cmake-basic-introduce/</guid><description>&lt;p>在 Linux 中，经常使用 GNU 构建系统，也就是利用脚本和 make 程序在特定平台上构建软件，对于简单的程序来说是可以的，当项目变得复杂之后会很难进行维护。&lt;/p>
&lt;p>而目前在维护 C/C++ 项目时，使用比较多的是 CMake ，这里就详细介绍下 CMake 的使用。&lt;/p></description></item><item><title>Bash 常用技巧整理</title><link>https://gohalo.github.io/cn/blog/bash-some-tips/</link><pubDate>Sat, 19 Oct 2019 23:19:07 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/bash-some-tips/</guid><description>&lt;p>整理一些常见 Bash 的使用技巧，例如 Here Document、特殊字符文件处理、字符集设置等。&lt;/p></description></item><item><title>常用 Bash 脚本</title><link>https://gohalo.github.io/cn/blog/bash-some-useful-scripts/</link><pubDate>Thu, 10 Oct 2019 19:14:07 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/bash-some-useful-scripts/</guid><description>&lt;p>这里总结一些常见的脚本，例如备份、日志清理等等。&lt;/p></description></item><item><title>Linux 可执行文件解析工具</title><link>https://gohalo.github.io/cn/blog/c-linux-executable-binary-parse-tools/</link><pubDate>Sat, 08 Jun 2019 21:19:32 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/c-linux-executable-binary-parse-tools/</guid><description>&lt;p>主要是在如何解析 ELF 格式的文件。&lt;/p></description></item><item><title>Bash 生成随机内容</title><link>https://gohalo.github.io/cn/blog/bash-tips-random-content/</link><pubDate>Fri, 30 Nov 2018 23:30:19 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/bash-tips-random-content/</guid><description>&lt;p>在编写代码时，一般会使用伪随机函数，不过对于安全通讯往往存在风险，Linux 提供了随机生成设备，可以提供基本满足真随机内容。&lt;/p>
&lt;p>这里介绍常见的使用技巧。&lt;/p></description></item><item><title>GoLang HTTP 使用简介</title><link>https://gohalo.github.io/cn/blog/golang-http-webserver-introduce/</link><pubDate>Fri, 27 Apr 2018 18:13:19 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-http-webserver-introduce/</guid><description>&lt;p>除去细节，理解 HTTP 构建的网络应用只要关注客户端和服务端的处理，服务器主要用来接收客户端的请求，然后返回响应，在接收请求并处理的过程中，最重要的莫过于路由 (Router)。&lt;/p>
&lt;p>这里简单介绍如何使用 &lt;code>net/http&lt;/code> 构建 HTTP 请求。&lt;/p></description></item><item><title>Bash 基本语法</title><link>https://gohalo.github.io/cn/blog/bash-basic-syntax/</link><pubDate>Thu, 01 Mar 2018 22:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/bash-basic-syntax/</guid><description>&lt;p>在 Linux 中通过 Bash 与系统进行简单的交互，但是，通常可能会有一些负责的逻辑进行处理，这就涉及到了 Bash 的编程，实际上就是通过命令行以及一些常见的处理逻辑。&lt;/p>
&lt;p>这里简单介绍常见的语法。&lt;/p></description></item><item><title>GoLang 日志模块使用介绍</title><link>https://gohalo.github.io/cn/blog/golang-log-module-introduce/</link><pubDate>Mon, 16 Oct 2017 19:29:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-log-module-introduce/</guid><description>&lt;p>打印日志是最常规的需求，GoLang 的基础库只提供了简单的格式化功能，但是很多基础功能不存在，例如日志级别、文件切割等等。&lt;/p>
&lt;p>这里介绍 Uber 开发的一个日志库 ZAP 。&lt;/p></description></item><item><title>Linux C 网络编程</title><link>https://gohalo.github.io/cn/blog/c-linux-network-socket-program/</link><pubDate>Mon, 21 Aug 2017 17:49:01 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/c-linux-network-socket-program/</guid><description>&lt;p>在 linux 中的网络编程会涉及到很多的细节，这里简单整理常见的问题，例如套接子信息、域名解析等等，有些也可能不怎么常见，以备不时之需。&lt;/p></description></item><item><title>关于 C++ 基本概念介绍</title><link>https://gohalo.github.io/cn/blog/cpp-basic-syntax-introduce/</link><pubDate>Mon, 20 Mar 2017 21:15:10 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/cpp-basic-syntax-introduce/</guid><description>&lt;p>一般会将 C++ 划分为所谓的中级语言，从底层的 C 语言发展而来，提供了比 C 更丰富的特性，而又没有提供类似 Java、Python 等语言的高级特性，所以，介于中间，称之为中级语言。&lt;/p>
&lt;p>随着 C++11 标准的发布，以及更新的 C++0x 标准，C++ 提供的功能越来越完善。&lt;/p>
&lt;p>这里仅简单介绍下基本的概念。&lt;/p></description></item><item><title>C 代码覆盖率</title><link>https://gohalo.github.io/cn/blog/c-coverage-introduce/</link><pubDate>Sun, 13 Nov 2016 17:12:19 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/c-coverage-introduce/</guid><description>&lt;p>我们已经提供了一些测试用例，但是这些测试用例的好坏如何评估？是否已经覆盖了所有的函数？函数中的分支以及边界条件是否都已经覆盖？&lt;/p>
&lt;p>这就需要通过代码覆盖率进行查看，这里简单介绍其使用方法。&lt;/p></description></item><item><title>CMake 常用示例</title><link>https://gohalo.github.io/cn/blog/cmake-some-tips/</link><pubDate>Sun, 16 Oct 2016 19:29:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/cmake-some-tips/</guid><description>&lt;p>整理常用的示例。&lt;/p></description></item><item><title>Bash 基本介绍</title><link>https://gohalo.github.io/cn/blog/bash-basic-introduce/</link><pubDate>Wed, 23 Sep 2015 22:55:32 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/bash-basic-introduce/</guid><description>&lt;p>一些与 Bash 相关的内容，如命令执行顺序、配置文件、通配符、元字符及转义字符等。&lt;/p></description></item><item><title>Bash 命令注释</title><link>https://gohalo.github.io/cn/blog/bash-tips-command-comment/</link><pubDate>Sat, 19 Sep 2015 21:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/bash-tips-command-comment/</guid><description>&lt;p>在通过 &lt;code>man&lt;/code> 查看命令时，可以看到对参数解释时是有大概的固定格式的，这里基本介绍如下。&lt;/p></description></item><item><title>Python 模块简介</title><link>https://gohalo.github.io/cn/blog/python-modules-introduce/</link><pubDate>Sun, 07 Jun 2015 21:39:22 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-modules-introduce/</guid><description>在 Python 解析器中，每次重新进入，之前定义的函数、变量等都会丢失，所以，通常是将代码保存在文件中运行，而随着功能增加，文件会变得越来越大，为了方便维护，会将其拆分成多个文件。
其它语言也有类似的问题，Python 将其称为模块 (Module) ，通过模块可以定义函数、类、变量等，从而更有逻辑地组织 Python 代码。
这里介绍模块的引入、搜索、制作等一些常见的问题。
简介 # 每个文件都是一个模块 (module)，其模块名就是对应的文件名，在模块内运行时，可以通过全局变量 __name__ 获取，最常见的就是 __main__ 的判断，也就是是否为主 Pyhton 脚本。
if __name__ == &amp;#34;__main__&amp;#34;: print(&amp;#34;Hello World&amp;#34;) 也就是该文件可以作为模块引入其它代码中，也可以作为一个独立的执行文件运行，而判断的逻辑就是这里的 if __name__ == &amp;quot;__main__&amp;quot; 语句，直接调用脚本时，对应 __name__ 变量保存的是 __main__ ，如果是引入的模块，则是模块名称。
模块导入 # 可以通过 import 关键字导入模块，也就是添加到当前的命名空间中，根据不同的使用场景，有如下的几种方式。
# 直接导入模块，可以通过math.cos()调用 import math # 导入模块中的函数，这样可以直接调用cos sin，不过很容易被覆盖 from math import cos, sin # 导入模块的所有符号 from math import * # 导入模块的符号，为了防止名字覆盖，将其重命名 from math import pi as PI 导入的模块会保存在 sys.modules 中，这是一个字典，如果多次导入第二次实际不会有加载的动作。</description></item><item><title>【专题】C/C++ 编程语言</title><link>https://gohalo.github.io/cn/blog/topic-language-c-cpp/</link><pubDate>Fri, 12 Nov 2010 20:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-language-c-cpp/</guid><description>C/CPP # 链接顺序 静态库的不同顺序会影响最终二进制的生成，这里简单介绍。 CPP # 基本概念 介绍基本的语法，例如封装、继承、多态、多线程等等。 Linux 编程 # 在 Linux 环境下会有不同的实现。
网络编程 网络编程中的基本概念，例如结构体、域名解析、IP 地址等。 工具解析 介绍一些在 Linux 常用的二进制解析工具。 Test # 测试主要是为了可以提前发现异常，尤其是当重构时，可以进行完整的验证，所以，就慢慢衍生出了所谓 Test Drived Develop, TDD，而且产生了很多测试方法。
代码覆盖率 使用 GCC 自带的工具可以很简单的统计代码覆盖率。 CMake # 这是一个跨平台的自动编译、打包工具，可以通过简单语句描述编译过程，可以输出对应的 Makefile 文件。
简单介绍 只是简单介绍如何使用，包括了安装、示例等。 常用示例 整理一些常见的使用场景，例如依赖。</description></item><item><title>【专题】Bash 编程语言</title><link>https://gohalo.github.io/cn/blog/topic-language-bash/</link><pubDate>Sun, 19 Sep 2010 21:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-language-bash/</guid><description>&lt;p>Shell 是一个程序，用于用户和操作系统进行交互，相当于是一个命令解析器，Shell 有很多种，其实现有很多细节差异，不过大部分的语法基本相同。&lt;/p>
&lt;p>在 Linux 中默认的就是 Bash 实现，这里介绍其常用语法以及使用技巧。&lt;/p></description></item></channel></rss>