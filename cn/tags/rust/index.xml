<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rust on</title><link>https://gohalo.github.io/cn/tags/rust/</link><description>Recent content in rust on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 09 Nov 2022 20:45:52 +0800</lastBuildDate><atom:link href="https://gohalo.github.io/cn/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust 常用日志三方库介绍</title><link>https://gohalo.github.io/cn/blog/rust-third-log/</link><pubDate>Wed, 09 Nov 2022 20:45:52 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-third-log/</guid><description>&lt;p>类似于 JAVA 中的 &lt;code>slf4j&lt;/code> 库，Rust 中对应了 &lt;code>log&lt;/code> 库，其提供了基本的标准接口，由官方进行维护，这里简单介绍。&lt;/p></description></item><item><title>Cargo 包管理工具</title><link>https://gohalo.github.io/cn/blog/rust-cargo-package-management/</link><pubDate>Wed, 26 Oct 2022 22:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-cargo-package-management/</guid><description>&lt;p>Rust 提供了 Cargo 的构建系统和软件包管理器，可以用来构建代码、下载库或依赖项等等，在安装 Rust 时会同时安装 Cargo 相关的程序。&lt;/p>
&lt;p>这里详细介绍 Cargo 的使用方式。&lt;/p></description></item><item><title>Rust 模式匹配详解</title><link>https://gohalo.github.io/cn/blog/rust-syntax-match/</link><pubDate>Thu, 20 Oct 2022 23:05:32 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-syntax-match/</guid><description>&lt;p>在 Rust 中没有 &lt;code>switch&lt;/code> 语句，但是提供了匹配器 &lt;code>matcher&lt;/code>，相比其它语言中的 &lt;code>switch&lt;/code> 要更强大。&lt;/p></description></item><item><title>Rust 常用标准库介绍</title><link>https://gohalo.github.io/cn/blog/rust-standard-library/</link><pubDate>Wed, 19 Oct 2022 21:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-standard-library/</guid><description/></item><item><title>Rust 基本语法</title><link>https://gohalo.github.io/cn/blog/rust-basic-syntax/</link><pubDate>Mon, 19 Sep 2022 21:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-basic-syntax/</guid><description>&lt;p>这里简单介绍基本常用的语法。&lt;/p></description></item><item><title>Rust 中的错误处理</title><link>https://gohalo.github.io/cn/blog/rust-handle-error/</link><pubDate>Fri, 16 Sep 2022 21:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-handle-error/</guid><description/></item><item><title>Rust 基本介绍</title><link>https://gohalo.github.io/cn/blog/rust-basic-introduce/</link><pubDate>Fri, 16 Sep 2022 21:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-basic-introduce/</guid><description/></item><item><title>Rust 结构体详解</title><link>https://gohalo.github.io/cn/blog/rust-syntax-structure-details/</link><pubDate>Thu, 26 Nov 2020 20:49:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-syntax-structure-details/</guid><description>简介 # Rust 中的结构体定义和成员函数实现是分开的，这样成员函数可以根据功能点在不同的文件中实现，从业务逻辑上进行划分。
关联函数 # 有些函数与对象强相关，但是又不需要关联实例对象，例如构造器。
pub struct Rectangle { width: u32, height: u32, } impl Rectangle { pub fn new(width: u32, height: u32) -&amp;gt; Self { Rectangle { width, height } } fn area(&amp;amp;self) -&amp;gt; u32 { self.width * self.height } } fn main() { let rect = Rectangle::new(30, 50); println!(&amp;#34;Height={}, Width={}&amp;#34;, rect.height, rect.width); } 构造器是最常见的，Rust 并没有将 new 作为关键字，但是约定俗成将其作为构造器。因为没有 self 作为参数，也就不需要 rect.area() 这种通过对象的方式访问，函数又与结构体强相关，被称为关联函数，例如 String::from() 也是。
getter # 结构体中成员变量默认是私有的，可以通过 pub 声明为公开，而且 Rust 允许成员变量和成员函数名称相同，这样就可以实现一个简单的 getter 访问器。</description></item></channel></rss>