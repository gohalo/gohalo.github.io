<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rust on</title><link>https://gohalo.github.io/cn/tags/rust/</link><description>Recent content in rust on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 12 Jan 2025 22:28:19 +0800</lastBuildDate><atom:link href="https://gohalo.github.io/cn/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust RPIT AFIT 基本概念介绍</title><link>https://gohalo.github.io/cn/blog/rust-rpit/</link><pubDate>Sun, 12 Jan 2025 22:28:19 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-rpit/</guid><description/></item><item><title>Rust 并行执行库 Rayon 详解</title><link>https://gohalo.github.io/cn/blog/rust-third-rayon/</link><pubDate>Sat, 09 Nov 2024 20:45:52 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-third-rayon/</guid><description/></item><item><title>Datafusion 使用简介</title><link>https://gohalo.github.io/cn/blog/warehouse-datafusion-introduce/</link><pubDate>Wed, 16 Oct 2024 19:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/warehouse-datafusion-introduce/</guid><description>基本上分成了 OLAP Batch Streaming
算子落盘 # 存在 spill_count 指标， spill_record_batches read_spill_as_stream
SQL # SQL 解析依赖 SQLParser 实现，在 datafusion::sql 中将 sqlparser 重新导出，有也就意味着如下两种使用方式相同。
use datafusion::sql::sqlparser::parser::ParserError; use sqlparser::parser::ParserError; 而 DataFusion 是在 SQLParser 基础上的定制化开发，可以根据场景配置不同的方言 Dialect，常见的如 MySQL、PostgreSQL 等。
Plan # LogicalPlan # 逻辑执行计划。
ExecutionPlan # 物理执行计划节点，支持流式、并行读取数据，包含了 Projection Filter Limit 算子，当执行 execute() 方法时，只是将物理执行计划生成 RecordBatchStream 算子，形成数据流算子树，当执行 collect() 操作时才开始真正的数据流动。
会通过 DefaultPhysicalPlanner 生成执行计划，也可以通过实现 PhysicalPlanner 特征扩展。最终会通过 create_physical_plan 方法将逻辑计划转换为物理计划，每个节点是 ExecutionPlan 类型。
执行计划树时，会从根节点开始执行 execute 方法，这里不会开始处理数据，而是将物理算子转换为 RecordBatchStream 类型，只有当执行类似 collect 时才会真正执行。
TableProvider # 用于自定义表或者数据源，其中核心的是 scan 函数</description></item><item><title>Rust 高级语法之 PhantomData</title><link>https://gohalo.github.io/cn/blog/rust-advanced-phantomdata/</link><pubDate>Thu, 29 Aug 2024 23:45:55 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-advanced-phantomdata/</guid><description>&lt;p>这个名字很直接，幽灵数据，不过使用时经常会有些疑问。&lt;/p></description></item><item><title>Rust 调用 C 使用示例</title><link>https://gohalo.github.io/cn/blog/rust-ffi-rust-invoke-c/</link><pubDate>Mon, 24 Jun 2024 19:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-ffi-rust-invoke-c/</guid><description>&lt;p>简单介绍 Rust 调用 C 常用的示例代码。&lt;/p></description></item><item><title>C 调用 Rust 使用示例</title><link>https://gohalo.github.io/cn/blog/rust-ffi-c-invoke-rust/</link><pubDate>Thu, 20 Jun 2024 19:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-ffi-c-invoke-rust/</guid><description>&lt;p>整理 C 调用 Rust 时需要注意的事项。&lt;/p></description></item><item><title>Rust 设计模式</title><link>https://gohalo.github.io/cn/blog/rust-design-pattern/</link><pubDate>Fri, 19 Apr 2024 20:19:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-design-pattern/</guid><description/></item><item><title>Rust Pin Unpin 使用介绍</title><link>https://gohalo.github.io/cn/blog/rust-pin-introduce/</link><pubDate>Mon, 26 Feb 2024 20:19:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-pin-introduce/</guid><description/></item><item><title>Rust Java JNI 调用简介</title><link>https://gohalo.github.io/cn/blog/rust-java-binding-jni/</link><pubDate>Fri, 26 Jan 2024 20:39:48 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-java-binding-jni/</guid><description>&lt;p>JNI 是 Java 提供的一套与其它语言相互调用的标准，主要是 C 语言，所以，从理论上只要支持 C ABI 的语言都可以和 Java 语言相互调用，而 Rust 就是其中之一。&lt;/p></description></item><item><title>Rust Tokio 简介</title><link>https://gohalo.github.io/cn/blog/rust-async-tokio-introduce/</link><pubDate>Sat, 16 Dec 2023 20:45:52 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-async-tokio-introduce/</guid><description>&lt;p>Tokio 是当前 Rust 异步编程使用最广泛的多线程解决方案，除了异步运行态，还包括了各种周边的实现，例如 HTTP 实现 hyper、gRPC 实现 tonic、trace 实现 tracing 等等。&lt;/p></description></item><item><title>Rust 迭代器的生命周期管理</title><link>https://gohalo.github.io/cn/blog/rust-advanced-iterator-lifetime/</link><pubDate>Thu, 26 Oct 2023 19:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-advanced-iterator-lifetime/</guid><description>&lt;p>很多场景下可以通过迭代器简化代码编写。&lt;/p></description></item><item><title>Rust 序列化、反序列化实现</title><link>https://gohalo.github.io/cn/blog/rust-third-serde/</link><pubDate>Mon, 23 Oct 2023 20:45:52 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-third-serde/</guid><description>&lt;p>Serde 是序列化和反序列化 Rust 数据结构的库，支持 JSON、BSON、YAML 等多种常用格式，并且可以自定义序列化和反序列化方式。&lt;/p></description></item><item><title>Rust Trait 详解</title><link>https://gohalo.github.io/cn/blog/rust-advanced-syntax-trait/</link><pubDate>Mon, 16 Oct 2023 20:19:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-advanced-syntax-trait/</guid><description>&lt;p>Rust 中的 Trait 有点像其它语言的接口，不过实际上略有不同。&lt;/p></description></item><item><title>Rust 宏编程详解</title><link>https://gohalo.github.io/cn/blog/rust-advanced-syntax-macro/</link><pubDate>Mon, 16 Oct 2023 20:19:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-advanced-syntax-macro/</guid><description>&lt;p>也可以称为元数据编程，&lt;/p></description></item><item><title>Rust 异步流式编程详解</title><link>https://gohalo.github.io/cn/blog/rust-async-stream-program/</link><pubDate>Sat, 16 Sep 2023 20:19:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-async-stream-program/</guid><description/></item><item><title>Rust 命令行参数解析库</title><link>https://gohalo.github.io/cn/blog/rust-third-clap/</link><pubDate>Sun, 10 Sep 2023 18:39:45 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-third-clap/</guid><description>&lt;p>当使用命令行时，参数管理通常比较复杂，尤其是随着子参数增多，通过 clap 三方库可以很方便进行管理。&lt;/p></description></item><item><title>Rust 生命周期管理</title><link>https://gohalo.github.io/cn/blog/rust-life-time/</link><pubDate>Thu, 15 Jun 2023 20:02:47 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-life-time/</guid><description>&lt;p>所有权 Ownership 是 Rust 的核心功能之一，使得 Rust 无需垃圾回收，却仍然可以保证内存安全。&lt;/p></description></item><item><title>Rust 并发编程简介</title><link>https://gohalo.github.io/cn/blog/rust-concurrency-introduce/</link><pubDate>Sun, 26 Feb 2023 20:19:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-concurrency-introduce/</guid><description>&lt;p>除了常规的多线程并发之外，同时还会介绍一些与 Rust 相关的并发编程技巧。&lt;/p></description></item><item><title>Rust 异步编程简介</title><link>https://gohalo.github.io/cn/blog/rust-async-program-introduce/</link><pubDate>Sun, 26 Feb 2023 20:19:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-async-program-introduce/</guid><description>&lt;p>异步编程是一个并发编程模型，当前大部分语言都已经支持，只是实现方式略有不同。&lt;/p></description></item><item><title>Tokio 源码解析</title><link>https://gohalo.github.io/cn/blog/rust-async-tokio-source-code/</link><pubDate>Sat, 10 Dec 2022 20:02:47 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-async-tokio-source-code/</guid><description>Runtime # 在使用时需要提供异步运行时环境，创建的任务会在这个环境里运行，可以选择单线程或者多线程，而且可以同时存在。对于 IO 类型任务建议使用多线程，但是多线程间的通信会变的复杂，从而加重了线程间切换的开销，可能导致某些场景下性能可能降低。
用户态的协程实现是基于协作时的调度策略，详细可以参考 Making the Tokio scheduler 10x faster 中的介绍。
在代码内部，会通过 scheduler::Handle::current() 获取当前 Handle 实现，相关代码调用逻辑如下。
// runtime/scheduler/mod.rs use crate::runtime::context; impl Handle { pub(crate) fn current() -&amp;gt; Handle { match context::with_current(Clone::clone) { Ok(handle) =&amp;gt; handle, Err(e) =&amp;gt; panic!(&amp;#34;{}&amp;#34;, e), } } } // runtime/context/current.rs pub(crate) fn with_current&amp;lt;F, R&amp;gt;(f: F) -&amp;gt; Result&amp;lt;R, TryCurrentError&amp;gt; where F: FnOnce(&amp;amp;scheduler::Handle) -&amp;gt; R, { match CONTEXT.try_with(|ctx| ctx.current.handle.borrow().as_ref().map(f)) { Ok(Some(ret)) =&amp;gt; Ok(ret), Ok(None) =&amp;gt; Err(TryCurrentError::new_no_context()), Err(_access_error) =&amp;gt; Err(TryCurrentError::new_thread_local_destroyed()), } } 其中 CONTEXT 是一个 TLS 变量，会在 runtime.</description></item><item><title>Rust Chrono</title><link>https://gohalo.github.io/cn/blog/rust-third-chrono/</link><pubDate>Wed, 09 Nov 2022 20:45:52 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-third-chrono/</guid><description/></item><item><title>Rust 常用日志三方库介绍</title><link>https://gohalo.github.io/cn/blog/rust-third-log/</link><pubDate>Wed, 09 Nov 2022 20:45:52 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-third-log/</guid><description>&lt;p>类似于 JAVA 中的 &lt;code>slf4j&lt;/code> 库，Rust 中对应了 &lt;code>log&lt;/code> 库，其提供了基本的标准接口，由官方进行维护，这里简单介绍。&lt;/p></description></item><item><title>Cargo 包管理工具</title><link>https://gohalo.github.io/cn/blog/rust-cargo-package-management/</link><pubDate>Wed, 26 Oct 2022 22:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-cargo-package-management/</guid><description>&lt;p>Rust 提供了 Cargo 的构建系统和软件包管理器，可以用来构建代码、下载库或依赖项等等，在安装 Rust 时会同时安装 Cargo 相关的程序。&lt;/p>
&lt;p>这里详细介绍 Cargo 的使用方式。&lt;/p></description></item><item><title>Rust Iced 使用详解</title><link>https://gohalo.github.io/cn/blog/rust-third-iced/</link><pubDate>Wed, 19 Oct 2022 23:49:58 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-third-iced/</guid><description/></item><item><title>Rust 高级语法</title><link>https://gohalo.github.io/cn/blog/rust-advanced-syntax/</link><pubDate>Thu, 29 Sep 2022 23:45:55 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-advanced-syntax/</guid><description>&lt;p>这里简单介绍基本常用的语法。&lt;/p></description></item><item><title>CrossTerm 使用详解</title><link>https://gohalo.github.io/cn/blog/rust-third-crossterm/</link><pubDate>Mon, 19 Sep 2022 21:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-third-crossterm/</guid><description/></item><item><title>Rust 基本语法</title><link>https://gohalo.github.io/cn/blog/rust-basic-syntax/</link><pubDate>Mon, 19 Sep 2022 21:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-basic-syntax/</guid><description>&lt;p>这里简单介绍基本常用的语法。&lt;/p></description></item><item><title>Rust 字符串详解</title><link>https://gohalo.github.io/cn/blog/rust-string-introduce/</link><pubDate>Mon, 19 Sep 2022 21:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-string-introduce/</guid><description>&lt;p>很多语言中的字符串非常简单，但 Rust 与常规的语言有所区别。&lt;/p></description></item><item><title>Rust 常用特征详解</title><link>https://gohalo.github.io/cn/blog/rust-advanced-some-trait/</link><pubDate>Mon, 19 Sep 2022 21:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-advanced-some-trait/</guid><description/></item><item><title>Rust 智能指针</title><link>https://gohalo.github.io/cn/blog/rust-smart-pointer-introduce/</link><pubDate>Mon, 19 Sep 2022 21:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-smart-pointer-introduce/</guid><description>&lt;p>Rust 中有所有权的概念，常见的赋值、函数传参、函数返回值等场景，都可能会发生所有权的转移，而某些场景下，只是想使用一下，所以就有了引用。&lt;/p></description></item><item><title>Rust 类型转换</title><link>https://gohalo.github.io/cn/blog/rust-type-conversion-cast/</link><pubDate>Mon, 19 Sep 2022 21:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-type-conversion-cast/</guid><description/></item><item><title>Rust 中的错误处理</title><link>https://gohalo.github.io/cn/blog/rust-handle-error/</link><pubDate>Fri, 16 Sep 2022 21:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-handle-error/</guid><description>&lt;p>Rust 中将错误分成了正常的业务错误 Resut 以及崩溃 panic 处理。&lt;/p></description></item><item><title>Rust 模块文件配置</title><link>https://gohalo.github.io/cn/blog/rust-module-introduce/</link><pubDate>Sat, 16 Apr 2022 20:19:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-module-introduce/</guid><description/></item><item><title>Rust 测试</title><link>https://gohalo.github.io/cn/blog/rust-testing-introduce/</link><pubDate>Sat, 16 Apr 2022 20:19:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-testing-introduce/</guid><description>&lt;p>Rust 支持常规的单元测试、集成测试等，甚至还支持文档测试。&lt;/p></description></item><item><title>Rust 模式匹配详解</title><link>https://gohalo.github.io/cn/blog/rust-syntax-match/</link><pubDate>Tue, 29 Mar 2022 23:05:32 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-syntax-match/</guid><description>&lt;p>在 Rust 中没有 &lt;code>switch&lt;/code> 语句，但是提供了匹配器 &lt;code>matcher&lt;/code>，相比其它语言中的 &lt;code>switch&lt;/code> 要更强大。&lt;/p></description></item><item><title>Rust 常用标准库介绍</title><link>https://gohalo.github.io/cn/blog/rust-standard-library/</link><pubDate>Sat, 19 Feb 2022 21:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-standard-library/</guid><description/></item><item><title>Rust 安装部署以及版本管理</title><link>https://gohalo.github.io/cn/blog/rust-basic-introduce/</link><pubDate>Wed, 26 Jan 2022 21:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-basic-introduce/</guid><description/></item><item><title>Rust 与不同语言调用</title><link>https://gohalo.github.io/cn/blog/rust-external-ffi/</link><pubDate>Sat, 18 Sep 2021 20:02:47 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-external-ffi/</guid><description>&lt;p>简单介绍 Rust 和 C 之间的相互代码调用。&lt;/p></description></item><item><title>Rust 内存管理</title><link>https://gohalo.github.io/cn/blog/rust-memory-manage/</link><pubDate>Sat, 18 Sep 2021 20:02:47 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-memory-manage/</guid><description>&lt;p>Rust 中的内存管理跟其它语言基本类似，提供了浅复制和深复制两种方式，使用时略有区别，这里简单介绍。&lt;/p></description></item><item><title>Rust PyO3 使用</title><link>https://gohalo.github.io/cn/blog/rust-python-binding-pyo3/</link><pubDate>Tue, 26 Jan 2021 20:39:48 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-python-binding-pyo3/</guid><description>&lt;p>Python 有强于 Bash 的语法检查，但是，不适合一些高性能的场景，所以，很多时候会作为胶水语言使用。而且，由于 CPython 作为事实标准，使得其兼容 C/C++ 要容易的多，所以，通常高性能场景下会通过 C/C++ 进行重构。&lt;/p>
&lt;p>这里介绍 Python 如何调用 Rust 的实现。&lt;/p></description></item><item><title>Rust 结构体详解</title><link>https://gohalo.github.io/cn/blog/rust-syntax-structure-details/</link><pubDate>Thu, 26 Nov 2020 20:49:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-syntax-structure-details/</guid><description>&lt;p>结构体是 Rust 中最常用的，同样使用起来也相对更加复杂。&lt;/p></description></item><item><title>Rust 迭代器详解</title><link>https://gohalo.github.io/cn/blog/rust-advanced-iterator/</link><pubDate>Mon, 18 Jul 2016 18:49:39 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-advanced-iterator/</guid><description>&lt;p>Rust 中的迭代器 (Iterator) 是一个强大灵活的工具，将数据和处理过程分离，可以简化对数组、Map、链表等的访问操作。实现时，采用惰性求值，有效降低非必要的性能开销。&lt;/p></description></item><item><title>【专题】Rust 编程语言</title><link>https://gohalo.github.io/cn/blog/topic-language-rust/</link><pubDate>Sat, 16 Oct 2010 19:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-language-rust/</guid><description>&lt;p>可以将 Rust 理解为 C 的直接替代品，提供了系统级的性能，而且在很多方面更好，最常提到的就是内存安全，并且可以与遗留 C 代码原生互操作以进行增量替换。&lt;/p></description></item></channel></rss>