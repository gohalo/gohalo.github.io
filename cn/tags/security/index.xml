<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>security on</title><link>https://gohalo.github.io/cn/tags/security/</link><description>Recent content in security on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 27 Nov 2021 20:18:24 +0800</lastBuildDate><atom:link href="https://gohalo.github.io/cn/tags/security/index.xml" rel="self" type="application/rss+xml"/><item><title>GoLang SSH 源码解析</title><link>https://gohalo.github.io/cn/blog/ssh-golang-details/</link><pubDate>Sat, 27 Nov 2021 20:18:24 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/ssh-golang-details/</guid><description>&lt;p>之前的文章已经介绍了简单的示例，这里对部分常用的源码进行解析。&lt;/p></description></item><item><title>Python 通过 Paramiko 访问 SSH 服务</title><link>https://gohalo.github.io/cn/blog/ssh-python-paramiko-examples/</link><pubDate>Thu, 12 Aug 2021 20:28:54 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/ssh-python-paramiko-examples/</guid><description>&lt;p>Paramiko 实现了 SSH2 协议，用于与远程机器建立经过认证和加密后的安全连接，与 SSL 不同的是，SSH 不需要权威机构签署的分层证书，采用分布式的方式管理。&lt;/p></description></item><item><title>Web 权限管理介绍</title><link>https://gohalo.github.io/cn/blog/web-access-control-introduce/</link><pubDate>Thu, 29 Apr 2021 21:15:32 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/web-access-control-introduce/</guid><description/></item><item><title>Linux PAM 认证机制使用详解</title><link>https://gohalo.github.io/cn/blog/linux-security-pam-introduce/</link><pubDate>Tue, 13 Oct 2020 20:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-security-pam-introduce/</guid><description>Linux 通常会通过 login 进程完成登陆，最开始时只是简单的提示用户输入用户名和密码，然后校验用户是否存在、密码是否正确，如果都正常，那么就会直接完成登陆，进入到 Shell 程序运行。
PAM 提供了独立于具体程序配置机制，可以更加灵活的鉴权方案，这里详细介绍其使用方式。
简介 # 通常在用户登陆时，需要有一套的验证授权机制，最开始的时候，这一整套的验证机制是硬编码到程序中的，这样当程序有 bug 或者需要修改验证策略时，只能修改源程序。
为了改善这些问题，人们开始思考其他的方法，也就是所谓的 Pluggable Authentication Modules, PAM 应运而生了。
PAM 提供了一整套的鉴权、授权、密码管理、会话管理机制等，只需要程序支持 PAM 框架，用户就可以在完全不修改程序的条件下，动态修改鉴权机制，例如除了常规的用户名密码登陆，还可以使用指纹、One-Time-Password 等机制。
运行机制 # 如下是一个最常见的 login 示例程序，其中包括了二进制 login 可执行程序，该程序会动态链接 libpam.so 库，该库会读取 /etc/pam.d/login 配置文件，并根据配置文件中的内容，按照顺序生成不同栈。
然后，会根据不同的栈以及配置执行相关的动作。
相关文件 # 在 64 位系统中，与 PAM 相关的文件包含了如下几类：
/usr/lib64/libpam.so* 核心库，使用 PAM 机制的应用会链接到该库上。 /etc/pam.conf /etc/pam.d/* 配置文件，配置内容基本类似，前者为全局配置，通过第一列标识应用程序，而后者则以文件名标识应用程序，结构层次更加明确，也更常见。 /usr/lib64/security/pam_*.so 可以动态加载的模块，在配置文件中可以直接通过文件名引用。 如果一个应用程序 (例如 login) 想使用 PAM 提供的机制，那么需要链接到 libpam.so 库，否则就不支持 PAM 机制，可以通过如下命令查看。
$ ldd /usr/bin/login | grep pam libpam.so.0 =&amp;gt; /lib64/libpam.</description></item><item><title>通过 OpenSSL 制作自签名证书</title><link>https://gohalo.github.io/cn/blog/openssl-self-signed-certificate/</link><pubDate>Sat, 12 Sep 2020 22:20:03 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/openssl-self-signed-certificate/</guid><description>&lt;p>一般来说，在互联网上使用 HTTPS 时，需要向一些官方的 CA 中心申请证书，不过一般来说比较贵。如果只是公司内部使用，那么就可以自己制作证书，当然也可以模拟 CA 的方式管理证书。&lt;/p>
&lt;p>这里详细介绍如何使用 OpenSSL 制作自签名证书，包括了自建 CA 的方式。&lt;/p></description></item><item><title>详细介绍 PKI 以及 CA 基本概念</title><link>https://gohalo.github.io/cn/blog/ssl-public-key-infrastructure/</link><pubDate>Thu, 13 Aug 2020 19:19:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/ssl-public-key-infrastructure/</guid><description>&lt;p>公钥基础设施 (Public Key Infrastructure, PKI) 是目前网络安全建设的基础与核心，而证书认证机构 (Certificate Authority, CA) 更是核心中的核心，其中 CA 最重要的用途就是提供根证书，用来加强服务器和客户端之间信息交互的安全性。&lt;/p>
&lt;p>这里简单介绍一些基本概念。&lt;/p></description></item><item><title>Bash 命令注入以及预防策略</title><link>https://gohalo.github.io/cn/blog/bash-security-commands-injection/</link><pubDate>Wed, 08 Jul 2020 19:18:35 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/bash-security-commands-injection/</guid><description>&lt;p>所谓的命令注入，简单来说，就是利用任何会调用系统命令的应用，通过构造特殊命令字符串的方式，执行恶意代码。常见的例如 SQL 命令注入、页面命令注入等。&lt;/p>
&lt;p>这里介绍一下 Bash 的命令注入以及预防策略。&lt;/p></description></item><item><title>TLS/SSL 通讯协议详解</title><link>https://gohalo.github.io/cn/blog/security-ssl-tls-overview/</link><pubDate>Fri, 27 Mar 2020 21:18:34 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/security-ssl-tls-overview/</guid><description>&lt;p>SSL/TLS 处于传输层 (一般为 TCP) 以及应用层 (常用的 HTTP) 之间，提供了加密 (Encryption)、认证 (Verification)、鉴定 (Identification) 三种功能。&lt;/p>
&lt;p>如下简单介绍其基本概念。&lt;/p></description></item><item><title>TLSv1.3 简介</title><link>https://gohalo.github.io/cn/blog/security-ssl-tlsv13-introduce/</link><pubDate>Sun, 08 Dec 2019 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/security-ssl-tlsv13-introduce/</guid><description>&lt;p>TLS 1.3 是时隔九年对 TLS 1.2 之前版本的新升级，也是迄今为止改动最大的一次。&lt;/p></description></item><item><title>X509 证书内容详细介绍</title><link>https://gohalo.github.io/cn/blog/ssl-x509-certification-details/</link><pubDate>Tue, 07 May 2019 20:08:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/ssl-x509-certification-details/</guid><description>&lt;p>在 X509 标准中，规定了证书包含的信息，同时说明了记录信息的方法，也就是详细的证书格式。&lt;/p>
&lt;p>这里详细介绍其基本概念。&lt;/p></description></item><item><title>TLS/SSL CipherSuite 简介</title><link>https://gohalo.github.io/cn/blog/security-ssl-tls-ciphersuites/</link><pubDate>Mon, 06 May 2019 21:28:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/security-ssl-tls-ciphersuites/</guid><description>&lt;p>直接翻译为加密套件，在 TLS/SSL 中实际上包含了四类，用来完成握手阶段的信息交互，决定了后续信息交互的过程，包括了认证、加解密、密钥交换等所使用的算法。&lt;/p>
&lt;p>这里会简单介绍所支持的算法，以及如何在 OpenSSL 中使用。&lt;/p></description></item><item><title>C 语言使用 SSL</title><link>https://gohalo.github.io/cn/blog/program-c-ssl-tls-basic-introduce/</link><pubDate>Sun, 08 Jul 2018 20:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/program-c-ssl-tls-basic-introduce/</guid><description/></item><item><title>SSO 简介</title><link>https://gohalo.github.io/cn/blog/single-sign-on-sso/</link><pubDate>Tue, 20 Feb 2018 20:52:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/single-sign-on-sso/</guid><description>&lt;p>Single Sign-On, SSO 单点登录，允许在单次登陆之后可以访问其它相关网站，也就是说，其中的一部分核心功能就是验证用户身份，除了上述的认证，同时也会作为用户的跟踪。&lt;/p></description></item><item><title>JWT 简介</title><link>https://gohalo.github.io/cn/blog/golang-json-web-token-jwt/</link><pubDate>Tue, 13 Feb 2018 21:27:20 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-json-web-token-jwt/</guid><description>&lt;p>在程序开发中，用户认证授权是一个绕不过的重难点，以前的开发模式下，cookie 和 session 认证是主流，随着前后端分离的趋势，基于 Token 的认证方式成为主流。&lt;/p>
&lt;p>而 JWT(RFC 7519) 是基于 Token 认证方式的一种机制，是实现单点登录认证的一种有效方法。&lt;/p>
&lt;p>这里详细介绍其设计和使用方式。&lt;/p></description></item><item><title>SSH 常用技巧</title><link>https://gohalo.github.io/cn/blog/ssh-some-tips/</link><pubDate>Mon, 27 Mar 2017 21:18:34 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/ssh-some-tips/</guid><description>&lt;p>简单记录一些常见的 SSH 使用技巧。&lt;/p></description></item><item><title>PGP 简介</title><link>https://gohalo.github.io/cn/blog/security-pgp-introduce/</link><pubDate>Fri, 21 Oct 2016 22:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/security-pgp-introduce/</guid><description>&lt;p>GnuPGP 是一个基于公钥加密体系的加密软件，功能强大，有很快的速度，而且源码是免费的。&lt;/p>
&lt;p>这里简单介绍下 PGP 相关内容。&lt;/p></description></item><item><title>SSH 代理设置</title><link>https://gohalo.github.io/cn/blog/ssh-port-forwarding/</link><pubDate>Tue, 26 Jul 2016 20:28:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/ssh-port-forwarding/</guid><description>&lt;p>通过 ssh 的端口转发或者隧道 (tunneling) 功能，可以实现: A) 加密 SSH Client 端至 SSH Server 端之间的通讯数据；B) 突破防火墙的限制完成一些之前无法建立的 TCP 连接。&lt;/p></description></item><item><title>SSH 基本介绍</title><link>https://gohalo.github.io/cn/blog/ssh-basic-introduce/</link><pubDate>Tue, 26 Jul 2016 20:28:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/ssh-basic-introduce/</guid><description>&lt;p>传统的 telnet、rcp ftp、rlogin、rsh 都是极不安全的，并且会使用明文传送密码，OpenSSH 提供了服务端后台程序和客户端工具，用来加密远程控件和文件传输过程中的数据，并由此来代替原来的类似服务。&lt;/p>
&lt;p>OpenSSH 是 SSH (Secure SHell) 协议的免费开源实现，SSH 协议族可以用来进行远程控制，或在计算机之间传送文件。这里简单介绍下 SSH 和 OpenSSH 的使用。&lt;/p></description></item><item><title>SSH 密钥管理</title><link>https://gohalo.github.io/cn/blog/ssh-keys-manage/</link><pubDate>Tue, 26 Jul 2016 20:28:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/ssh-keys-manage/</guid><description>&lt;p>服务端会保存自己的公私钥，客户端每次链接时会确认是否为上次记录主机。&lt;/p></description></item><item><title>SSH 证书登录介绍</title><link>https://gohalo.github.io/cn/blog/ssh-cert-manage/</link><pubDate>Tue, 26 Jul 2016 20:28:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/ssh-cert-manage/</guid><description>&lt;p>从 OpenSSH 5.4 版本 (2010年) 开始支持 SSH 证书，相比 SSL 中使用的证书来说，SSH 的更为简单，没有证书链只有一个 CA 证书，这样就免去了商业签名授权。&lt;/p></description></item><item><title>DVWA 简介</title><link>https://gohalo.github.io/cn/blog/security-dvwa-introduce/</link><pubDate>Wed, 03 Feb 2016 18:49:39 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/security-dvwa-introduce/</guid><description>&lt;p>DVWA (Damn Vulnerable Web Application) 是用 PHP+MySQL 编写的一套用于漏洞检测和教学的程序，支持多种数据库，包括了 SQL 注入、XSS 等一些常见的安全漏洞。&lt;/p>
&lt;p>详细的内容可以参考官方网站 &lt;a href="http://www.dvwa.co.uk/">www.dvwa.co.uk&lt;/a>，在此暂时仅介绍其环境的安装方法。&lt;/p></description></item><item><title>SELinux 简介</title><link>https://gohalo.github.io/cn/blog/linux-selinux-introduce/</link><pubDate>Sat, 03 Oct 2015 19:38:52 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-selinux-introduce/</guid><description>&lt;p>Security-Enhanced Linux, SELinux 给 Linux 带来的最重要价值是：提供了一个灵活的，可配置的 MAC 机制。包括了内核中的模块，以及用户态的工具，对于用户来说是透明的，只有同时满足了 &amp;ldquo;标准 Linux 访问控制&amp;rdquo; 和 &amp;ldquo;SELinux 访问控制&amp;rdquo; 时，主体才能访问客体。&lt;/p></description></item><item><title>SSH 通讯协议介绍</title><link>https://gohalo.github.io/cn/blog/ssh-protocol-details/</link><pubDate>Thu, 17 Sep 2015 22:58:24 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/ssh-protocol-details/</guid><description>&lt;p>SSH 通讯是基于几个基本协议完成，这里简单介绍。&lt;/p></description></item><item><title>SSH 安全审计</title><link>https://gohalo.github.io/cn/blog/ssh-security-audit/</link><pubDate>Fri, 10 Apr 2015 20:19:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/ssh-security-audit/</guid><description/></item><item><title>libgcrypt 使用</title><link>https://gohalo.github.io/cn/blog/security-libgcrypt-practice/</link><pubDate>Wed, 16 Jul 2014 22:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/security-libgcrypt-practice/</guid><description>&lt;p>libgcrypt 是一个非常成熟的加密算法库，也是著名的开源加密软件 GnuPG 的底层库，支持多种对称、非对称加密算法，以及多种 Hash 算法。&lt;/p>
&lt;p>接下来，看看该库的使用方式。&lt;/p></description></item><item><title>HTTPS 协议详解</title><link>https://gohalo.github.io/cn/blog/https-introduce/</link><pubDate>Sat, 07 Jun 2014 22:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/https-introduce/</guid><description>&lt;p>我们知道 HTTP 采用的是明文传输，而在互联网中，比如要在淘宝买个东西，使用支付宝转个帐，必须要保证这些信息只有客户端和服务器才知道的，也就是通过 HTTPS 协议。&lt;/p>
&lt;p>接下来，我们就看看 HTTPS 协议是如何实现的。&lt;/p></description></item><item><title>文件完整性检查</title><link>https://gohalo.github.io/cn/blog/file-integrity-check/</link><pubDate>Tue, 03 Jun 2014 19:38:52 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/file-integrity-check/</guid><description>&lt;p>通常为了防止文件的内容被修改，如一个文件号称是包含了补丁的文件，却被人加入了木马；同时也可以用来保证文件的完整性，防止文件被损坏。&lt;/p>
&lt;p>当然，一些 hash 算法可能会被破解，所以一些网站则提供了多种完整性校验方法。&lt;/p></description></item><item><title>加密算法简介</title><link>https://gohalo.github.io/cn/blog/security-encryption-introduce/</link><pubDate>Sun, 01 Jun 2014 19:38:52 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/security-encryption-introduce/</guid><description>&lt;p>开放网络中数据传输的安全性一直是一个热门的话题，特别是电子商务兴起的今天，各种攻击欺骗手段更是层出不穷，安全的网络传输需求愈显重要，而这就是所谓的密码学涉及的内容。&lt;/p>
&lt;p>通过一些加密算法，保证网络上数据传输的安全性，在此介绍一些常见的加密算法及其使用场景等。&lt;/p></description></item><item><title>【专题】Linux 安全相关</title><link>https://gohalo.github.io/cn/blog/topic-linux-security/</link><pubDate>Sat, 27 Mar 2010 21:18:34 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-linux-security/</guid><description>&lt;p>介绍 Linux 中与安全相关的内容，例如 SSH、SELinux 等，当然，也包括了一些安全相关基本的概念，例如加密算法、TLS 等等，这里作为一个专题介绍一些常见概念。&lt;/p></description></item></channel></rss>