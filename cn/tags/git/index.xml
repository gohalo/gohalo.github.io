<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>git on</title><link>https://gohalo.github.io/cn/tags/git/</link><description>Recent content in git on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 12 Oct 2022 23:05:42 +0800</lastBuildDate><atom:link href="https://gohalo.github.io/cn/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>git 开源代码提交流程</title><link>https://gohalo.github.io/cn/blog/git-tips-opensource-workflow/</link><pubDate>Wed, 12 Oct 2022 23:05:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-tips-opensource-workflow/</guid><description>&lt;p>这里以 GitHub 上的工作流程为例，讲解如何维护、提交代码。&lt;/p></description></item><item><title>git 换行符配置</title><link>https://gohalo.github.io/cn/blog/git-tips-crlr/</link><pubDate>Wed, 12 Jan 2022 23:05:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-tips-crlr/</guid><description>&lt;p>Windows 和 Linux/Mac 平台上的换行符不同，通过 git 可以自动进行设置。&lt;/p></description></item><item><title>gogs 使用简介</title><link>https://gohalo.github.io/cn/blog/git-gogs-introduce/</link><pubDate>Thu, 26 Aug 2021 21:19:45 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-gogs-introduce/</guid><description>&lt;p>Gogs 的功能类似于 GitHub 或者 GitLab ，不过相比来说是一款极易搭建的 Git 服务，其目标是打造一个最简单、最快速和最轻松的方式搭建自助 Git 服务，通过 Go 语言开发，使得 Gogs 能够通过独立二进制分发，支持平台包括了 Linux、Mac OS、Windows 以及 ARM 。&lt;/p></description></item><item><title>git 基本概念介绍</title><link>https://gohalo.github.io/cn/blog/git-basic-introduce/</link><pubDate>Thu, 16 Jul 2020 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-basic-introduce/</guid><description>&lt;p>起初 git 是 Linus Torvalds 为了便于管理 Linux 内核开发而开发的一个开放源码的版本控制软件，这是一个开源的分布式版本控制系统，可以高效地处理从很小到非常大的项目版本管理。&lt;/p>
&lt;p>简单来说，如果你严肃对待编程，就必定会使用&amp;quot;版本管理系统&amp;quot; (Version Control System)。&lt;/p></description></item><item><title>git 子模块使用</title><link>https://gohalo.github.io/cn/blog/git-tips-submodule/</link><pubDate>Sun, 16 Feb 2020 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-tips-submodule/</guid><description>&lt;p>开发过程中经常会遇到依赖另外的项目，多数情况可能就是三方库，但是几个独立的项目，通过子模块可以将多个项目关联。&lt;/p></description></item><item><title>git 常见问题整理</title><link>https://gohalo.github.io/cn/blog/git-faqs/</link><pubDate>Mon, 01 Apr 2019 18:38:55 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-faqs/</guid><description>&lt;p>整理下常见的 git 问题。&lt;/p></description></item><item><title>git 对象简介</title><link>https://gohalo.github.io/cn/blog/git-internal-object-introduce/</link><pubDate>Mon, 21 Jan 2019 19:38:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-internal-object-introduce/</guid><description>&lt;p>git 作为当前最流行的版本管理工具，简单、易用，而且功能强大，不过其依托的是一组极为简洁的数据结构。&lt;/p>
&lt;p>这里简单介绍其核心概念。&lt;/p></description></item><item><title>git 多个远端仓库</title><link>https://gohalo.github.io/cn/blog/git-tips-multi-remote-repos/</link><pubDate>Wed, 26 Dec 2018 19:38:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-tips-multi-remote-repos/</guid><description>&lt;p>Git 作为一个分布式的仓库，可以配置多个远端，这里介绍如何将一个本地仓库同步到不同的远端仓库中，最常见的是开源代码时对应了不同仓库地址。&lt;/p></description></item><item><title>git lfs 简介</title><link>https://gohalo.github.io/cn/blog/git-large-file-storage-introduce/</link><pubDate>Sat, 01 Dec 2018 19:38:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-large-file-storage-introduce/</guid><description>&lt;p>GIT 代码管理是基于文本文件行的，那么，对于二进制文件来说，当保存每次提交的改动时，会保存整个文件，会导致仓库快速增大，包括了网络带宽。&lt;/p>
&lt;p>在 2015.04 GitHub 推出了 Large File Storage, LFS 将标记的大文件保存在另外的仓库，而主仓库仅保留其轻量级指针。&lt;/p></description></item><item><title>git 统计工具</title><link>https://gohalo.github.io/cn/blog/git-some-statistic-commands-and-tools-introduce/</link><pubDate>Thu, 13 Sep 2018 19:38:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-some-statistic-commands-and-tools-introduce/</guid><description>&lt;p>git 应该是目前使用最为广泛的代码管理仓库了，提供了非常简单的命令行工具，通过这些命令行可以进行一些常见的代码统计。&lt;/p>
&lt;p>这里简单介绍一些常用的命令。&lt;/p></description></item><item><title>git 分支管理</title><link>https://gohalo.github.io/cn/blog/git-branch-model/</link><pubDate>Tue, 27 Feb 2018 20:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-branch-model/</guid><description>&lt;p>相比其它的版本管理软件，git 有很多优点，其中很重要的一个特性就是版本的分支 (branch) 和合并 (merge) 十分方便。&lt;/p>
&lt;p>git 分支并非生成一个物理代码拷贝，而是只生成一个指向当前版本的指针，又被称为 &amp;ldquo;快照&amp;rdquo; (snapshot) ，因此，处理起来是分快速，而且节省空间。&lt;/p>
&lt;p>接下来，就看看 git 的版本分支管理策略。&lt;/p></description></item><item><title>git 补丁相关操作</title><link>https://gohalo.github.io/cn/blog/git-tips-patch-command-usage/</link><pubDate>Sun, 08 Oct 2017 19:30:02 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-tips-patch-command-usage/</guid><description>&lt;p>在 Linux 中可以通过 diff patch 命令生成补丁以及打补丁，而且 git 实际上也提供了很简单的命令直接生成 Patch 文件，然后，可以再结合 patch 命令使用即可。&lt;/p>
&lt;p>这里简单介绍其使用方法。&lt;/p></description></item><item><title>git 使用杂项</title><link>https://gohalo.github.io/cn/blog/git-cheatsheet/</link><pubDate>Thu, 10 Sep 2015 19:28:10 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-cheatsheet/</guid><description>&lt;p>记录 git 常见的示例，可以用来作为参考使用。&lt;/p></description></item></channel></rss>