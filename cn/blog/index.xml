<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>博客 on</title><link>https://gohalo.github.io/cn/blog/</link><description>Recent content in 博客 on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 06 Oct 2020 08:49:55 +0000</lastBuildDate><atom:link href="https://gohalo.github.io/cn/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>NeoVim 基本环境配置</title><link>https://gohalo.github.io/cn/blog/neovim-basic-usage/</link><pubDate>Fri, 02 Sep 2022 21:14:02 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/neovim-basic-usage/</guid><description>&lt;p>最开始 NeoVim 是 Vim 的功能增强，但是随着不断开发，功能越来越完善，而且已经分道扬镳，现在已经成为了更加接近现代的开发工具，尤其是随着 &lt;a href="https://neovim.io/charter/">Vision&lt;/a> 计划的开发。&lt;/p></description></item><item><title>Bootstrap 使用介绍</title><link>https://gohalo.github.io/cn/blog/web-bootstrap-introduce/</link><pubDate>Fri, 20 May 2022 20:37:53 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/web-bootstrap-introduce/</guid><description/></item><item><title>SCSS 基本语法介绍</title><link>https://gohalo.github.io/cn/blog/web-scss-introduce/</link><pubDate>Tue, 19 Apr 2022 22:17:13 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/web-scss-introduce/</guid><description>&lt;p>SCSS 是 SASS3 引入的新语法，其语法完全兼容 CSS3，同时继承了 SASS 的强大功能。&lt;/p></description></item><item><title>NeoVim LSP 使用介绍</title><link>https://gohalo.github.io/cn/blog/neovim-lsp-usage/</link><pubDate>Tue, 30 Nov 2021 18:39:17 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/neovim-lsp-usage/</guid><description>&lt;p>在 NeoVim 内部已经提供了 Language Server Protocol, LSP 客户端，服务端就需要按照自己的需求进行安装了，目前已经有一些高效的配置插件，可以很简单完成基本环境的配置。&lt;/p></description></item><item><title>K8S 常用命令</title><link>https://gohalo.github.io/cn/blog/kubernets-commands-usage/</link><pubDate>Fri, 22 Oct 2021 19:43:02 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/kubernets-commands-usage/</guid><description>&lt;p>整理下 K8S 的常用命令，以供参考。&lt;/p></description></item><item><title>Docker 使用简介</title><link>https://gohalo.github.io/cn/blog/docker-basic-introduce/</link><pubDate>Mon, 20 Sep 2021 23:10:15 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/docker-basic-introduce/</guid><description>&lt;p>从 Docker 1.11 开始，Docker 容器运行已经不是简单的通过 Docker Daemon 启动，而是集成了 containerd、runC 等多个组件，在 Docker 服务启动之后，可以看到系统上启动了 dockerd、containerd 等进程。&lt;/p>
&lt;p>这里简单介绍一些与 Docker 相关的基本概念。&lt;/p></description></item><item><title>Debian 系统配置</title><link>https://gohalo.github.io/cn/blog/linux-debian-distribution/</link><pubDate>Sun, 12 Sep 2021 20:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-debian-distribution/</guid><description>&lt;p>Debian 是最早最老牌的 Linux 发行版之一，最大优点是极其稳定快速，是 Ubuntu、Linux Mint 和 elementary OS 等 Linux 操作系统的母板，同时拥有强大的 APT 包管理机制和丰富的软件源，可以方便地安装和平滑升级软件和系统，省去很多编译安装和版本升级的麻烦.&lt;/p>
&lt;p>其具有完善的包管理系统，它的每个组件和应用程序都内置在系统中安装的软件包中。&lt;/p></description></item><item><title>Hugo Cheatsheet</title><link>https://gohalo.github.io/cn/blog/hugo-cheatsheet/</link><pubDate>Wed, 01 Sep 2021 23:10:02 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/hugo-cheatsheet/</guid><description>整理 Hugo 常用的命令或者使用方式。
常用命令 # ----- 在开发模式下启动服务 hugo server --buildDrafts --bind=0.0.0.0 --port=38785 ----- 正式发布之前检查网站是否正常 hugo server -e production --buildDrafts --bind=0.0.0.0 --port=38785 ----- 根据模板新建文章 hugo new blog/my-first-post/index.md ----- 启动页面压缩，或者配置文件中指定minify=true hugo --minify -d public 最佳实践 # 目录 # 支持选中某个 section 之后显示部分标签，默认不会显示，例如如下示例中默认不会显示 归档 标签 目录，当选中了包括 博客 之后才会显示这三个。
[[main]] name = &amp;#34;博客&amp;#34; url = &amp;#34;/blog/&amp;#34; weight = 20 [[main]] name = &amp;#34;归档&amp;#34; url = &amp;#34;/blog/archives/&amp;#34; weight = 20 [main.params] section = &amp;#34;blog&amp;#34; [[main]] name = &amp;#34;标签&amp;#34; url = &amp;#34;/blog/tags/&amp;#34; weight = 20 [main.</description></item><item><title>Python 通过 Paramiko 访问 SSH 服务</title><link>https://gohalo.github.io/cn/blog/ssh-python-paramiko-examples/</link><pubDate>Thu, 12 Aug 2021 20:28:54 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/ssh-python-paramiko-examples/</guid><description>&lt;p>Paramiko 实现了 SSH2 协议，用于与远程机器建立经过认证和加密后的安全连接，与 SSL 不同的是，SSH 不需要权威机构签署的分层证书，采用分布式的方式管理。&lt;/p></description></item><item><title>CSS 概念介绍</title><link>https://gohalo.github.io/cn/blog/web-css-introduce/</link><pubDate>Sun, 01 Aug 2021 21:15:32 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/web-css-introduce/</guid><description>&lt;p>Cascading Style Sheets, CSS 层叠样式表，定义了如何显示 HTML 中的元素，为了方便管理，通常会将样式表单独保存在 CSS 文件中，利用 CSS 可以很方便控制网页的样式和布局，会大大提升网页开发效率。&lt;/p>
&lt;p>这里简单整理相关的概念。&lt;/p></description></item><item><title>K8S 简单安装部署服务</title><link>https://gohalo.github.io/cn/blog/kubernets-simple-install/</link><pubDate>Sun, 01 Aug 2021 21:15:32 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/kubernets-simple-install/</guid><description>&lt;p>现在很多的 K8S 部署是通过容器安装的，这里介绍如何在物理机上独立部署，这也是最简单的方式。&lt;/p></description></item><item><title>使用 Hugo 制作静态博客</title><link>https://gohalo.github.io/cn/blog/hugo-static-site/</link><pubDate>Sun, 01 Aug 2021 21:15:32 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/hugo-static-site/</guid><description>&lt;p>Hugo 采用开源的 goldmark 作为 markdown 的解析器，兼容 GitHub-Flavored Markdown 标准规范，这里介绍常见的使用技巧。&lt;/p></description></item><item><title>Python 包管理机制详解介绍</title><link>https://gohalo.github.io/cn/blog/python-package-management/</link><pubDate>Sun, 20 Dec 2020 19:59:28 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-package-management/</guid><description>&lt;p>Python 中可以通过 PIP 来自动管理依赖包，当然，也可以下载源码或者二进制包，有些源码包需要编译环境，最好直接下载安装二进制包。&lt;/p></description></item><item><title>Docker 示例 Alpine + OpenSSH</title><link>https://gohalo.github.io/cn/blog/docker-example-sshd/</link><pubDate>Thu, 16 Jul 2020 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/docker-example-sshd/</guid><description>&lt;p>SSH 是最常见的远程连接协议，这里通过 Alpine 和 OpenSSH 搭建一个示例。&lt;/p></description></item><item><title>git 子模块使用</title><link>https://gohalo.github.io/cn/blog/git-tips-submodule/</link><pubDate>Thu, 16 Jul 2020 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-tips-submodule/</guid><description>&lt;p>开发过程中经常会遇到依赖另外的项目，多数情况可能就是三方库，但是几个独立的项目，通过子模块可以将多个项目关联。&lt;/p></description></item><item><title>K8S 制作离线镜像</title><link>https://gohalo.github.io/cn/blog/kubernets-create-offline-images/</link><pubDate>Thu, 16 Jul 2020 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/kubernets-create-offline-images/</guid><description>&lt;p>大部分的镜像制作都是通过 Dockerfile 来实现的，基本都是基于基础镜像制作，这里介绍使用 &lt;code>buildah&lt;/code> 来构建基础镜像，可以以此理解其基本原理。&lt;/p></description></item><item><title>GoLang 单元测试</title><link>https://gohalo.github.io/cn/blog/golang-testing-method/</link><pubDate>Wed, 15 Apr 2020 21:18:40 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-testing-method/</guid><description>&lt;p>程序开发中比较重要的一点是如何可以高效的进行单元测试，可以保证快速发现定位问题，在 GoLang 中自带了一个轻量级的测试框架 &lt;code>testing&lt;/code> 以及 &lt;code>go test&lt;/code> 命令来实现单元测试和性能测试。&lt;/p></description></item><item><title>VIM 自动对齐配置</title><link>https://gohalo.github.io/cn/blog/vim-tips-indent/</link><pubDate>Sun, 12 Apr 2020 18:19:15 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/vim-tips-indent/</guid><description>&lt;p>通过 VIM 可以自动设置对齐方式，例如使用 Tab 还是空格，使用四个字节还是八个字节等等，而且，可以根据不同的语言设置不同的格式。&lt;/p></description></item><item><title>GoLang Echo 简介</title><link>https://gohalo.github.io/cn/blog/golang-echo-http-framework/</link><pubDate>Thu, 05 Mar 2020 22:28:15 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-echo-http-framework/</guid><description>&lt;p>echo web 框架是通过 GoLang 开发的一种高性能、可扩展、轻量级的 web 框架，只包含了 MVC 框架的 C 部分，也就是负责 URL 路由和控制器部分，对于 V 视图和 M 数据操作可以使用自己喜欢的工具库来实现。&lt;/p>
&lt;p>这里简单介绍其使用方法。&lt;/p></description></item><item><title>CMake 使用简介</title><link>https://gohalo.github.io/cn/blog/cmake-basic-introduce/</link><pubDate>Thu, 26 Dec 2019 17:49:24 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/cmake-basic-introduce/</guid><description>&lt;p>在 Linux 中，经常使用 GNU 构建系统，也就是利用脚本和 make 程序在特定平台上构建软件，对于简单的程序来说是可以的，当项目变得复杂之后会很难进行维护。&lt;/p>
&lt;p>而目前在维护 C/C++ 项目时，使用比较多的是 CMake ，这里就详细介绍下 CMake 的使用。&lt;/p></description></item><item><title>Dockerfile 简介</title><link>https://gohalo.github.io/cn/blog/docker-dockerfile/</link><pubDate>Thu, 11 Jul 2019 21:48:10 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/docker-dockerfile/</guid><description>&lt;p>Dockerfile 可以用来创建一个镜像，允许在该文件中调用一些命令行中的命令，这样可以利用一个基础镜像，然后附加一些基础操作，最后直接自动生成新镜像。&lt;/p></description></item><item><title>GoLang 基本语法介绍</title><link>https://gohalo.github.io/cn/blog/golang-basic-syntax/</link><pubDate>Thu, 25 Apr 2019 19:28:10 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-basic-syntax/</guid><description>&lt;p>简单介绍常见的语法，例如 import、异常处理、反射等。&lt;/p></description></item><item><title>git 常见问题整理</title><link>https://gohalo.github.io/cn/blog/git-faqs/</link><pubDate>Thu, 18 Apr 2019 18:38:55 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-faqs/</guid><description>&lt;p>整理下常见的 git 问题。&lt;/p></description></item><item><title>git 多个远端仓库</title><link>https://gohalo.github.io/cn/blog/git-tips-multi-remote-repos/</link><pubDate>Wed, 26 Dec 2018 19:38:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-tips-multi-remote-repos/</guid><description>&lt;p>Git 作为一个分布式的仓库，可以配置多个远端，这里介绍如何将一个本地仓库同步到不同的远端仓库中，最常见的是开源代码时对应了不同仓库地址。&lt;/p></description></item><item><title>GoLang 异常处理</title><link>https://gohalo.github.io/cn/blog/golang-basic-error-panic/</link><pubDate>Sat, 15 Sep 2018 21:39:58 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-basic-error-panic/</guid><description>&lt;p>Golang 中的错误处理是一个被大家经常拿出来讨论的话题(另外一个是泛型)，这里简单介绍其使用方法。&lt;/p></description></item><item><title>GoLang 基本介绍</title><link>https://gohalo.github.io/cn/blog/golang-basic-introduce/</link><pubDate>Tue, 21 Aug 2018 21:09:38 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-basic-introduce/</guid><description>&lt;p>GoLang 目前越来越火，包括了 Docker、InfluxDB、etcd 等等，越来越多的工程都在使用 GoLang 。虽然它的语法都比较 &amp;ldquo;奇葩&amp;rdquo;，一些高级语言支持的特性却都不支持，但其高并发、高效率等等，也使其热度不减。&lt;/p>
&lt;p>这篇文章主要简单介绍下 GoLang 环境的搭建。&lt;/p></description></item><item><title>GORM 操作简介</title><link>https://gohalo.github.io/cn/blog/golang-db-gorm-basic/</link><pubDate>Tue, 21 Aug 2018 21:09:38 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-db-gorm-basic/</guid><description>&lt;p>Object Relational Mapping, ORM 对象关系映射，用于将数据库中的数据与代码中的结构体进行映射，不同语言的实现方式略有区别，但是目的基本相同。&lt;/p>
&lt;p>GoLang 中有多种映射库，这里简单介绍常见的 GORM 使用方式。&lt;/p></description></item><item><title>GORM 操作简介</title><link>https://gohalo.github.io/cn/blog/golang-debug-delve/</link><pubDate>Tue, 21 Aug 2018 21:09:38 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-debug-delve/</guid><description>&lt;p>Delve 是 GoLang 的三方调试器，相比 GDB 来说能更好的理解 GoLang 的运行时，包括数据结构、表达式等，目前支持 Linux、Windows 以及 Mac 等平台。&lt;/p></description></item><item><title>GoLang DB 操作简介</title><link>https://gohalo.github.io/cn/blog/golang-db-introduce/</link><pubDate>Sun, 19 Aug 2018 20:19:08 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-db-introduce/</guid><description>&lt;p>GoLang 提供了标准包用于对 SQL 数据库进行访问，作为操作数据库的入口对象 sql.DB, 主要为提供了两个重要的功能：A) 提供管理底层数据库连接的打开和关闭操作；B) 管理数据库连接池。&lt;/p>
&lt;p>需要注意的是，sql.DB 表示操作数据库的抽象访问接口，而非一个数据库连接对象，会根据实际的驱动打开关闭数据库连接，管理连接池。&lt;/p>
&lt;p>这里简单介绍 MySQL 的使用方式。&lt;/p></description></item><item><title>GoLang 模板使用简介</title><link>https://gohalo.github.io/cn/blog/golang-template-introduce/</link><pubDate>Sun, 19 Aug 2018 20:19:08 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-template-introduce/</guid><description>&lt;p>在前后端分离的时代，模板语言使用的已经很少了，不过很多特定的场景还是很有用的，这里介绍其基本使用方法。&lt;/p></description></item><item><title>GoLang HTTP 使用简介</title><link>https://gohalo.github.io/cn/blog/golang-http-webserver-introduce/</link><pubDate>Fri, 27 Apr 2018 18:13:19 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-http-webserver-introduce/</guid><description>&lt;p>除去细节，理解 HTTP 构建的网络应用只要关注客户端和服务端的处理，服务器主要用来接收客户端的请求，然后返回响应，在接收请求并处理的过程中，最重要的莫过于路由 (Router)。&lt;/p>
&lt;p>这里简单介绍如何使用 &lt;code>net/http&lt;/code> 构建 HTTP 请求。&lt;/p></description></item><item><title>JWT 简介</title><link>https://gohalo.github.io/cn/blog/golang-json-web-token-jwt/</link><pubDate>Tue, 13 Feb 2018 21:27:20 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-json-web-token-jwt/</guid><description>&lt;p>在程序开发中，用户认证授权是一个绕不过的重难点，以前的开发模式下，cookie 和 session 认证是主流，随着前后端分离的趋势，基于 Token 的认证方式成为主流。&lt;/p>
&lt;p>而 JWT(RFC 7519) 是基于 Token 认证方式的一种机制，是实现单点登录认证的一种有效方法。&lt;/p>
&lt;p>这里详细介绍其设计和使用方式。&lt;/p></description></item><item><title>Python 三方库 requests</title><link>https://gohalo.github.io/cn/blog/python-third-package-requests/</link><pubDate>Thu, 30 Nov 2017 18:39:17 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-third-package-requests/</guid><description>&lt;p>这是一个简单但是非常优雅的 HTTP 库，对于一些常见的 API 调用非常简单，&lt;/p></description></item><item><title>GoLang 日志模块使用介绍</title><link>https://gohalo.github.io/cn/blog/golang-log-module-introduce/</link><pubDate>Mon, 16 Oct 2017 19:29:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-log-module-introduce/</guid><description>&lt;p>打印日志是最常规的需求，GoLang 的基础库只提供了简单的格式化功能，但是很多基础功能不存在，例如日志级别、文件切割等等。&lt;/p>
&lt;p>这里介绍 Uber 开发的一个日志库 ZAP 。&lt;/p></description></item><item><title>C 代码覆盖率</title><link>https://gohalo.github.io/cn/blog/c-coverage-introduce/</link><pubDate>Sun, 13 Nov 2016 17:12:19 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/c-coverage-introduce/</guid><description>&lt;p>我们已经提供了一些测试用例，但是这些测试用例的好坏如何评估？是否已经覆盖了所有的函数？函数中的分支以及边界条件是否都已经覆盖？&lt;/p>
&lt;p>这就需要通过代码覆盖率进行查看，这里简单介绍其使用方法。&lt;/p></description></item><item><title>CMake 常用示例</title><link>https://gohalo.github.io/cn/blog/cmake-some-tips/</link><pubDate>Sun, 16 Oct 2016 19:29:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/cmake-some-tips/</guid><description>&lt;p>整理常用的示例。&lt;/p></description></item><item><title>GoLang JSON 编码解码</title><link>https://gohalo.github.io/cn/blog/golang-json-encode-decode-introduce/</link><pubDate>Fri, 07 Oct 2016 19:29:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-json-encode-decode-introduce/</guid><description>&lt;p>随着 REST API 的兴起，基本上已经前后端分离，更多的返回格式是 json 字符串，这里简单讨论下在 GoLang 中如何编码和解码 JSON 结构。&lt;/p>
&lt;p>GoLang 提供了 &lt;code>encoding/json&lt;/code> 的标准库用于 JSON 的处理，简单记录 GoLang 中使用 JSON 的常用技巧。&lt;/p></description></item><item><title>GoLang 参数校验</title><link>https://gohalo.github.io/cn/blog/golang-validator-introduce/</link><pubDate>Tue, 26 Jul 2016 20:28:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-validator-introduce/</guid><description>&lt;p>接口开发经常会遇到一个问题是后端需要大量代码进行参数校验，防止用户的恶意请求。最常见的如日期格式、用户年龄、性别等必须是正常的值，不能随意设置。&lt;/p>
&lt;p>这里介绍 GoLang 中的一个参数校验库。&lt;/p></description></item><item><title>GoLang 实现 SSH 相关示例</title><link>https://gohalo.github.io/cn/blog/ssh-golang-examples/</link><pubDate>Tue, 26 Jul 2016 20:28:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/ssh-golang-examples/</guid><description>&lt;p>GoLang 提供了基础的 SSH 库，可以用来作为服务端或者客户端使用，这里整理了常见的用法。&lt;/p></description></item><item><title>SSH 便捷登录配置</title><link>https://gohalo.github.io/cn/blog/ssh-simplify-your-life/</link><pubDate>Tue, 26 Jul 2016 20:28:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/ssh-simplify-your-life/</guid><description>&lt;p>通常在一个 ssh 链接中，需要指定用户名、主机名、主机端口号、配置参数等信息，如果每次登陆一台主机都要输入，那么就会变的非常麻烦，而且一些 IP 地址通常又非常难记。&lt;/p>
&lt;p>为此，我们可以通过 OpenSSH 的客户端配置文件简化我们的登陆方式，下面简单介绍下。&lt;/p></description></item><item><title>GoLang Echo 中间件</title><link>https://gohalo.github.io/cn/blog/golang-echo-middleware/</link><pubDate>Tue, 06 Oct 2015 19:29:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-echo-middleware/</guid><description>&lt;p>Echo 中间件指的是可以拦截 http 请求的特殊函数，在请求和响应中间可以注册多个中间件，每个中间件执行不同的功能，一个中间执行完再轮到下一个中间件执行。&lt;/p></description></item><item><title>Python 模块简介</title><link>https://gohalo.github.io/cn/blog/python-modules-introduce/</link><pubDate>Sun, 07 Jun 2015 21:39:22 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-modules-introduce/</guid><description>在 Python 解析器中，每次重新进入，之前定义的函数、变量等都会丢失，所以，通常是将代码保存在文件中运行，而随着功能增加，文件会变得越来越大，为了方便维护，会将其拆分成多个文件。
其它语言也有类似的问题，Python 将其称为模块 (Module) ，通过模块可以定义函数、类、变量等，从而更有逻辑地组织 Python 代码。
这里介绍模块的引入、搜索、制作等一些常见的问题。
简介 # 每个文件都是一个模块 (module)，其模块名就是对应的文件名，在模块内运行时，可以通过全局变量 __name__ 获取，最常见的就是 __main__ 的判断，也就是是否为主 Pyhton 脚本。
if __name__ == &amp;#34;__main__&amp;#34;: print(&amp;#34;Hello World&amp;#34;) 也就是该文件可以作为模块引入其它代码中，也可以作为一个独立的执行文件运行，而判断的逻辑就是这里的 if __name__ == &amp;quot;__main__&amp;quot; 语句，直接调用脚本时，对应 __name__ 变量保存的是 __main__ ，如果是引入的模块，则是模块名称。
模块导入 # 可以通过 import 关键字导入模块，也就是添加到当前的命名空间中，根据不同的使用场景，有如下的几种方式。
# 直接导入模块，可以通过math.cos()调用 import math # 导入模块中的函数，这样可以直接调用cos sin，不过很容易被覆盖 from math import cos, sin # 导入模块的所有符号 from math import * # 导入模块的符号，为了防止名字覆盖，将其重命名 from math import pi as PI 导入的模块会保存在 sys.modules 中，这是一个字典，如果多次导入第二次实际不会有加载的动作。</description></item><item><title>Python 基本环境准备</title><link>https://gohalo.github.io/cn/blog/python-environment-prepare/</link><pubDate>Thu, 17 Oct 2013 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-environment-prepare/</guid><description>&lt;p>与 Java 类似，Python 底层通过一个虚拟机运行，而且已经移植到了多个平台上，也就是，需要根据不同的平台安装虚拟机，实际上最主要的就是 python 可执行文件。&lt;/p>
&lt;p>现在大多数安装的都是 CPython ，也就是 C 语言实现的 Python ，通常，直接使用安装包安装即可。&lt;/p>
&lt;p>这里详细介绍如何安装环境，使用虚拟环境等等。&lt;/p></description></item><item><title>【专题】Web 前端编程语言</title><link>https://gohalo.github.io/cn/blog/topic-language-webs/</link><pubDate>Wed, 15 Dec 2010 22:10:52 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-language-webs/</guid><description>CSS # 基本概念 包括基本语法、样式、盒子模型等概念。 SCSS 语法 在 SASS3 引入的新语法，完全监控 CSS3 并继承了 SASS 强大能力。 其它 # Bootstrap</description></item><item><title>【专题】C/C++ 编程语言</title><link>https://gohalo.github.io/cn/blog/topic-language-c-cpp/</link><pubDate>Fri, 12 Nov 2010 20:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-language-c-cpp/</guid><description>Test # 测试主要是为了可以提前发现异常，尤其是当重构时，可以进行完整的验证，所以，就慢慢衍生出了所谓 Test Drived Develop, TDD，而且产生了很多测试方法。
代码覆盖率 使用 GCC 自带的工具可以很简单的统计代码覆盖率。 CMake # 这是一个跨平台的自动编译、打包工具，可以通过简单语句描述编译过程，可以输出对应的 Makefile 文件。
简单介绍 只是简单介绍如何使用，包括了安装、示例等。 常用示例 整理一些常见的使用场景，例如依赖。</description></item><item><title>【专题】Python 编程语言</title><link>https://gohalo.github.io/cn/blog/topic-language-python/</link><pubDate>Sun, 17 Oct 2010 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-language-python/</guid><description>&lt;p>Python 是一种解释型语言，提供了跨平台的支持，可以快速开发一些脚本，随着 AI 的兴起，提供了一些常见的开发框架，这里详解介绍 Python 的使用。&lt;/p></description></item><item><title>【专题】GoLang 编程语言</title><link>https://gohalo.github.io/cn/blog/topic-language-golang/</link><pubDate>Wed, 06 Oct 2010 19:29:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-language-golang/</guid><description>&lt;p>GoLang 是谷歌 2009 年发布的开源编程语言，其开发人员都是计算机界大神一般的存在，提供了便捷的协程使用，具有很高的并发性。目前很多 Cloud Native 软件都是通过 GoLang 编写，例如 Docker、K8S、LXD 等等。&lt;/p></description></item><item><title>【专题】开发环境</title><link>https://gohalo.github.io/cn/blog/topic-develop-workspace/</link><pubDate>Sun, 12 Sep 2010 20:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-develop-workspace/</guid><description>Git # Git 是一免费、开源的分布式版本控制系统，可有效、高速的处理从很小到非常大的项目版本管理，该工具是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发，其本意是为了替换 BitKeeper 。
除了 GitHub 外，开源的工具还有 GitLab、Gogs，以及 C 的相关库 libgit2 。
这里简单介绍一下常见概念及其操作。
常用技巧 # 子模块使用 可以将其它的库作为模块添加，这样就可以方便管理。 多源管理 介绍如何将一个本地仓库同步到不同的远端仓库中。 常见问题 整理下 git 中常见的问题、解决方案以及相关原因。 VIM # 一个功能强大、高度可定制的文本编辑器，与其相匹敌的是 Emacs ，这两个都是不错的编辑器，在此不再比较两者的优劣，仅介绍 VIM 相关的内容。
自动对齐 不同编程语言文本对齐方式不同，可以分别进行配置。 NeoVim # 现代的编辑器，源于 Vim 但发展到现在已经与之分道扬镳了，其扩展能力不亚于 VSCode，但是占用资源以及性能要好很多，而且聚焦到屏幕和键盘操作，要优雅很多，尤其是通过 Lua 进行配置之后。
基本功能 对基本环境的配置介绍 LSP 配置 这应该是编写代码时最强大的功能，可以对文件进行语义理解，而不像之前的 ctags 。 参考 # Awesome NeoVim</description></item><item><title>【专题】Linux 安全相关</title><link>https://gohalo.github.io/cn/blog/topic-linux-security/</link><pubDate>Sat, 27 Mar 2010 21:18:34 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-linux-security/</guid><description>&lt;p>介绍 Linux 中与安全相关的内容，例如 SSH、SELinux 等，当然，也包括了一些安全相关基本的概念，例如加密算法、TLS 等等。&lt;/p>
&lt;p>这里作为一个专题介绍一些常见概念。&lt;/p></description></item><item><title>【专题】Linux 容器介绍</title><link>https://gohalo.github.io/cn/blog/topic-linux-container/</link><pubDate>Fri, 12 Mar 2010 20:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-linux-container/</guid><description/></item><item><title>【专题】Linux 环境搭建</title><link>https://gohalo.github.io/cn/blog/topic-linux-environment-setup/</link><pubDate>Thu, 25 Feb 2010 22:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-linux-environment-setup/</guid><description>&lt;p>Linux 有多个发行版本，其中 RedHat、Debian 及其衍生版本占了很大一部分，大部分的基本功能相似，但是环境又略有区别，这里简单介绍其基础的环境使用，以及一些常见概念。&lt;/p></description></item><item><title>Tags</title><link>https://gohalo.github.io/cn/blog/tags/</link><pubDate>Wed, 24 Sep 2003 21:40:13 +0200</pubDate><guid>https://gohalo.github.io/cn/blog/tags/</guid><description/></item><item><title>归档</title><link>https://gohalo.github.io/cn/blog/archives/</link><pubDate>Wed, 24 Sep 2003 21:40:13 +0200</pubDate><guid>https://gohalo.github.io/cn/blog/archives/</guid><description/></item><item><title>Hello World</title><link>https://gohalo.github.io/cn/blog/hello-world/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/hello-world/</guid><description>&lt;p>Hi, the world, I&amp;rsquo;m coooooooooming.&lt;/p>
&lt;p>Oooops, just examples, ignore me, darling.&lt;/p></description></item></channel></rss>