<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>博客 on</title><link>https://gohalo.github.io/cn/blog/</link><description>Recent content in 博客 on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 06 Oct 2020 08:49:55 +0000</lastBuildDate><atom:link href="https://gohalo.github.io/cn/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Cargo 包管理工具</title><link>https://gohalo.github.io/cn/blog/rust-cargo-package-management/</link><pubDate>Wed, 26 Oct 2022 22:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-cargo-package-management/</guid><description>&lt;p>Rust 提供了 Cargo 的构建系统和软件包管理器，可以用来构建代码、下载库或依赖项等等，在安装 Rust 时会同时安装 Cargo 相关的程序。&lt;/p>
&lt;p>这里详细介绍 Cargo 的使用方式。&lt;/p></description></item><item><title>Rust 常用标准库介绍</title><link>https://gohalo.github.io/cn/blog/rust-standard-library/</link><pubDate>Wed, 19 Oct 2022 21:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-standard-library/</guid><description/></item><item><title>Git 开源代码提交流程</title><link>https://gohalo.github.io/cn/blog/git-tips-opensource-workflow/</link><pubDate>Wed, 12 Oct 2022 23:05:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-tips-opensource-workflow/</guid><description>&lt;p>这里以 GitHub 上的工作流程为例，讲解如何维护、提交代码。&lt;/p></description></item><item><title>Bash 使用常见错误以及规避措施</title><link>https://gohalo.github.io/cn/blog/bash-pitfalls/</link><pubDate>Mon, 19 Sep 2022 21:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/bash-pitfalls/</guid><description>&lt;p>简单介绍下 Linux 中 Bash 编程所需要注意的内容，以及常见的规避措施。&lt;/p></description></item><item><title>Rust 基本语法</title><link>https://gohalo.github.io/cn/blog/rust-basic-syntax/</link><pubDate>Mon, 19 Sep 2022 21:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-basic-syntax/</guid><description>&lt;p>这里简单介绍基本常用的语法。&lt;/p></description></item><item><title>Rust 基本介绍</title><link>https://gohalo.github.io/cn/blog/rust-basic-introduce/</link><pubDate>Fri, 16 Sep 2022 21:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rust-basic-introduce/</guid><description/></item><item><title>NeoVim 基本环境配置</title><link>https://gohalo.github.io/cn/blog/neovim-basic-usage/</link><pubDate>Fri, 02 Sep 2022 21:14:02 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/neovim-basic-usage/</guid><description>&lt;p>最开始 NeoVim 是 Vim 的功能增强，但是随着不断开发，功能越来越完善，而且已经分道扬镳，现在已经成为了更加接近现代的开发工具，尤其是随着 &lt;a href="https://neovim.io/charter/">Vision&lt;/a> 计划的开发，也包括了其子项目 &lt;a href="https://tree-sitter.github.io/tree-sitter/">Tree-sitter&lt;/a>。&lt;/p></description></item><item><title>Bootstrap 使用介绍</title><link>https://gohalo.github.io/cn/blog/web-bootstrap-introduce/</link><pubDate>Fri, 20 May 2022 20:37:53 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/web-bootstrap-introduce/</guid><description/></item><item><title>Socks 代理协议详解</title><link>https://gohalo.github.io/cn/blog/network-proxy-socks/</link><pubDate>Thu, 28 Apr 2022 21:39:10 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/network-proxy-socks/</guid><description>&lt;p>Socks 是一个代理协议，这里会对协议进行详细介绍，同时会介绍其使用场景。&lt;/p></description></item><item><title>SCSS 基本语法介绍</title><link>https://gohalo.github.io/cn/blog/web-scss-introduce/</link><pubDate>Tue, 19 Apr 2022 22:17:13 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/web-scss-introduce/</guid><description>&lt;p>SCSS 是 SASS3 引入的新语法，其语法完全兼容 CSS3，同时继承了 SASS 的强大功能。&lt;/p></description></item><item><title>NeoVim LSP 使用介绍</title><link>https://gohalo.github.io/cn/blog/neovim-lsp-usage/</link><pubDate>Tue, 30 Nov 2021 18:39:17 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/neovim-lsp-usage/</guid><description>&lt;p>在 NeoVim 内部已经提供了 Language Server Protocol, LSP 客户端，服务端就需要按照自己的需求进行安装了，目前已经有一些高效的配置插件，可以很简单完成基本环境的配置。&lt;/p></description></item><item><title>K8S 常用命令</title><link>https://gohalo.github.io/cn/blog/kubernets-commands-usage/</link><pubDate>Fri, 22 Oct 2021 19:43:02 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/kubernets-commands-usage/</guid><description>&lt;p>整理下 K8S 的常用命令，以供参考。&lt;/p></description></item><item><title>Docker 使用简介</title><link>https://gohalo.github.io/cn/blog/docker-basic-introduce/</link><pubDate>Mon, 20 Sep 2021 23:10:15 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/docker-basic-introduce/</guid><description>&lt;p>从 Docker 1.11 开始，Docker 容器运行已经不是简单的通过 Docker Daemon 启动，而是集成了 containerd、runC 等多个组件，在 Docker 服务启动之后，可以看到系统上启动了 dockerd、containerd 等进程。&lt;/p>
&lt;p>这里简单介绍一些与 Docker 相关的基本概念。&lt;/p></description></item><item><title>Debian 系统配置</title><link>https://gohalo.github.io/cn/blog/linux-debian-distribution/</link><pubDate>Sun, 12 Sep 2021 20:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-debian-distribution/</guid><description>&lt;p>Debian 是最早最老牌的 Linux 发行版之一，最大优点是极其稳定快速，是 Ubuntu、Linux Mint 和 elementary OS 等 Linux 操作系统的母板，同时拥有强大的 APT 包管理机制和丰富的软件源，可以方便地安装和平滑升级软件和系统，省去很多编译安装和版本升级的麻烦.&lt;/p>
&lt;p>其具有完善的包管理系统，它的每个组件和应用程序都内置在系统中安装的软件包中。&lt;/p></description></item><item><title>Hugo Cheatsheet</title><link>https://gohalo.github.io/cn/blog/hugo-cheatsheet/</link><pubDate>Wed, 01 Sep 2021 23:10:02 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/hugo-cheatsheet/</guid><description>整理 Hugo 常用的命令或者使用方式。
常用命令 # ----- 在开发模式下启动服务 hugo server --buildDrafts --bind=0.0.0.0 --port=38785 ----- 正式发布之前检查网站是否正常 hugo server -e production --bind=0.0.0.0 --port=38785 ----- 根据模板新建文章 hugo new blog/my-first-post/index.md ----- 启动页面压缩，或者配置文件中指定minify=true hugo --minify -d public 最佳实践 # 目录 # 支持选中某个 section 之后显示部分标签，默认不会显示，例如如下示例中默认不会显示 归档 标签 目录，当选中了包括 博客 之后才会显示这三个。
[[main]] name = &amp;#34;博客&amp;#34; url = &amp;#34;/blog/&amp;#34; weight = 20 [[main]] name = &amp;#34;归档&amp;#34; url = &amp;#34;/blog/archives/&amp;#34; weight = 20 [main.params] section = &amp;#34;blog&amp;#34; [[main]] name = &amp;#34;标签&amp;#34; url = &amp;#34;/blog/tags/&amp;#34; weight = 20 [main.</description></item><item><title>gogs 使用简介</title><link>https://gohalo.github.io/cn/blog/git-gogs-introduce/</link><pubDate>Thu, 26 Aug 2021 21:19:45 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-gogs-introduce/</guid><description>&lt;p>Gogs 的功能类似于 GitHub 或者 GitLab ，不过相比来说是一款极易搭建的 Git 服务，其目标是打造一个最简单、最快速和最轻松的方式搭建自助 Git 服务，通过 Go 语言开发，使得 Gogs 能够通过独立二进制分发，支持平台包括了 Linux、Mac OS、Windows 以及 ARM 。&lt;/p></description></item><item><title>Python 通过 Paramiko 访问 SSH 服务</title><link>https://gohalo.github.io/cn/blog/ssh-python-paramiko-examples/</link><pubDate>Thu, 12 Aug 2021 20:28:54 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/ssh-python-paramiko-examples/</guid><description>&lt;p>Paramiko 实现了 SSH2 协议，用于与远程机器建立经过认证和加密后的安全连接，与 SSL 不同的是，SSH 不需要权威机构签署的分层证书，采用分布式的方式管理。&lt;/p></description></item><item><title>CSS 概念介绍</title><link>https://gohalo.github.io/cn/blog/web-css-introduce/</link><pubDate>Sun, 01 Aug 2021 21:15:32 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/web-css-introduce/</guid><description>&lt;p>Cascading Style Sheets, CSS 层叠样式表，定义了如何显示 HTML 中的元素，为了方便管理，通常会将样式表单独保存在 CSS 文件中，利用 CSS 可以很方便控制网页的样式和布局，会大大提升网页开发效率。&lt;/p>
&lt;p>这里简单整理相关的概念。&lt;/p></description></item><item><title>K8S 简单安装部署服务</title><link>https://gohalo.github.io/cn/blog/kubernets-simple-install/</link><pubDate>Sun, 01 Aug 2021 21:15:32 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/kubernets-simple-install/</guid><description>&lt;p>现在很多的 K8S 部署是通过容器安装的，这里介绍如何在物理机上独立部署，这也是最简单的方式。&lt;/p></description></item><item><title>使用 Hugo 制作静态博客</title><link>https://gohalo.github.io/cn/blog/hugo-static-site/</link><pubDate>Sun, 01 Aug 2021 21:15:32 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/hugo-static-site/</guid><description>&lt;p>Hugo 采用开源的 goldmark 作为 markdown 的解析器，兼容 GitHub-Flavored Markdown 标准规范，很多的静态网站都是使用的Hugo，例如 K8S 的主页，这里介绍常见的使用技巧。&lt;/p></description></item><item><title>Neovim 常用插件介绍</title><link>https://gohalo.github.io/cn/blog/neovim-basic-plugins-introduce/</link><pubDate>Sat, 26 Jun 2021 21:34:52 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/neovim-basic-plugins-introduce/</guid><description>常用插件 # 图标 # 很多的插件为了美观会采用图标显示，可以使用 nvim-web-devicons 这个插件，依赖 NerdFont 字体扩展。
在 www.nerdfonts.com 中包含的符号，作为常用字体的补充，可以从 Font Downloads 页面选择合适的字体 (例如 Hack)，然后下载并保存到 /usr/share/fonts 或者 ~/.local/share/fonts 目录下，执行如下命令。
$ fc-cache -f -v $ fc-list | grep &amp;#34;FiraMono&amp;#34; 建议使用 FiraMono 字体，相比来说要跟全面一些。另外，还可以对字体的加载进行优化，这里不做过多介绍。然后，在终端 (如 Gnome Terminal) 中选择对应的字体即可。
在 nvim 中可以通过 lua print(vim.inspect(require'nvim-web-devicons'.get_icons())) 命令查看当前加载的字体。
配色 # VIM 提供了一整套的配色方法，可以自己配置，但通常是使用一些常用的方案，这里使用 gruvbox 主题，更多的可以参考 Awesome VIM Colorschemes
文件浏览 nvim-tree # 通常使用 nvim-tree.lua 作为文件浏览器，可以执行常见的操作，而且操作快捷键跟 VIM 的常用按键相似，可以通过 &amp;lt;leader&amp;gt;tt 快捷键打开，如下是常用快捷键：
o 打开关闭文件夹 a 创建文件 r 重命名 x 剪切 c 拷贝 p 粘贴 d 删除 g?</description></item><item><title>Kubernets 网络示例</title><link>https://gohalo.github.io/cn/blog/kubernets-examples-nginx/</link><pubDate>Fri, 19 Mar 2021 21:19:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/kubernets-examples-nginx/</guid><description>&lt;p>这里以 Nginx 为例，介绍几种常见的网络模型。&lt;/p></description></item><item><title>YAML 配置格式</title><link>https://gohalo.github.io/cn/blog/yaml-format-standard/</link><pubDate>Wed, 10 Mar 2021 23:15:52 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/yaml-format-standard/</guid><description>&lt;p>YAML 是一种可读性高的数据标记语言，通常用于配置文件，可存放一些复杂的数据类型，例如列表、字典等。&lt;/p></description></item><item><title>Python 包管理机制详解介绍</title><link>https://gohalo.github.io/cn/blog/python-package-management/</link><pubDate>Sun, 20 Dec 2020 19:59:28 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-package-management/</guid><description>&lt;p>Python 中可以通过 PIP 来自动管理依赖包，当然，也可以下载源码或者二进制包，有些源码包需要编译环境，最好直接下载安装二进制包。&lt;/p></description></item><item><title>Kubernetes 基本介绍</title><link>https://gohalo.github.io/cn/blog/kubernets-basic-introduce/</link><pubDate>Thu, 10 Dec 2020 21:50:32 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/kubernets-basic-introduce/</guid><description/></item><item><title>详细介绍 C++ 的强制转换方法</title><link>https://gohalo.github.io/cn/blog/cpp-cast-methods-introduce/</link><pubDate>Fri, 20 Nov 2020 23:18:52 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/cpp-cast-methods-introduce/</guid><description>&lt;p>在 C 中提供了强制类型转换，不过其实现很简单，而且没有区分具体的使用场景，所以，在编译或者运行阶段可能会出现一些异常，尤其是一旦不注意极易发生异常。&lt;/p>
&lt;p>为此，C++ 对于不同的场景进行了划分，由于 C++ 支持面向对象编程，也因此对这一场景进行了优化。&lt;/p>
&lt;p>本文详细介绍其使用场景。&lt;/p></description></item><item><title>DBDeployer 常用命令速查表</title><link>https://gohalo.github.io/cn/blog/mysql-tools-dbdeployer-cheatsheet/</link><pubDate>Wed, 18 Nov 2020 20:01:39 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-tools-dbdeployer-cheatsheet/</guid><description>&lt;p>DBDeployer 是一款十分强大的数据库测试环境部署工具，可实现一键部署不同架构、不同版本的数据库环境，之前已经详细介绍过其使用方法。&lt;/p>
&lt;p>这里将一些常用的命令整理下，已方便查询。&lt;/p></description></item><item><title>详细介绍 DBDeployer 部署工具使用</title><link>https://gohalo.github.io/cn/blog/mysql-tools-dbdeployer-usage/</link><pubDate>Wed, 18 Nov 2020 20:01:39 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-tools-dbdeployer-usage/</guid><description>&lt;p>通过 DBDeployer 可以在本地快速搭建一个强大的测试环境，包括了不同版本、不同架构的数据库环境，例如 MySQL 主从复制、GTID 模式复制、MySQL 组复制等等。&lt;/p>
&lt;p>支持几乎当前所有版本的 MySQL 发行版本，除了官方的，还有 Percona MySQL、MariaDB、MySQL NDB Cluster、Percona XtraDB Cluster 等等，还有 MySQL-Shell 的安装，甚至还有 TiDB ，估计是 TiDB 团队贡献的代码吧。&lt;/p>
&lt;p>这里会详细介绍其使用方法。&lt;/p></description></item><item><title>【专题】MySQL 数据库</title><link>https://gohalo.github.io/cn/blog/topic-database-mysql/</link><pubDate>Thu, 16 Jul 2020 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-database-mysql/</guid><description>&lt;p>MySQL 是一款最流行的开源关系型数据库，最初由瑞典的 MySQL AB 公司开发，目前已被 Oracle 收购，虽然如此，但是仍然在不断的向前发展。&lt;/p>
&lt;p>这里详细介绍概念。&lt;/p></description></item><item><title>CentOS 安装与配置</title><link>https://gohalo.github.io/cn/blog/centos-config-from-scratch/</link><pubDate>Thu, 16 Jul 2020 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/centos-config-from-scratch/</guid><description>&lt;p>CentOS (Community Enterprise Operating System) 也即社区版的企业操作系统，是 Linux 发行版本之一，来自于 Red Hat Enterprise Linux 所开放的源码编译而成。因此，对稳定性较高的服务器通常以 CentOS 替代商业版的 Red Hat 。&lt;/p>
&lt;p>两者的不同在于 CentOS 并不包含封闭源代码软件。下面会介绍桌面版的 CentOS 在安装时需要作的一些常用配置。&lt;/p></description></item><item><title>Docker 示例 Alpine + OpenSSH</title><link>https://gohalo.github.io/cn/blog/docker-example-sshd/</link><pubDate>Thu, 16 Jul 2020 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/docker-example-sshd/</guid><description>&lt;p>SSH 是最常见的远程连接协议，这里通过 Alpine 和 OpenSSH 搭建一个示例。&lt;/p></description></item><item><title>git 免登陆设置</title><link>https://gohalo.github.io/cn/blog/git-tips-skip-password-typing/</link><pubDate>Thu, 16 Jul 2020 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-tips-skip-password-typing/</guid><description>&lt;p>使用 git 时，可以通过 http 或者 ssh 访问远端仓库，但是每次访问如果都要填写用户名密码就会很麻烦，这里主要针对这两种场景，介绍如何配置免密码直接登陆。&lt;/p></description></item><item><title>git 子模块使用</title><link>https://gohalo.github.io/cn/blog/git-tips-submodule/</link><pubDate>Thu, 16 Jul 2020 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-tips-submodule/</guid><description>&lt;p>开发过程中经常会遇到依赖另外的项目，多数情况可能就是三方库，但是几个独立的项目，通过子模块可以将多个项目关联。&lt;/p></description></item><item><title>K8S 制作离线镜像</title><link>https://gohalo.github.io/cn/blog/kubernets-create-offline-images/</link><pubDate>Thu, 16 Jul 2020 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/kubernets-create-offline-images/</guid><description>&lt;p>大部分的镜像制作都是通过 Dockerfile 来实现的，基本都是基于基础镜像制作，这里介绍使用 &lt;code>buildah&lt;/code> 来构建基础镜像，可以以此理解其基本原理。&lt;/p></description></item><item><title>yum 配置以及常用 rpm 命令</title><link>https://gohalo.github.io/cn/blog/yum-rpm-config-and-command-usage/</link><pubDate>Thu, 16 Jul 2020 19:18:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/yum-rpm-config-and-command-usage/</guid><description>&lt;p>在 CentOS 中，会通过 YUM 或者 RPM 进行软件包的管理，不过 RPM 不能很好的解决软件之间的依赖关系，所以目前使用较多的是 YUM 源。&lt;/p>
&lt;p>介绍常用的管理命令，基本的 RPM 规范，常见的错误处理，例如镜像地址配置、本地源设置、强制安装包等等。&lt;/p></description></item><item><title>Bash 命令注入以及预防策略</title><link>https://gohalo.github.io/cn/blog/bash-security-commands-injection/</link><pubDate>Wed, 08 Jul 2020 19:18:35 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/bash-security-commands-injection/</guid><description>&lt;p>所谓的命令注入，简单来说，就是利用任何会调用系统命令的应用，通过构造特殊命令字符串的方式，执行恶意代码。常见的例如 SQL 命令注入、页面命令注入等。&lt;/p>
&lt;p>这里介绍一下 Bash 的命令注入以及预防策略。&lt;/p></description></item><item><title>Linux 网络配置</title><link>https://gohalo.github.io/cn/blog/linux-network-settings/</link><pubDate>Wed, 20 May 2020 21:29:10 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-network-settings/</guid><description>&lt;p>现在很多系统管理员仍在使用 ifconfig、route、arp 和 netstat 等命令行工具，来管理和排查各种网络配置。这套工具也就是 net-tools 包，源于 BSD TCP/IP 工具箱，但是自 2001 年以后基本就停滞不前。&lt;/p>
&lt;p>iproute 作为一套新的网络配置工具，旨在替换原有的 net-tools 工具包，这里大概介绍下两者的区别。&lt;/p></description></item><item><title>GoLang 单元测试</title><link>https://gohalo.github.io/cn/blog/golang-testing-method/</link><pubDate>Wed, 15 Apr 2020 21:18:40 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-testing-method/</guid><description>&lt;p>程序开发中比较重要的一点是如何可以高效的进行单元测试，可以保证快速发现定位问题，在 GoLang 中自带了一个轻量级的测试框架 &lt;code>testing&lt;/code> 以及 &lt;code>go test&lt;/code> 命令来实现单元测试和性能测试。&lt;/p></description></item><item><title>Rest API 介绍以及最佳实践</title><link>https://gohalo.github.io/cn/blog/rest-api-best-practice/</link><pubDate>Sun, 12 Apr 2020 18:19:15 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/rest-api-best-practice/</guid><description>&lt;p>当前网络应用一般分成了独立的前后端，而且前端设备层出不穷，所以需要有统一的标准，便于不同的前后端进行通讯，而 RESTful API 是目前比较成熟的 API 设计理论。&lt;/p>
&lt;p>它结构清晰、符合标准、易于理解、扩展方便，所以正得到越来越多网站的采用。&lt;/p></description></item><item><title>VIM 自动对齐配置</title><link>https://gohalo.github.io/cn/blog/vim-tips-indent/</link><pubDate>Sun, 12 Apr 2020 18:19:15 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/vim-tips-indent/</guid><description>&lt;p>通过 VIM 可以自动设置对齐方式，例如使用 Tab 还是空格，使用四个字节还是八个字节等等，而且，可以根据不同的语言设置不同的格式。&lt;/p></description></item><item><title>GoLang Echo 简介</title><link>https://gohalo.github.io/cn/blog/golang-echo-http-framework/</link><pubDate>Thu, 05 Mar 2020 22:28:15 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-echo-http-framework/</guid><description>&lt;p>echo web 框架是通过 GoLang 开发的一种高性能、可扩展、轻量级的 web 框架，只包含了 MVC 框架的 C 部分，也就是负责 URL 路由和控制器部分，对于 V 视图和 M 数据操作可以使用自己喜欢的工具库来实现。&lt;/p>
&lt;p>这里简单介绍其使用方法。&lt;/p></description></item><item><title>通过 CMake 进行测试</title><link>https://gohalo.github.io/cn/blog/cmake-unit-test-introduce/</link><pubDate>Mon, 30 Dec 2019 19:29:21 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/cmake-unit-test-introduce/</guid><description>&lt;p>CMake 除了提供自动编译的工具之外，还可以用来进行测试，提供了一整套基于 ctest 的工具。&lt;/p></description></item><item><title>CMake 使用简介</title><link>https://gohalo.github.io/cn/blog/cmake-basic-introduce/</link><pubDate>Thu, 26 Dec 2019 17:49:24 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/cmake-basic-introduce/</guid><description>&lt;p>在 Linux 中，经常使用 GNU 构建系统，也就是利用脚本和 make 程序在特定平台上构建软件，对于简单的程序来说是可以的，当项目变得复杂之后会很难进行维护。&lt;/p>
&lt;p>而目前在维护 C/C++ 项目时，使用比较多的是 CMake ，这里就详细介绍下 CMake 的使用。&lt;/p></description></item><item><title>Docker Compose 简介</title><link>https://gohalo.github.io/cn/blog/docker-compose-introduce/</link><pubDate>Sun, 22 Dec 2019 21:34:52 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/docker-compose-introduce/</guid><description>&lt;p>Docker Compose 是 Docker 官方编排项目，用于快速的部署应用。通过 DockerFile 可以快速生成一个容器，如果要多个容器配合使用，那么就可以通过该编排工具完成。&lt;/p></description></item><item><title>C++ 右值引用</title><link>https://gohalo.github.io/cn/blog/cpp-right-value-reference/</link><pubDate>Fri, 20 Dec 2019 21:18:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/cpp-right-value-reference/</guid><description>&lt;p>在 C++11 的新特性中增加了所谓的右值引用的支持，其主要目的是为了解决两个问题：A) 临时对象非必要的拷贝操作；B) 在模板函数中如何按照参数的实际类型进行转发。&lt;/p>
&lt;p>同时，和右值引用相关的概念比较多，包括了纯右值、将亡值、Universal References、引用折叠、移动语义、Move语义和完美转发等等，这里简单介绍。&lt;/p></description></item><item><title>Bash 常用技巧整理</title><link>https://gohalo.github.io/cn/blog/bash-some-tips/</link><pubDate>Sat, 19 Oct 2019 23:19:07 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/bash-some-tips/</guid><description>&lt;p>整理一些常见 Bash 的使用技巧，例如 Here Document、特殊字符文件处理、字符集设置等。&lt;/p></description></item><item><title>Linux 内存检查工具 Valgrind 介绍</title><link>https://gohalo.github.io/cn/blog/c-linux-tools-memory-valgrind/</link><pubDate>Sat, 12 Oct 2019 21:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/c-linux-tools-memory-valgrind/</guid><description>&lt;p>Valgrind 可以用于构建动态分析工具，包括一个工具集，每个工具可以进行一类的调试、分析、测试，以帮助完善程序。&lt;/p>
&lt;p>该工具采用的是模块化方式，可以很容易创建新的工具而又不会扰乱现有工具。&lt;/p></description></item><item><title>常用 Bash 脚本</title><link>https://gohalo.github.io/cn/blog/bash-some-useful-scripts/</link><pubDate>Thu, 10 Oct 2019 19:14:07 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/bash-some-useful-scripts/</guid><description>&lt;p>这里总结一些常见的脚本，例如备份、日志清理等等。&lt;/p></description></item><item><title>Linux 系统配置</title><link>https://gohalo.github.io/cn/blog/linux-system-config/</link><pubDate>Fri, 27 Sep 2019 19:49:36 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-system-config/</guid><description>&lt;p>一些与 Linux 系统配置相关的介绍。&lt;/p></description></item><item><title>Drone 使用</title><link>https://gohalo.github.io/cn/blog/cicd-drone-introduce/</link><pubDate>Mon, 26 Aug 2019 21:38:05 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/cicd-drone-introduce/</guid><description>&lt;p>相对于常见的 Jenkins 来说，其非常简洁，同时拥有可以满足基本需求的能力，并且提供了许多实用的插件，如 GitHub、Gogs、Email 等等，再结合 Gogs 可以实现持续集成和持续部署的方案。&lt;/p></description></item><item><title>GoLang Delve 调试工具</title><link>https://gohalo.github.io/cn/blog/golang-debug-delve/</link><pubDate>Tue, 23 Jul 2019 22:19:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-debug-delve/</guid><description>&lt;p>Delve 是 GoLang 的三方调试器，相比 GDB 来说能更好的理解 GoLang 的运行时，包括数据结构、表达式等，目前支持 Linux、Windows 以及 Mac 等平台。&lt;/p></description></item><item><title>Dockerfile 简介</title><link>https://gohalo.github.io/cn/blog/docker-dockerfile/</link><pubDate>Thu, 11 Jul 2019 21:48:10 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/docker-dockerfile/</guid><description>&lt;p>Dockerfile 可以用来创建一个镜像，允许在该文件中调用一些命令行中的命令，这样可以利用一个基础镜像，然后附加一些基础操作，最后直接自动生成新镜像。&lt;/p></description></item><item><title>Linux 可执行文件解析工具</title><link>https://gohalo.github.io/cn/blog/c-linux-tools-executable-binary-parse/</link><pubDate>Sat, 08 Jun 2019 21:19:32 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/c-linux-tools-executable-binary-parse/</guid><description>&lt;p>主要是在如何解析 ELF 格式的文件。&lt;/p></description></item><item><title>Linux 常用配置</title><link>https://gohalo.github.io/cn/blog/linux-basic-common-setup/</link><pubDate>Tue, 21 May 2019 20:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-basic-common-setup/</guid><description>&lt;p>这里简单整理在 Linux 安装过程中常见的配置。&lt;/p></description></item><item><title>C/CPP 静态链接顺序</title><link>https://gohalo.github.io/cn/blog/c-cpp-static-linkage/</link><pubDate>Sun, 28 Apr 2019 22:10:33 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/c-cpp-static-linkage/</guid><description>&lt;p>静态链接和动态链接最大的区别就在于链接的时机不一样，静态链接是在生车可执行程序前，而动态链接的进行则是在程序执行时，而且静态链接库的位置不同将会影响二进制文件生成。&lt;/p></description></item><item><title>GoLang 基本语法介绍</title><link>https://gohalo.github.io/cn/blog/golang-basic-syntax/</link><pubDate>Thu, 25 Apr 2019 19:28:10 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-basic-syntax/</guid><description>&lt;p>简单介绍常见的语法，例如 import、异常处理、反射等。&lt;/p></description></item><item><title>git 常见问题整理</title><link>https://gohalo.github.io/cn/blog/git-faqs/</link><pubDate>Thu, 18 Apr 2019 18:38:55 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-faqs/</guid><description>&lt;p>整理下常见的 git 问题。&lt;/p></description></item><item><title>Perf 使用简介</title><link>https://gohalo.github.io/cn/blog/linux-perf-introduce/</link><pubDate>Wed, 27 Feb 2019 21:39:50 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-perf-introduce/</guid><description>&lt;p>Perf 全名是 Performance Event，在 Linux 2.6.31 以后内建的系统性能分析工具，由内核社区维护和发展，不仅可以用于应用程序的性能统计分析，也可以应用于内核代码的性能统计和分析。&lt;/p>
&lt;p>这里简单介绍。&lt;/p></description></item><item><title>K8S Pause</title><link>https://gohalo.github.io/cn/blog/kubernets-basic-components-pause/</link><pubDate>Sat, 12 Jan 2019 21:50:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/kubernets-basic-components-pause/</guid><description>&lt;p>在 K8S 的 Slave 节点上，除了本身启动的容器外，还会看到很多的 Pause 容器，一般是一个 Pod 会对应一个 Pause 。&lt;/p>
&lt;p>那么这个 Pause 的用途是什么？&lt;/p></description></item><item><title>git 多个远端仓库</title><link>https://gohalo.github.io/cn/blog/git-tips-multi-remote-repos/</link><pubDate>Wed, 26 Dec 2018 19:38:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-tips-multi-remote-repos/</guid><description>&lt;p>Git 作为一个分布式的仓库，可以配置多个远端，这里介绍如何将一个本地仓库同步到不同的远端仓库中，最常见的是开源代码时对应了不同仓库地址。&lt;/p></description></item><item><title>C 动态参数使用详解</title><link>https://gohalo.github.io/cn/blog/c-dynamic-arguments/</link><pubDate>Wed, 19 Dec 2018 21:40:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/c-dynamic-arguments/</guid><description>&lt;p>在使用过程中，通常会有参数个数不确定，最常见的是 &lt;code>printf&lt;/code> 这类的函数，只有在使用时才能确定参数的个数以及其类型。&lt;/p>
&lt;p>这里详细介绍其使用以及基本原理。&lt;/p></description></item><item><title>Bash 自动补全机制详解</title><link>https://gohalo.github.io/cn/blog/bash-auto-completion-introduce/</link><pubDate>Sat, 08 Dec 2018 19:17:02 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/bash-auto-completion-introduce/</guid><description>&lt;p>在 Linux 命令行中，当输入字符后，按两次 &lt;code>Tab&lt;/code> 键，Shell 就会列出以这些字符打头的所有可用命令，如果只有一个命令匹配到，按一次 &lt;code>Tab&lt;/code> 键就自动将这个命令补全。&lt;/p>
&lt;p>比如，如果想更改密码，但只记得这个命令前几个字母是 pa，此时按 &lt;code>Tab&lt;/code> 键 Shell 就会自动补全 passwd 命令，非常方便。除了命令补全，还有路径、文件名补全，这个在通过 cd 命令切换到指定目录时特别好用。&lt;/p>
&lt;p>这里详细介绍其使用方法。&lt;/p></description></item><item><title>Bash 自动补全机制详解</title><link>https://gohalo.github.io/cn/blog/llvm-compiler-infrastructure-introduce/</link><pubDate>Sat, 08 Dec 2018 19:17:02 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/llvm-compiler-infrastructure-introduce/</guid><description>&lt;p>LLVM 计划启动于 2000 年，由 UIUC 大学的 Chris Lattner 博士主持，后来入职 Apple 并继续推广，所以 Apple 也就成了主要的赞助商。&lt;/p>
&lt;p>最初是 Low Level Virtual Machine 的缩写，不过随着发展，逐渐整合成了一整套的编译工具，所以官方也就放弃了原有的缩写，而修改成 The LLVM Compiler Infrastructure 。&lt;/p>
&lt;p>其强大之处在于模块化，可以很方便适配不同的语言以及硬件平台。&lt;/p></description></item><item><title>Bash 生成随机内容</title><link>https://gohalo.github.io/cn/blog/bash-tips-random-content/</link><pubDate>Fri, 30 Nov 2018 23:30:19 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/bash-tips-random-content/</guid><description>&lt;p>在编写代码时，一般会使用伪随机函数，不过对于安全通讯往往存在风险，Linux 提供了随机生成设备，可以提供基本满足真随机内容。&lt;/p>
&lt;p>这里介绍常见的使用技巧。&lt;/p></description></item><item><title>Bash 模拟终端介绍</title><link>https://gohalo.github.io/cn/blog/bash-terminal-emulator/</link><pubDate>Tue, 16 Oct 2018 19:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/bash-terminal-emulator/</guid><description>&lt;p>Bash 是一个交互程序，不过现在都是基于虚拟终端来实现，不同虚拟终端支持能力各有区别，这里简单介绍。&lt;/p></description></item><item><title>GCC 强弱符号、引用基本介绍</title><link>https://gohalo.github.io/cn/blog/c-strong-weak-symbol-reference/</link><pubDate>Sat, 13 Oct 2018 18:19:24 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/c-strong-weak-symbol-reference/</guid><description>&lt;p>在编程时经常会碰到一种情况叫符号重复定义，一般意味着多个目标文件中含有相同名字全局符号的定义，而有时又不会报错，为什么？&lt;/p>
&lt;p>在 glibc 中定义了很多类似 &lt;code>read()&lt;/code> &lt;code>open()&lt;/code> 的函数，但是又可以自己定义相同的函数？&lt;/p>
&lt;p>这就涉及到了强弱符号以及强弱引用的概念了，这里详细介绍。&lt;/p></description></item><item><title>GoLang 异常处理</title><link>https://gohalo.github.io/cn/blog/golang-basic-error-panic/</link><pubDate>Sat, 15 Sep 2018 21:39:58 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-basic-error-panic/</guid><description>&lt;p>Golang 中的错误处理是一个被大家经常拿出来讨论的话题(另外一个是泛型)，这里简单介绍其使用方法。&lt;/p></description></item><item><title>GoLang 基本介绍</title><link>https://gohalo.github.io/cn/blog/golang-basic-introduce/</link><pubDate>Tue, 21 Aug 2018 21:09:38 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-basic-introduce/</guid><description>&lt;p>GoLang 目前越来越火，包括了 Docker、InfluxDB、etcd 等等，越来越多的工程都在使用 GoLang 。虽然它的语法都比较 &amp;ldquo;奇葩&amp;rdquo;，一些高级语言支持的特性却都不支持，但其高并发、高效率等等，也使其热度不减。&lt;/p>
&lt;p>这篇文章主要简单介绍下 GoLang 环境的搭建。&lt;/p></description></item><item><title>GORM 操作简介</title><link>https://gohalo.github.io/cn/blog/golang-db-gorm-basic/</link><pubDate>Tue, 21 Aug 2018 21:09:38 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-db-gorm-basic/</guid><description>&lt;p>Object Relational Mapping, ORM 对象关系映射，用于将数据库中的数据与代码中的结构体进行映射，不同语言的实现方式略有区别，但是目的基本相同。&lt;/p>
&lt;p>GoLang 中有多种映射库，这里简单介绍常见的 GORM 使用方式。&lt;/p></description></item><item><title>GoLang DB 操作简介</title><link>https://gohalo.github.io/cn/blog/golang-db-introduce/</link><pubDate>Sun, 19 Aug 2018 20:19:08 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-db-introduce/</guid><description>&lt;p>GoLang 提供了标准包用于对 SQL 数据库进行访问，作为操作数据库的入口对象 sql.DB, 主要为提供了两个重要的功能：A) 提供管理底层数据库连接的打开和关闭操作；B) 管理数据库连接池。&lt;/p>
&lt;p>需要注意的是，sql.DB 表示操作数据库的抽象访问接口，而非一个数据库连接对象，会根据实际的驱动打开关闭数据库连接，管理连接池。&lt;/p>
&lt;p>这里简单介绍 MySQL 的使用方式。&lt;/p></description></item><item><title>GoLang 模板使用简介</title><link>https://gohalo.github.io/cn/blog/golang-template-introduce/</link><pubDate>Sun, 19 Aug 2018 20:19:08 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-template-introduce/</guid><description>&lt;p>在前后端分离的时代，模板语言使用的已经很少了，不过很多特定的场景还是很有用的，这里介绍其基本使用方法。&lt;/p></description></item><item><title>gdbinit 功能介绍</title><link>https://gohalo.github.io/cn/blog/gdb-gdbinit-script/</link><pubDate>Mon, 13 Aug 2018 20:10:51 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/gdb-gdbinit-script/</guid><description>&lt;p>在启动时，会在当前用户目录下寻找文件名为 &lt;code>.gdbinit&lt;/code> 的文件，如果存在，会执行该文件中的所有命令，通常用于简单的配置命令，如设置所需的默认汇编程序格式、输出数据默认基数，还可以读取宏编码语言，从而实现更强大的自定义函数。&lt;/p></description></item><item><title>GoLang HTTP 使用简介</title><link>https://gohalo.github.io/cn/blog/golang-http-webserver-introduce/</link><pubDate>Fri, 27 Apr 2018 18:13:19 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-http-webserver-introduce/</guid><description>&lt;p>除去细节，理解 HTTP 构建的网络应用只要关注客户端和服务端的处理，服务器主要用来接收客户端的请求，然后返回响应，在接收请求并处理的过程中，最重要的莫过于路由 (Router)。&lt;/p>
&lt;p>这里简单介绍如何使用 &lt;code>net/http&lt;/code> 构建 HTTP 请求。&lt;/p></description></item><item><title>Linux 网络状态查看</title><link>https://gohalo.github.io/cn/blog/linux-network-status/</link><pubDate>Thu, 26 Apr 2018 21:19:27 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-network-status/</guid><description>&lt;p>直接通过 &lt;code>man 8 netstat&lt;/code> 查看帮助时就可以发现这样的一句话 &lt;code>This program is obsolete. Replacement for netstat is ss.&lt;/code>，而且后面还有几个相关的等价示例介绍。&lt;/p>
&lt;p>所以这里简单介绍与 ss 相关的指令。&lt;/p></description></item><item><title>Bash 基本语法</title><link>https://gohalo.github.io/cn/blog/bash-basic-syntax/</link><pubDate>Thu, 01 Mar 2018 22:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/bash-basic-syntax/</guid><description>&lt;p>在 Linux 中通过 Bash 与系统进行简单的交互，但是，通常可能会有一些负责的逻辑进行处理，这就涉及到了 Bash 的编程，实际上就是通过命令行以及一些常见的处理逻辑。&lt;/p>
&lt;p>这里简单介绍常见的语法。&lt;/p></description></item><item><title>JWT 简介</title><link>https://gohalo.github.io/cn/blog/golang-json-web-token-jwt/</link><pubDate>Tue, 13 Feb 2018 21:27:20 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-json-web-token-jwt/</guid><description>&lt;p>在程序开发中，用户认证授权是一个绕不过的重难点，以前的开发模式下，cookie 和 session 认证是主流，随着前后端分离的趋势，基于 Token 的认证方式成为主流。&lt;/p>
&lt;p>而 JWT(RFC 7519) 是基于 Token 认证方式的一种机制，是实现单点登录认证的一种有效方法。&lt;/p>
&lt;p>这里详细介绍其设计和使用方式。&lt;/p></description></item><item><title>DWARF 格式简介</title><link>https://gohalo.github.io/cn/blog/gdb-dwarf-format-introduce/</link><pubDate>Sun, 10 Dec 2017 23:49:17 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/gdb-dwarf-format-introduce/</guid><description>&lt;p>也就是 Debugging With Attributed RecordFormats, DWARF ，到目前为止，应该包括了 &lt;code>V1~5&lt;/code> 共五个版本，其中 dwarf2 对 dwarf1 的改变很大，而后续的版本基本上是对前者的扩展。&lt;/p>
&lt;p>这一格式独立于语言，不过使用比较多的是 C/C++ ，这里简单介绍在 GDB 中，如何对这些调试信息进行组织、实现，并且如何利用调试信息进行 C 语言级别的调试。&lt;/p></description></item><item><title>Python 三方库 requests</title><link>https://gohalo.github.io/cn/blog/python-third-package-requests/</link><pubDate>Thu, 30 Nov 2017 18:39:17 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-third-package-requests/</guid><description>&lt;p>这是一个简单但是非常优雅的 HTTP 库，对于一些常见的 API 调用非常简单，&lt;/p></description></item><item><title>GoLang 日志模块使用介绍</title><link>https://gohalo.github.io/cn/blog/golang-log-module-introduce/</link><pubDate>Mon, 16 Oct 2017 19:29:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-log-module-introduce/</guid><description>&lt;p>打印日志是最常规的需求，GoLang 的基础库只提供了简单的格式化功能，但是很多基础功能不存在，例如日志级别、文件切割等等。&lt;/p>
&lt;p>这里介绍 Uber 开发的一个日志库 ZAP 。&lt;/p></description></item><item><title>Git 补丁相关操作</title><link>https://gohalo.github.io/cn/blog/git-tips-patch-command-usage/</link><pubDate>Sun, 08 Oct 2017 19:30:02 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/git-tips-patch-command-usage/</guid><description>&lt;p>在 Linux 中可以通过 diff patch 命令生成补丁以及打补丁，而且 git 实际上也提供了很简单的命令直接生成 Patch 文件，然后，可以再结合 patch 命令使用即可。&lt;/p>
&lt;p>这里简单介绍其使用方法。&lt;/p></description></item><item><title>GDB 栈帧简介</title><link>https://gohalo.github.io/cn/blog/gdb-stack-frame-introduce/</link><pubDate>Thu, 05 Oct 2017 21:19:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/gdb-stack-frame-introduce/</guid><description>&lt;p>栈是一块内存空间，会从高地址向低地址增长，同时在函数调用过程中，会通过栈寄存器来维护栈帧相关的内容。函数运行时，栈帧 (Stack Frame) 非常重要，包含了函数的局部变量以及函数调用之间的传参。&lt;/p></description></item><item><title>Linux C 网络编程</title><link>https://gohalo.github.io/cn/blog/c-linux-network-socket-program/</link><pubDate>Mon, 21 Aug 2017 17:49:01 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/c-linux-network-socket-program/</guid><description>&lt;p>在 linux 中的网络编程会涉及到很多的细节，这里简单整理常见的问题，例如套接子信息、域名解析等等，有些也可能不怎么常见，以备不时之需。&lt;/p></description></item><item><title>C++ 构造析构函数详细分析</title><link>https://gohalo.github.io/cn/blog/cpp-constructor-destructor/</link><pubDate>Wed, 31 May 2017 20:19:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/cpp-constructor-destructor/</guid><description>&lt;p>在 C++ 中，当类的内存申请完之后，会通过构造函数进行初始化，而构造函数在不同的使用场景下又分成了不同的类型，例如默认构造函数、简单构造函数、复制构造函数、转换构造函数等等。&lt;/p>
&lt;p>同时，在涉及到赋值操作时，最好将赋值操作运算符也重载掉，尤其是会动态申请内存的类；另外，随着 C++11 标准的发布，有引入了移动构造函数以及移动赋值运算符。&lt;/p>
&lt;p>这就导致构造函数与赋值重载不断重叠，很容易引起混淆，所以，这里就详细介绍其使用方式。&lt;/p></description></item><item><title>GDB Python 脚本</title><link>https://gohalo.github.io/cn/blog/gdb-python-script/</link><pubDate>Sat, 15 Apr 2017 20:39:11 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/gdb-python-script/</guid><description>&lt;p>GDB 很早就支持自定义脚本辅助调试，不过语法比较老，不如 Python 使用方便广泛，从 GDB 7.X(2009) 版本开始支持 Python Scripting ，不过建议使用 9.X 以上的版本，关于 Python 的详细特性可以参考 &lt;a href="https://www.sourceware.org/gdb/news/">GDB News&lt;/a> 的内容。&lt;/p></description></item><item><title>关于 C++ 基本概念介绍</title><link>https://gohalo.github.io/cn/blog/cpp-basic-syntax-introduce/</link><pubDate>Mon, 20 Mar 2017 21:15:10 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/cpp-basic-syntax-introduce/</guid><description>&lt;p>一般会将 C++ 划分为所谓的中级语言，从底层的 C 语言发展而来，提供了比 C 更丰富的特性，而又没有提供类似 Java、Python 等语言的高级特性，所以，介于中间，称之为中级语言。&lt;/p>
&lt;p>随着 C++11 标准的发布，以及更新的 C++0x 标准，C++ 提供的功能越来越完善。&lt;/p>
&lt;p>这里仅简单介绍下基本的概念。&lt;/p></description></item><item><title>GDB 基本功能介绍</title><link>https://gohalo.github.io/cn/blog/gdb-basic-usage-introduce/</link><pubDate>Fri, 10 Mar 2017 22:30:31 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/gdb-basic-usage-introduce/</guid><description>&lt;p>GNU Project Debugger, GDB 一个代码调试工具，通过系统提供的 ptrace 接口实现的控制进程，然后可以在进程内部查看信息，甚至调用函数。&lt;/p></description></item><item><title>Linux 时间相关概念介绍</title><link>https://gohalo.github.io/cn/blog/linux-time-basic/</link><pubDate>Sun, 15 Jan 2017 21:16:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-time-basic/</guid><description>&lt;p>简单介绍在 Linux 中部分与时间相关的概念，例如时区、闰秒、夏令时、ntp 等。&lt;/p>
&lt;p>&amp;ldquo;现在几点了？&amp;rdquo; 或者 &amp;ldquo;离过年还有多久？&amp;rdquo; 这恐怕连小学生也觉得是再简单不过的问题了；但是如果问及 &amp;ldquo;时间是什么？&amp;rdquo; 恐怕绝大多数人都会顿觉茫然。&lt;/p></description></item><item><title>C 代码覆盖率</title><link>https://gohalo.github.io/cn/blog/c-coverage-introduce/</link><pubDate>Sun, 13 Nov 2016 17:12:19 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/c-coverage-introduce/</guid><description>&lt;p>我们已经提供了一些测试用例，但是这些测试用例的好坏如何评估？是否已经覆盖了所有的函数？函数中的分支以及边界条件是否都已经覆盖？&lt;/p>
&lt;p>这就需要通过代码覆盖率进行查看，这里简单介绍其使用方法。&lt;/p></description></item><item><title>C Mock 使用以及机制介绍</title><link>https://gohalo.github.io/cn/blog/c-linux-mock-wrap-unit-test/</link><pubDate>Sun, 16 Oct 2016 19:29:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/c-linux-mock-wrap-unit-test/</guid><description>&lt;p>编写高效松耦合的模块，体现的是功力，而完善的测试用例则是习惯。包括了一些异常场景的积累，代码重构时的验证等等，编写有效的测试用例就尤为重要。&lt;/p>
&lt;p>而 C 语言，由于其偏向于底层，导致不能像 Java、Python、GO 那样提供了成熟的测试框架。&lt;/p>
&lt;p>这里简单介绍一下基于 cmocka 修改的测试框架，会通过一些宏定义处理部分问题，当然，真正使用时还需要一些其它的技巧。&lt;/p></description></item><item><title>CMake 常用示例</title><link>https://gohalo.github.io/cn/blog/cmake-some-tips/</link><pubDate>Sun, 16 Oct 2016 19:29:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/cmake-some-tips/</guid><description>&lt;p>整理常用的示例。&lt;/p></description></item><item><title>GoLang JSON 编码解码</title><link>https://gohalo.github.io/cn/blog/golang-json-encode-decode-introduce/</link><pubDate>Fri, 07 Oct 2016 19:29:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-json-encode-decode-introduce/</guid><description>&lt;p>随着 REST API 的兴起，基本上已经前后端分离，更多的返回格式是 json 字符串，这里简单讨论下在 GoLang 中如何编码和解码 JSON 结构。&lt;/p>
&lt;p>GoLang 提供了 &lt;code>encoding/json&lt;/code> 的标准库用于 JSON 的处理，简单记录 GoLang 中使用 JSON 的常用技巧。&lt;/p></description></item><item><title>GoLang 参数校验</title><link>https://gohalo.github.io/cn/blog/golang-validator-introduce/</link><pubDate>Tue, 26 Jul 2016 20:28:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-validator-introduce/</guid><description>&lt;p>接口开发经常会遇到一个问题是后端需要大量代码进行参数校验，防止用户的恶意请求。最常见的如日期格式、用户年龄、性别等必须是正常的值，不能随意设置。&lt;/p>
&lt;p>这里介绍 GoLang 中的一个参数校验库。&lt;/p></description></item><item><title>GoLang 实现 SSH 相关示例</title><link>https://gohalo.github.io/cn/blog/ssh-golang-examples/</link><pubDate>Tue, 26 Jul 2016 20:28:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/ssh-golang-examples/</guid><description>&lt;p>GoLang 提供了基础的 SSH 库，可以用来作为服务端或者客户端使用，这里整理了常见的用法。&lt;/p></description></item><item><title>SSH 代理设置</title><link>https://gohalo.github.io/cn/blog/ssh-port-forwarding/</link><pubDate>Tue, 26 Jul 2016 20:28:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/ssh-port-forwarding/</guid><description>&lt;p>通过 ssh 的端口转发或者隧道 (tunneling) 功能，可以实现: A) 加密 SSH Client 端至 SSH Server 端之间的通讯数据；B) 突破防火墙的限制完成一些之前无法建立的 TCP 连接。&lt;/p></description></item><item><title>SSH 便捷登录配置</title><link>https://gohalo.github.io/cn/blog/ssh-simplify-your-life/</link><pubDate>Tue, 26 Jul 2016 20:28:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/ssh-simplify-your-life/</guid><description>&lt;p>通常在一个 ssh 链接中，需要指定用户名、主机名、主机端口号、配置参数等信息，如果每次登陆一台主机都要输入，那么就会变的非常麻烦，而且一些 IP 地址通常又非常难记。&lt;/p>
&lt;p>为此，我们可以通过 OpenSSH 的客户端配置文件简化我们的登陆方式，下面简单介绍下。&lt;/p></description></item><item><title>SSH 基本介绍</title><link>https://gohalo.github.io/cn/blog/ssh-basic-introduce/</link><pubDate>Tue, 26 Jul 2016 20:28:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/ssh-basic-introduce/</guid><description>&lt;p>传统的 telnet、rcp ftp、rlogin、rsh 都是极不安全的，并且会使用明文传送密码，OpenSSH 提供了服务端后台程序和客户端工具，用来加密远程控件和文件传输过程中的数据，并由此来代替原来的类似服务。&lt;/p>
&lt;p>OpenSSH 是 SSH (Secure SHell) 协议的免费开源实现，SSH 协议族可以用来进行远程控制，或在计算机之间传送文件。这里简单介绍下 SSH 和 OpenSSH 的使用。&lt;/p></description></item><item><title>SSH 密钥管理</title><link>https://gohalo.github.io/cn/blog/ssh-keys-manage/</link><pubDate>Tue, 26 Jul 2016 20:28:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/ssh-keys-manage/</guid><description>&lt;p>服务端会保存自己的公私钥，客户端每次链接时会确认是否为上次记录主机。&lt;/p></description></item><item><title>SSH 证书登录介绍</title><link>https://gohalo.github.io/cn/blog/ssh-cert-manage/</link><pubDate>Tue, 26 Jul 2016 20:28:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/ssh-cert-manage/</guid><description>&lt;p>从 OpenSSH 5.4 版本 (2010年) 开始支持 SSH 证书，相比 SSL 中使用的证书来说，SSH 的更为简单，没有证书链只有一个 CA 证书，这样就免去了商业签名授权。&lt;/p></description></item><item><title>软件 DNSmasq 使用介绍</title><link>https://gohalo.github.io/cn/blog/linux-dnsmasq-introduce/</link><pubDate>Sun, 20 Dec 2015 21:50:32 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-dnsmasq-introduce/</guid><description>&lt;p>通常上网使用的 DNS 服务器都是由电信、联通等运营商提供的，或者是公用的 DNS 解析服务器，例如 Google 提供的解析器，这通常会带来些问题，如有时解析不正常、经常弹出广告等。&lt;/p>
&lt;p>有时我们需要管理 DNS 解析，如加速 DNS 的解析过程、纠正错误的 DNS 解析记录、配置局域网的 DNS 解析等等。&lt;/p>
&lt;p>DNSmasq 就是其中的一个主机上最常用的解决方案，相比 BIND 来说，其更加小巧，配置更加方便，其源码仅有 2 万多行，但足以满足常见的需求。&lt;/p></description></item><item><title>InnoDB 隔离级别使用实例</title><link>https://gohalo.github.io/cn/blog/mysql-innodb-isolation-level/</link><pubDate>Sun, 01 Nov 2015 19:58:25 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-innodb-isolation-level/</guid><description>&lt;p>数据库的事务存在着 ACID 四个属性，而在实际应用场景中，当面临着性能需求时，隔离性往往成为最容易妥协的一个，其实际上就是指数据库在并发事务下的表现。&lt;/p>
&lt;p>在本文章中，详细介绍下 InnoDB 中关于隔离级别的实现。&lt;/p></description></item><item><title>GoLang Echo 中间件</title><link>https://gohalo.github.io/cn/blog/golang-echo-middleware/</link><pubDate>Tue, 06 Oct 2015 19:29:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/golang-echo-middleware/</guid><description>&lt;p>Echo 中间件指的是可以拦截 http 请求的特殊函数，在请求和响应中间可以注册多个中间件，每个中间件执行不同的功能，一个中间执行完再轮到下一个中间件执行。&lt;/p></description></item><item><title>Bash 基本介绍</title><link>https://gohalo.github.io/cn/blog/bash-basic-introduce/</link><pubDate>Wed, 23 Sep 2015 22:55:32 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/bash-basic-introduce/</guid><description>&lt;p>一些与 Bash 相关的内容，如命令执行顺序、配置文件、通配符、元字符及转义字符等。&lt;/p></description></item><item><title>Bash 命令注释</title><link>https://gohalo.github.io/cn/blog/bash-tips-command-comment/</link><pubDate>Sat, 19 Sep 2015 21:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/bash-tips-command-comment/</guid><description>&lt;p>在通过 &lt;code>man&lt;/code> 查看命令时，可以看到对参数解释时是有大概的固定格式的，这里基本介绍如下。&lt;/p></description></item><item><title>SSH 通讯协议介绍</title><link>https://gohalo.github.io/cn/blog/ssh-protocol-details/</link><pubDate>Thu, 17 Sep 2015 22:58:24 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/ssh-protocol-details/</guid><description>&lt;p>SSH 通讯是基于几个基本协议完成，这里简单介绍。&lt;/p></description></item><item><title>Python 模块简介</title><link>https://gohalo.github.io/cn/blog/python-modules-introduce/</link><pubDate>Sun, 07 Jun 2015 21:39:22 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-modules-introduce/</guid><description>在 Python 解析器中，每次重新进入，之前定义的函数、变量等都会丢失，所以，通常是将代码保存在文件中运行，而随着功能增加，文件会变得越来越大，为了方便维护，会将其拆分成多个文件。
其它语言也有类似的问题，Python 将其称为模块 (Module) ，通过模块可以定义函数、类、变量等，从而更有逻辑地组织 Python 代码。
这里介绍模块的引入、搜索、制作等一些常见的问题。
简介 # 每个文件都是一个模块 (module)，其模块名就是对应的文件名，在模块内运行时，可以通过全局变量 __name__ 获取，最常见的就是 __main__ 的判断，也就是是否为主 Pyhton 脚本。
if __name__ == &amp;#34;__main__&amp;#34;: print(&amp;#34;Hello World&amp;#34;) 也就是该文件可以作为模块引入其它代码中，也可以作为一个独立的执行文件运行，而判断的逻辑就是这里的 if __name__ == &amp;quot;__main__&amp;quot; 语句，直接调用脚本时，对应 __name__ 变量保存的是 __main__ ，如果是引入的模块，则是模块名称。
模块导入 # 可以通过 import 关键字导入模块，也就是添加到当前的命名空间中，根据不同的使用场景，有如下的几种方式。
# 直接导入模块，可以通过math.cos()调用 import math # 导入模块中的函数，这样可以直接调用cos sin，不过很容易被覆盖 from math import cos, sin # 导入模块的所有符号 from math import * # 导入模块的符号，为了防止名字覆盖，将其重命名 from math import pi as PI 导入的模块会保存在 sys.modules 中，这是一个字典，如果多次导入第二次实际不会有加载的动作。</description></item><item><title>MySQL 示例数据库</title><link>https://gohalo.github.io/cn/blog/mysql-sample-database/</link><pubDate>Sun, 12 Apr 2015 18:28:19 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/mysql-sample-database/</guid><description>&lt;p>一些简单的数据库示例，可以用于简单演示、测试使用。&lt;/p></description></item><item><title>TMUX 简介</title><link>https://gohalo.github.io/cn/blog/tmux-terminal-introduce/</link><pubDate>Wed, 21 May 2014 19:49:37 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/tmux-terminal-introduce/</guid><description>&lt;p>TMUX 类似于 screen，是一个窗口管理器，而且功能更加强大，提供了强劲的、易于使用的命令行界面，可横向和纵向分割窗口，支持 UTF-8 编码及 256 色终端等特性。&lt;/p>
&lt;p>接下来简单介绍下 TMUX 的使用。&lt;/p></description></item><item><title>Python 基本环境准备</title><link>https://gohalo.github.io/cn/blog/python-environment-prepare/</link><pubDate>Thu, 17 Oct 2013 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/python-environment-prepare/</guid><description>&lt;p>与 Java 类似，Python 底层通过一个虚拟机运行，而且已经移植到了多个平台上，也就是，需要根据不同的平台安装虚拟机，实际上最主要的就是 python 可执行文件。&lt;/p>
&lt;p>现在大多数安装的都是 CPython ，也就是 C 语言实现的 Python ，通常，直接使用安装包安装即可。&lt;/p>
&lt;p>这里详细介绍如何安装环境，使用虚拟环境等等。&lt;/p></description></item><item><title>【专题】Web 前端编程语言</title><link>https://gohalo.github.io/cn/blog/topic-language-webs/</link><pubDate>Wed, 15 Dec 2010 22:10:52 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-language-webs/</guid><description>CSS # 基本概念 包括基本语法、样式、盒子模型等概念。 SCSS 语法 在 SASS3 引入的新语法，完全监控 CSS3 并继承了 SASS 强大能力。 其它 # RestAPI 最佳实践 相对来说使用比较广泛的前后端交互接口，也包含了常见的 OpenAPI 等规范。</description></item><item><title>Linux 常用命令 rsync 介绍</title><link>https://gohalo.github.io/cn/blog/linux-command-rsync-introduce/</link><pubDate>Wed, 15 Dec 2010 21:18:32 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-command-rsync-introduce/</guid><description>&lt;p>rsync 是一个远程数据同步工具，使用 &amp;ldquo;rsync算法&amp;rdquo; 来使本地和远程两个主机之间的文件达到同步，该算法只传送两个文件的不同部分，从而可以有效提高传输效率，而且本地复制文件也可以提高效率。&lt;/p></description></item><item><title>【专题】C/C++ 编程语言</title><link>https://gohalo.github.io/cn/blog/topic-language-c-cpp/</link><pubDate>Fri, 12 Nov 2010 20:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-language-c-cpp/</guid><description>C # 链接顺序 静态库的不同顺序会影响最终二进制的生成，这里简单介绍。 动态参数 在函数传参过程中允许使用多个动态参数，这里介绍如何使用以及其原理。 强弱符号 编译过程中提供了强弱符号的概念，可以用于简单的覆盖。 CPP # 基本概念 介绍基本的语法，例如封装、继承、多态、多线程等等。 构造析构 在对象内存申请完之后会通过构造函数初始化，不同场景包含了多种构造函数。 强制转换 按照不同的场景提供了不同的类型转换方法，这样在异常是可以及时发现。 右值引用 按照不同的场景提供了不同的类型转换方法，这样在异常是可以及时发现。 Linux 编程 # 在 Linux 环境下会有不同的实现。
网络编程 网络编程中的基本概念，例如结构体、域名解析、IP 地址等。 工具解析 介绍一些在 Linux 常用的二进制解析工具。 进程创建 Linux 中有多种子进程的创建方式，这里详细介绍其用法。 单元测试 编译过程中提供了强弱符号的概念，可以用于类似单元测试的场景。 内存检查 # Valgrind 介绍一些在 Linux 常用的二进制解析工具。 GDB # GDB 是一个很强大的调试工具，支持远程调试、嵌入式调试、输出的重定向。
基本介绍 简单介绍其常用的功能，包括 watchpoint、catchpoint 等内容。 调试格式 这里对标准的 DWARF 格式进行详细介绍。 栈帧分析 栈是一块内存空间，会从高地址向低地址增长，用于保存临时变量、传参等。 初始脚本 启动时会默认加载初始化脚本，通常是部分命令配置以及一些复杂函数。 Python脚本 在 7.X 之后的版本中增加了 Python 脚本支持，比之前的 DSL 实现要强大很多。 LLVM # 基本介绍 Test # 测试主要是为了可以提前发现异常，尤其是当重构时，可以进行完整的验证，所以，就慢慢衍生出了所谓 Test Drived Develop, TDD，而且产生了很多测试方法。</description></item><item><title>K8S 本地集群 Kind 使用介绍</title><link>https://gohalo.github.io/cn/blog/kubernets-minimal-kind-cluster/</link><pubDate>Fri, 12 Nov 2010 20:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/kubernets-minimal-kind-cluster/</guid><description>kind 是 Kubernetes in Docker 的简写，是一个使用 Docker 容器作为 Nodes，在本地创建和运行 Kubernetes 群集的工具，适用于在本机创建 Kubernetes 群集环境进行开发和测试，而且支持离线部署。
简介 # 实际上 Kind 会通过 Docker 启动一个容器，然后容器中会启动多个进程的 Pod 服务，为了方便管理，还会在容器外部启动一个 kubelet 服务，这样就可以无需进入容器直接使用 kubectl 命令了。
其中 Node 是基于 Debain 实现的容器。
准备工作 # 可以直接从 Github Release 上下载相应的版本，可以直接下载二进制文件，然后添加到 PATH 环境变量所在目录下。 如果是离线使用，那么可以通过如下方式安装，实际上主要是准备 Docker 镜像。
----- 找台在线机器下载镜像，在上述Release Notes中会提及对应版本，也可以使用历史版本 # docker pull kindest/node:v1.27.2@sha256:3966ac761 ----- 然后打包，两种方式都可以 # docker save -o kind.v1.27.2.tar kindest/node:v1.27.2@sha256:3966ac761 # docker save kindest/node:v1.27.2@sha256:3966ac761 | gzip &amp;gt; kind.v1.27.2.tar.gz ----- 在所需的离线环境中加载镜像，并重新定义tag # docker load -i kind.</description></item><item><title>Linux 常用命令 inotify 介绍</title><link>https://gohalo.github.io/cn/blog/linux-command-inotify-introduce/</link><pubDate>Wed, 20 Oct 2010 20:17:52 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/linux-command-inotify-introduce/</guid><description>&lt;p>在 Linux 系统下 inotify 是一种强大的、细粒度的、异步的文件系统事件监控机制，通过该机制可以快速感知文件的变化，这样可以用于一些文件的实时同步。&lt;/p></description></item><item><title>【专题】Python 编程语言</title><link>https://gohalo.github.io/cn/blog/topic-language-python/</link><pubDate>Sun, 17 Oct 2010 18:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-language-python/</guid><description>&lt;p>Python 是一种解释型语言，提供了跨平台的支持，可以快速开发一些脚本，随着 AI 的兴起，提供了一些常见的开发框架，这里详解介绍 Python 的使用。&lt;/p></description></item><item><title>【专题】Rust 编程语言</title><link>https://gohalo.github.io/cn/blog/topic-language-rust/</link><pubDate>Sat, 16 Oct 2010 19:39:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-language-rust/</guid><description>&lt;p>可以将 Rust 理解为 C 的直接替代品，提供了系统级的性能，而且在很多方面更好，最常提到的就是内存安全，并且可以与遗留 C 代码原生互操作以进行增量替换。&lt;/p></description></item><item><title>【专题】GoLang 编程语言</title><link>https://gohalo.github.io/cn/blog/topic-language-golang/</link><pubDate>Wed, 06 Oct 2010 19:29:18 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-language-golang/</guid><description>&lt;p>GoLang 是谷歌 2009 年发布的开源编程语言，其开发人员都是计算机界大神一般的存在，提供了便捷的协程使用，具有很高的并发性。目前很多 Cloud Native 软件都是通过 GoLang 编写，例如 Docker、K8S、LXD 等等。&lt;/p></description></item><item><title>【专题】Bash 编程语言</title><link>https://gohalo.github.io/cn/blog/topic-language-bash/</link><pubDate>Sun, 19 Sep 2010 21:15:12 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-language-bash/</guid><description>&lt;p>Shell 是一个程序，用于用户和操作系统进行交互，相当于是一个命令解析器，Shell 有很多种，其实现有很多细节差异，不过大部分的语法基本相同。&lt;/p>
&lt;p>在 Linux 中默认的就是 Bash 实现，这里介绍其常用语法以及使用技巧。&lt;/p></description></item><item><title>【专题】开发环境</title><link>https://gohalo.github.io/cn/blog/topic-develop-workspace/</link><pubDate>Sat, 12 Jun 2010 20:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-develop-workspace/</guid><description>Git # Git 是一免费、开源的分布式版本控制系统，可有效、高速的处理从很小到非常大的项目版本管理，该工具是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发，其本意是为了替换 BitKeeper 。
除了 GitHub 外，开源的工具还有 GitLab、Gogs，以及 C 的相关库 libgit2 。
这里简单介绍一下常见概念及其操作。
常用技巧 # 免密登录 这里介绍对于 http 和 ssh 访问时如何免除密码输入。 子模块使用 可以将其它的库作为模块添加，这样就可以方便管理。 补丁管理 可以通过 git 生成补丁文件，然后可以在 Linux 中通过命令打补丁。 多源管理 介绍如何将一个本地仓库同步到不同的远端仓库中。 开源流程 这里以 GitHub 为例简单介绍一个常用的提交流程。 常见问题 整理下 git 中常见的问题、解决方案以及相关原因。 CICD # 用于搭建开发、自动部署等平台。
gogs 类似 GitLab 或者 GitHub 的 git 仓库，但是搭建起来更容易搭建，比较适合个人开发。 drone 类似于 Jenkins ，一个基于容器的持续交付平台，支持 Pipeline 的定义，基于 GoLang 开发。 VIM # 一个功能强大、高度可定制的文本编辑器，与其相匹敌的是 Emacs ，这两个都是不错的编辑器，在此不再比较两者的优劣，仅介绍 VIM 相关的内容。</description></item><item><title>Neovim 插件管理工具</title><link>https://gohalo.github.io/cn/blog/neovim-plugins-management/</link><pubDate>Sat, 12 Jun 2010 20:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/neovim-plugins-management/</guid><description>&lt;p>从 Neovim 0.5 版本开始，一般推荐使用 Lua 原生的 &lt;code>packer.nvim&lt;/code> 做插件管理，现在大多数插件都支持该管理工具。&lt;/p>
&lt;p>这里详细介绍其使用。&lt;/p></description></item><item><title>【专题】Linux 监控调优</title><link>https://gohalo.github.io/cn/blog/topic-linux-monitor/</link><pubDate>Wed, 21 Apr 2010 20:19:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-linux-monitor/</guid><description>系统监控 # CPU # Linux 监控之 CPU 简单介绍下 Linux 中与 CPU 监控相关的内容。 Network # 网络配置 常见的如主机名、网卡、路由等的配置。 状态查看 主要是网络状态查看，例如正在监听的端口信息。 其它 # 系统配置 常见的相关配置，例如 swap、sysctl 等。 性能调优 # 可以使用 CPU 性能计数器、tracepoints、kprobes、uprobes 对程序的各个指标进行统计。
Perf 随内核发布的一个老牌的性能诊断工具。</description></item><item><title>【专题】Linux 网络协议</title><link>https://gohalo.github.io/cn/blog/topic-linux-network/</link><pubDate>Sat, 10 Apr 2010 20:19:30 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-linux-network/</guid><description>其它 # 简单介绍一些与网络相关的通讯协议。
socks5 详细介绍代理协议。</description></item><item><title>【专题】Linux 安全相关</title><link>https://gohalo.github.io/cn/blog/topic-linux-security/</link><pubDate>Sat, 27 Mar 2010 21:18:34 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-linux-security/</guid><description>&lt;p>介绍 Linux 中与安全相关的内容，例如 SSH、SELinux 等，当然，也包括了一些安全相关基本的概念，例如加密算法、TLS 等等。&lt;/p>
&lt;p>这里作为一个专题介绍一些常见概念。&lt;/p></description></item><item><title>【专题】Linux 容器介绍</title><link>https://gohalo.github.io/cn/blog/topic-linux-container/</link><pubDate>Fri, 12 Mar 2010 20:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-linux-container/</guid><description/></item><item><title>K8S Pod 简介</title><link>https://gohalo.github.io/cn/blog/kubernets-components-pod/</link><pubDate>Fri, 12 Mar 2010 20:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/kubernets-components-pod/</guid><description>&lt;p>K8S 中有各种各样的组件，对于容器来说 K8S 的最小单元由 Pod 进行组成，它封装了一个或多个应用程序的容器、存储资源、网络 IP 以及管理容器的选项。&lt;/p></description></item><item><title>【专题】Linux 环境搭建</title><link>https://gohalo.github.io/cn/blog/topic-linux-environment-setup/</link><pubDate>Thu, 25 Feb 2010 22:10:42 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/topic-linux-environment-setup/</guid><description>&lt;p>Linux 有多个发行版本，其中 RedHat、Debian 及其衍生版本占了很大一部分，大部分的基本功能相似，但是环境又略有区别，这里简单介绍其基础的环境使用，以及一些常见概念。&lt;/p></description></item><item><title>Tags</title><link>https://gohalo.github.io/cn/blog/tags/</link><pubDate>Wed, 24 Sep 2003 21:40:13 +0200</pubDate><guid>https://gohalo.github.io/cn/blog/tags/</guid><description/></item><item><title>归档</title><link>https://gohalo.github.io/cn/blog/archives/</link><pubDate>Wed, 24 Sep 2003 21:40:13 +0200</pubDate><guid>https://gohalo.github.io/cn/blog/archives/</guid><description/></item><item><title>Hello World</title><link>https://gohalo.github.io/cn/blog/hello-world/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0800</pubDate><guid>https://gohalo.github.io/cn/blog/hello-world/</guid><description>&lt;p>Hi, the world, I&amp;rsquo;m coooooooooming.&lt;/p>
&lt;p>Oooops, just examples, ignore me, darling.&lt;/p></description></item><item><title/><link>https://gohalo.github.io/cn/blog/kubernets-components-ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohalo.github.io/cn/blog/kubernets-components-ingress/</guid><description/></item><item><title>K8S 网络简介</title><link>https://gohalo.github.io/cn/blog/kubernets-network-introduce/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohalo.github.io/cn/blog/kubernets-network-introduce/</guid><description>K8S 中的网络以及 IP 地址都分了三层，分别为：
Node Network 各个 Node 之间的通讯方式，可以是物理网络或者虚拟网络； Pod Network 各个 Pod 之间通讯，Pod 可以在 Node 内部，也可以是跨 Node ； Service Network 也就是 Pod 对外部暴露的接口，创建 Service 时会新建一个 IP 。 与之对应的 IP 地址包括了：
Node IP 每个 Node 之间通讯时，分配的 IP 地址； Pod IP 每个 Pod 会分配一个 IP 地址，一般由 Pause 容器创建，一个 Node 中可以包含多个 Pod ； Cluster IP 对应了 Service 内部 IP ，作为服务的入口。 K8S 支持 Flannel、Calico、Weave Network 等多种 CNI 网络驱动。
&amp;mdash;&amp;ndash; 获取Cluster IP信息
kubectl get services # &amp;mdash;&amp;ndash; 各个Pod IP信息</description></item><item><title>Linux 子进程创建</title><link>https://gohalo.github.io/cn/blog/c-linux-fork-process-execute/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohalo.github.io/cn/blog/c-linux-fork-process-execute/</guid><description/></item></channel></rss>